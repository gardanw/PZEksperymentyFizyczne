__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1616425710570, "visualife": [".py", "import visualife.core\nimport visualife.data\nimport visualife.calc\nimport visualife.utils\nimport visualife.widget\nimport visualife.diagrams\n\n", ["visualife.calc", "visualife.core", "visualife.data", "visualife.diagrams", "visualife.utils", "visualife.widget"], 1], "visualife.calc.DataBins2D": [".py", "#!/usr/bin/env python3\n__author__=\"Dominik Gront\"\n__copyright__=\"University of Warsaw\"\n__license__=\"Apache License, Version 2.0\"\n\nfrom visualife.calc import Histogram2D\nfrom collections import defaultdict\n\n\nclass DataBins2D(Histogram2D):\n ''\n\n\n \n \n def __init__(self,**kwargs):\n  ''\n\n\n  \n  super().__init__(**kwargs)\n  self.__data=defaultdict(list)\n  \n def observe(self,*points,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  if \"columns\"in kwargs:\n   i_column,j_column=kwargs[\"columns\"]\n  else :\n   i_column=kwargs.get(\"i_column\",0)\n   j_column=kwargs.get(\"j_column\",1)\n   \n  if isinstance(points[0],(int,float)):\n   ix,iy=super().observe_x_y(points[0],points[1])\n   self.__insert(ix,iy,points)\n  elif isinstance(points[0],tuple):\n   ix,iy=super().observe_x_y(points[0][i_column],points[0][j_column])\n   self.__insert(ix,iy,points[0])\n  else :\n   for p in points[0]:\n    ix,iy=super().observe_x_y(p[i_column],p[j_column])\n    self.__insert(ix,iy,p)\n    \n def observe_x_y(self,x,y,*row):\n  ''\n\n\n\n\n\n\n\n  \n  \n  ix,iy=super().observe_x_y(x,y)\n  self.__insert(ix,iy,*row)\n  \n def get_observations(self,bin_coords):\n  return self.__data[bin_coords]\n  \n def __insert(self,x_place,y_place,observation):\n  key=(x_place,y_place)\n  if key not in self.__data:\n   self.__data[key]=[]\n  self.__data[key].append(observation)\n", ["collections", "visualife.calc"]], "visualife.calc.Histogram": [".py", "#!/usr/bin/env python3\n__author__=\"Dominik Gront\"\n__copyright__=\"UW\"\n__license__=\"Apache License, Version 2.0\"\n\nfrom math import ceil\n\n\nclass Histogram:\n\n __N_BINS=100\n __WIDTH=1\n __HIST_RANGE=(-180,180)\n \n def __init__(self,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n  \n  \n  self.__n_bins=kwargs.get(\"n_bins\",Histogram.__N_BINS)\n  self.__range=kwargs.get(\"range\",None )\n  if \"width\"in kwargs:\n   self.__width=kwargs[\"width\"]\n   if self.__range:\n    self.__assign_number_of_bins(self.__range[0],self.__range[1],self.__width)\n  else :\n   if self.__range:\n    self.__width=(self.__range[1]-self.__range[0])/float(self.__n_bins)\n   else :\n    self.__width=None\n    \n  self.__count_in_hist=0\n  self.__count_outliers=0\n  self.__bin_outliers=kwargs.get(\"bin_outliers\",False )\n  p=self.__n_bins\n  self.__data=[0 for _ in range(p)]\n  \n @property\n def width(self):\n  ''\n\n  \n  return self.__width\n  \n @property\n def n_bins(self):\n  ''\n\n  \n  return self.__n_bins\n  \n def clear(self):\n  ''\n  self.__data=[0 for _ in range(self.n_bins)]\n  \n def observe(self,*points):\n  ''\n\n\n  \n  if not isinstance(points[0],list):\n   points=list(points)\n  else :\n   points=points[0]\n   \n   if not self.__range:\n    self.__range=min(points),max(points)\n   if not self.__width:\n    self.__width=(self.__range[1]-self.__range[0])/float(self.__n_bins)\n    \n  for x in points:\n   if x <self.__range[0]:\n    if self.__bin_outliers:\n     self.__data[0]+=1\n    else :\n     self.__count_outliers +=1\n   elif x >=self.__range[1]:\n    if self.__bin_outliers:\n     self.__data[-1]+=1\n    else :\n     self.__count_outliers +=1\n   else :\n    x_place=int((x -self.__range[0])/self.__width)\n    self.__data[x_place]+=1\n    \n def highest_bin(self):\n  ''\n\n  \n  max_val=max(self.__data)\n  max_idx=self.__data.index(max_val)\n  return max_idx,max_val\n  \n @property\n def outliers(self):\n  ''\n\n  \n  return self.__count_outliers\n  \n def counts(self,*args):\n  ''\n\n\n\n  \n  if args:\n   return self.__data[args[0]]\n  return self.__count_in_hist\n  \n def bin_from_to(self,bin_index):\n  ''\n\n\n  \n  return self.__range[0]+bin_index *self.__width,self.__range[0]+(bin_index+1)*self.__width\n  \n def __str__(self):\n  s=\"\"\n  for i in range(self.__n_bins):\n   r=self.bin_from_to(i)\n   s +=\"%6.1f %6.1f : %6d\\n\"%(r[0],r[1],self.__data[i])\n  return s\n  \n def __assign_number_of_bins(self,x_from,x_to,width):\n  self.__n_bins=int(ceil((x_to -x_from)/width))\n  self.__data=[0 for _ in range(self.n_bins)]\n", ["math"]], "visualife.calc.Histogram2D": [".py", "#!/usr/bin/env python3\n__author__=\"Anna O\u017cd\u017ce\u0144ska, Dominik Gront\"\n__copyright__=\"University of Warsaw\"\n__license__=\"Apache License, Version 2.0\"\n\nfrom collections import defaultdict\n\n\nclass Histogram2D:\n\n __N_BINS=100\n __WIDTH=1\n __HIST_RANGE=(-50,50)\n \n def __get_width_and_range(self,let:str,by_bins:bool,by_range:bool,by_width:bool):\n  if by_bins:\n   n_bins:int=self.args[f\"n_bins_{let}\"]\n   if by_range:\n    hist_range:tuple=self.args[f\"{let}_range\"]\n    range_len:float=hist_range[1]-hist_range[0]\n    width=range_len /n_bins\n   elif by_width:\n    width=self.args[f\"{let}_width\"]\n    hist_range:tuple=(-width *n_bins /2,width *n_bins /2)\n   else :\n    width=self.__WIDTH\n    hist_range:tuple=(-width *n_bins /2,width *n_bins /2)\n    \n  elif by_range:\n   hist_range:tuple=self.args[f\"{let}_range\"]\n   if by_width:\n    width=self.args[f\"{let}_width\"]\n   else :\n    width=self.__WIDTH\n    \n  elif by_width:\n   width=self.args[f\"{let}_width\"]\n   hist_range:tuple=self.__HIST_RANGE\n   \n  else :\n   width=self.__WIDTH\n   hist_range:tuple=self.__HIST_RANGE\n   \n  return width,hist_range\n  \n def __init__(self,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.args=kwargs.copy()\n  \n  if \"n_bins\"in kwargs.keys():\n   x_by_bins=y_by_bins=True\n   self.args[\"n_bins_x\"]=self.args[\"n_bins_y\"]=int(kwargs[\"n_bins\"])\n  else :\n   x_by_bins=\"n_bins_x\"in kwargs.keys()\n   y_by_bins=\"n_bins_y\"in kwargs.keys()\n   \n  if \"range\"in kwargs.keys():\n   x_by_range=y_by_range=True\n   self.args[\"x_range\"]=self.args[\"y_range\"]=kwargs[\"range\"]\n  else :\n   x_by_range=\"x_range\"in kwargs.keys()\n   y_by_range=\"y_range\"in kwargs.keys()\n   \n  x_by_width=\"x_width\"in kwargs.keys()or \"width\"in kwargs.keys()\n  y_by_width=\"y_width\"in kwargs.keys()or \"width\"in kwargs.keys()\n  if \"width\"in kwargs.keys():\n   self.args[\"x_width\"]=kwargs[\"width\"]\n   self.args[\"y_width\"]=kwargs[\"width\"]\n   \n  self.x_width,self.x_hist_range=self.__get_width_and_range('x',x_by_bins,x_by_range,x_by_width)\n  self.y_width,self.y_hist_range=self.__get_width_and_range('y',y_by_bins,y_by_range,y_by_width)\n  self.__count_outliers=self.__count_in_hist=0\n  self.__x_hist,self.__y_hist,self.__hist=defaultdict(int),defaultdict(int),defaultdict(int)\n  \n def observe(self,*points,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  if \"columns\"in kwargs:\n   i_column,j_column=kwargs[\"columns\"]\n  else :\n   i_column=kwargs.get(\"i_column\",0)\n   j_column=kwargs.get(\"j_column\",1)\n   \n  if isinstance(points[0],(int,float)):\n   self.observe_x_y(points[0],points[1])\n  elif isinstance(points[0],tuple):\n   self.observe_x_y(points[0][i_column],points[0][j_column])\n  else :\n   for p in points[0]:\n    self.observe_x_y(p[i_column],p[j_column])\n    \n def observe_x_y(self,x,y):\n  ''\n\n\n\n\n  \n  \n  x_place=(x //self.x_width)*self.x_width\n  y_place=(y //self.y_width)*self.y_width\n  \n  if any([\n  x_place <self.x_hist_range[0],x_place >self.x_hist_range[1],\n  y_place <self.y_hist_range[0],y_place >self.y_hist_range[1],\n  ]):\n   self.__count_outliers +=1\n   \n  else :\n   self.__x_hist[x_place]+=1\n   self.__y_hist[y_place]+=1\n   self.__hist[(x_place,y_place)]+=1\n   self.__count_in_hist +=1\n  return x_place,y_place\n  \n def outliers(self):\n  return self.__count_outliers\n  \n def count(self):\n  return self.__count_in_hist\n  \n def histogram_x(self):\n  return dict(self.__x_hist)\n  \n def histogram_y(self):\n  return dict(self.__y_hist)\n  \n def get_bin_by_point(self,point):\n  x,y=point\n  x_place=(x //self.x_width)*self.x_width\n  y_place=(y //self.y_width)*self.y_width\n  return self.get_bin_by_coordinates((x_place,y_place))\n  \n def get_bin_by_coordinates(self,coords):\n  return self.__hist[coords]\n  \n def get_bin_coordinates(self,point):\n  x,y=point\n  x_place=(x //self.x_width)*self.x_width\n  y_place=(y //self.y_width)*self.y_width\n  return x_place,y_place\n  \n def get_histogram(self):\n  return dict(self.__hist)\n  \n def get_xyv(self):\n  x,y,val=[],[],[]\n  for k,v in self.__hist.items():\n   x.append(k[0])\n   y.append(k[1])\n   val.append(v)\n   \n  return x,y,val\n", ["collections"]], "visualife.calc.math_utils": [".py", "import math\n\n\ndef polar_to_cartesian(r,degrees,x0=0,y0=0):\n ''\n\n\n\n\n\n\n \n radians=degrees *math.pi /180.0\n return x0+(r *math.cos(radians)),y0+(r *math.sin(radians))\n \n \ndef linspace(start,stop,**kwargs):\n ''\n\n\n\n\n\n\n\n\n\n \n \n num=kwargs.get(\"num\",10)\n step=kwargs.get(\"step\",(stop -start)/float(num))\n endpoint=kwargs.get(\"endpoint\",True )\n ret=[]\n x=start\n while x <=stop:\n  ret.append(x)\n  x +=step\n  \n if not endpoint:return ret[:-1]\n else :return ret\n \n \ndef regular_polygon(n,r=1,cx=0,cy=0,phase=0):\n ''\n\n\n\n\n\n\n\n\n \n return [(r *math.cos(2 *math.pi *i /n+phase)+cx,\n r *math.sin(2 *math.pi *i /n+phase)+cy)for i in range(n)]\n", ["math"]], "visualife.calc": [".py", "from .Histogram2D import Histogram2D\nfrom .Histogram import Histogram\nfrom .DataBins2D import DataBins2D\n", ["visualife.calc.DataBins2D", "visualife.calc.Histogram", "visualife.calc.Histogram2D"], 1], "visualife.core.axes": [".py", "#! /usr/bin/env python\n''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom math import fabs\nfrom visualife.core.styles import get_font_size,make_darker\n\n\nclass Axis:\n ''\n\n\n \n \n \n \n \n \n \n \n def __init__(self,min_screen,max_screen,min_data,max_data):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  self.__min_screen_coordinate=min_screen\n  self.__max_screen_coordinate=max_screen\n  self.__small_screen_tics=[]\n  self.__big_screen_tics=[]\n  self.__tics_labels=[]\n  self.__tics_width=fabs((max_screen -min_screen)/100)\n  self.__are_tics_inside=True\n  self.__axis_location=None\n  self.__min_data_value=min_data\n  self.__max_data_value=max_data\n  self.__label=''\n  self.__label_x=0\n  self.__label_y=0\n  self.__label_shift=fabs((max_screen -min_screen)/15)\n  self.__grid=[]\n  self.__label_font_size=get_font_size((max_screen -min_screen)/45)\n  self.__tics_label_font_size=get_font_size((max_screen -min_screen)/50)\n  self.__tics_vertical=False\n  self.__show_tics=True\n  self.__show_tics_labels=True\n  self.__n_tics=()\n  \n  \n  self.fill=\"Black\"\n  self.stroke=\"Black\"\n  self.stroke_width=1\n  \n @property\n def min_screen_coordinate(self):\n  ''\n\n\n  \n  return self.__min_screen_coordinate\n  \n @property\n def max_screen_coordinate(self):\n  ''\n\n\n  \n  return self.__max_screen_coordinate\n  \n @property\n def small_screen_tics(self):\n  ''\n  return self.__small_screen_tics\n  \n @property\n def big_screen_tics(self):\n  ''\n  return self.__big_screen_tics\n  \n @property\n def tics_labels(self):\n  ''\n  return self.__tics_labels\n  \n def add_tics_labels(self,format_string=\"%.2f\"):\n  ''\n  \n  self.__tics_labels=[]\n  for tx in self.big_screen_tics:\n   t=str(format_string %self.axis_coordinate(tx))\n   self.__tics_labels.append(t)\n   \n  return self.__tics_labels\n  \n @property\n def tics_width(self):\n  ''\n\n\n\n\n  \n  return self.__tics_width\n  \n @tics_width.setter\n def tics_width(self,tics_width):\n  self.__tics_width=tics_width\n  \n @property\n def tics_vertical(self):\n  ''\n\n\n\n\n  \n  return self.__tics_vertical\n  \n @tics_vertical.setter\n def tics_vertical(self,are_vertical):\n  self.__tics_vertical=are_vertical\n  \n @property\n def min_data_value(self):\n  ''\n\n\n\n\n  \n  return self.__min_data_value\n  \n @min_data_value.setter\n def min_data_value(self,min_data_value):\n  self.__min_data_value=min_data_value\n  \n @property\n def max_data_value(self):\n  ''\n\n\n\n\n  \n  return self.__max_data_value\n  \n @max_data_value.setter\n def max_data_value(self,max_data_value):\n  self.__max_data_value=max_data_value\n  \n @property\n def are_tics_inside(self):\n  ''\n\n\n\n\n\n  \n  return self.__are_tics_inside\n  \n @are_tics_inside.setter\n def are_tics_inside(self,if_inside):\n  self.__are_tics_inside=if_inside\n  \n @property\n def axis_location(self):\n  ''\n\n\n\n\n\n\n\n\n\n\n  \n  return self.__axis_location\n  \n @axis_location.setter\n def axis_location(self,locator):\n  self.__axis_location=locator\n  \n @property\n def label(self):\n  ''\n\n\n\n\n  \n  return self.__label\n  \n @label.setter\n def label(self,new_label):\n  self.__label=new_label\n  \n @property\n def label_shift(self):\n  ''\n\n\n\n\n  \n  return self.__label_shift\n  \n @label_shift.setter\n def label_shift(self,new_shift):\n  self.__label_shift=new_shift\n  \n @property\n def label_font_size(self):\n  ''\n\n\n\n\n  \n  return self.__label_font_size\n  \n @property\n def show_tics(self):\n  ''\n\n\n\n\n\n\n  \n  return self.__show_tics\n  \n @show_tics.setter\n def show_tics(self,flag):\n  self.__show_tics=flag\n  \n @property\n def show_tics_labels(self):\n  ''\n\n\n\n\n\n  \n  return self.__show_tics_labels\n  \n @show_tics_labels.setter\n def show_tics_labels(self,flag):\n  self.__show_tics_labels=flag\n  \n @label_font_size.setter\n def label_font_size(self,label_font_size):\n  self.__label_font_size=label_font_size\n  \n @property\n def tics_label_font_size(self):\n  ''\n\n\n\n\n  \n  return self.__tics_label_font_size\n  \n @tics_label_font_size.setter\n def tics_label_font_size(self,tics_label_font_size):\n  self.__tics_label_font_size=tics_label_font_size\n  \n @property\n def n_tics(self):\n  return self.__n_tics\n  \n  \n def set_range(self,min_value,max_value):\n  ''\n\n\n\n\n\n\n\n  \n  self.__min_data_value=min_value\n  self.__max_data_value=max_value\n  \n def axis_coordinate(self,p):\n  ''\n\n\n\n\n\n\n  \n  return (p -self.__min_screen_coordinate)/(self.__max_screen_coordinate -self.__min_screen_coordinate)\\\n  *(self.__max_data_value -self.__min_data_value)+self.__min_data_value\n  \n def screen_coordinate(self,x):\n  ''\n\n\n\n\n\n\n  \n  return (x -self.__min_data_value)/(self.__max_data_value -self.__min_data_value)\\\n  *(self.__max_screen_coordinate -self.__min_screen_coordinate)+self.__min_screen_coordinate\n  \n def tics_at_fraction(self,fraction_values,labels_values):\n  ''\n\n\n\n\n\n\n\n  \n  self.__small_screen_tics.clear()\n  self.__big_screen_tics.clear()\n  self.__tics_labels.clear()\n  if len(fraction_values)==0:\n   for i in range(len(labels_values)):\n    fraction_values.append(float(i /(len(labels_values)-1)))\n  for t in fraction_values:\n   self.__big_screen_tics.append(\n   (self.__max_screen_coordinate -self.__min_screen_coordinate)*t+self.__min_screen_coordinate)\n  for lab in labels_values:\n   self.__tics_labels.append(lab)\n   \n def tics_at_values(self,values,format_string=\"%.2f\"):\n  ''\n\n\n\n\n\n\n\n  \n  self.__small_screen_tics.clear()\n  self.__big_screen_tics.clear()\n  self.__tics_labels.clear()\n  for t in values:\n   self.__big_screen_tics.append(self.screen_coordinate(t))\n  for t in values:\n   self.__tics_labels.append(format_string %t)\n   \n def tics(self,n_small_tics,n_big_tics,format_string=\"%.2f\"):\n  ''\n\n\n\n\n\n\n\n\n\n  \n  self.__n_tics=(n_small_tics,n_big_tics)\n  self.__small_screen_tics.clear()\n  self.__big_screen_tics.clear()\n  self.__tics_labels.clear()\n  for i in range(n_small_tics):\n   self.__small_screen_tics.append((self.__max_screen_coordinate -self.__min_screen_coordinate)*i /float(\n   n_small_tics -1.0)+self.__min_screen_coordinate)\n  for i in range(n_big_tics):\n   self.__big_screen_tics.append((self.__max_screen_coordinate -self.__min_screen_coordinate)*i /float(\n   n_big_tics -1.0)+self.__min_screen_coordinate)\n  self.add_tics_labels(format_string)\n  \n @property\n def tics_factor(self):\n  switcher={\"U1\":1,\"U0\":-1,\"B1\":-1,\"B0\":1,\"L1\":1,\"L0\":-1,\"R1\":-1,\"R0\":1}\n  return switcher[self.axis_location+str(int(self.are_tics_inside))]\n  \n  \nclass AxisX(Axis):\n ''\n\n \n \n \n \n def __init__(self,screen_y,min_screen,max_screen,min_data,max_data,orientation):\n  ''\n  Axis.__init__(self,min_screen,max_screen,min_data,max_data)\n  self.__screen_y=screen_y\n  self.axis_location=orientation\n  \n @property\n def screen_y(self):\n  ''\n\n\n\n\n  \n  return self.__screen_y\n  \n @screen_y.setter\n def screen_y(self,screen_y):\n  self.__screen_y=screen_y\n  return self\n  \n def draw(self,drawing):\n  ''\n\n\n  \n  \n  \n  drawing.line(\"Xaxis\"+self.axis_location,self.min_screen_coordinate,self.screen_y,\n  self.max_screen_coordinate,self.screen_y,stroke=self.stroke,stroke_width=self.stroke_width,\n  fill=self.fill)\n  \n  \n  x=((self.max_screen_coordinate -self.min_screen_coordinate)/2.0)+self.min_screen_coordinate\n  if self.axis_location =='U':\n   y=self.__screen_y -self.label_shift\n  else :\n   y=self.__screen_y+self.label_shift+self.label_font_size\n  if self.label !=\"\":\n   drawing.text(\"label\"+self.axis_location,x,y,self.label,font_size=self.label_font_size)\n   \n   \n  if self.show_tics:\n   if self.are_tics_inside ==True :\n    drawing.start_group(\"XaxisTics\"+self.axis_location)\n    for x_ti in self.small_screen_tics:\n     drawing.line(\"small\",x_ti,self.screen_y,x_ti,self.screen_y+self.tics_width *self.tics_factor,\n     stroke=self.stroke,stroke_width=self.stroke_width /8,\n     fill=make_darker(self.fill,0.3))\n    for x_ti in self.big_screen_tics:\n     drawing.line(\"big\",x_ti,self.screen_y,x_ti,\n     self.screen_y+2 *self.tics_width *self.tics_factor,stroke=self.stroke,\n     stroke_width=self.stroke_width /8,fill=make_darker(self.fill,0.3))\n    drawing.close_group()\n    \n    \n  if self.show_tics_labels:\n   drawing.start_group(\"XaxisTicsLab\"+self.axis_location)\n   for text,x in zip(self.tics_labels,self.big_screen_tics):\n    if self.axis_location =='U':\n     y=self.__screen_y -3 *(self.tics_width)\n     angle=-90 if self.tics_vertical else 0\n    else :\n     y=self.__screen_y+4 *(self.tics_width)\n     angle=-90 if self.tics_vertical else 0\n    drawing.text(\"tics_label\",x,y,text,font_size=self.tics_label_font_size,angle=angle)\n   drawing.close_group()\n   \n   \nclass AxisY(Axis):\n ''\n\n\n \n \n \n \n def __init__(self,screen_x,min_screen,max_screen,min_data,max_data,orientation):\n  ''\n  Axis.__init__(self,min_screen,max_screen,min_data,max_data)\n  self.__screen_x=screen_x\n  self.axis_location=orientation\n  \n @property\n def screen_x(self):\n  ''\n\n\n\n\n  \n  return self.__screen_x\n  \n @screen_x.setter\n def screen_x(self,screen_x):\n  self.__screen_x=screen_x\n  return self\n  \n def draw(self,drawing):\n  ''\n\n\n  \n  \n  \n  drawing.line(\"Yaxis\"+self.axis_location,self.screen_x,self.min_screen_coordinate,self.screen_x,\n  self.max_screen_coordinate,stroke=self.stroke,stroke_width=self.stroke_width,fill=self.fill)\n  \n  \n  lab_width,lab_height=0,0\n  if self.show_tics:\n   if self.are_tics_inside:\n    drawing.start_group(\"YaxisTics\"+self.axis_location)\n    for y_ti in self.small_screen_tics:\n     drawing.line(\"small\",self.screen_x,y_ti,self.screen_x+self.tics_width *self.tics_factor,y_ti)\n    for y_ti in self.big_screen_tics:\n     drawing.line(\"big\",self.screen_x,y_ti,self.screen_x+2 *self.tics_width *self.tics_factor,\n     y_ti)\n    drawing.close_group()\n    \n    \n  lab_width=0\n  if self.show_tics_labels:\n   if drawing.viewport_name()==\"SVG\":\n    n_char=len(self.tics_labels[0])\n    \n    cnt=0\n    for i in range(len(self.tics_labels)):\n     n=len(self.tics_labels[i])\n     if n >n_char:\n      cnt=i\n    lab_width,lab_height=drawing.text_length(self.tics_labels[cnt],font_size=self.tics_label_font_size)\n   else :\n    lab_width,lab_height=drawing.text_length(self.tics_labels[0])\n    for lab in self.tics_labels[1:]:\n     w,h=drawing.text_length(lab)\n     if w >lab_width:lab_width=w\n     \n   drawing.start_group(\"YaxisTicsLab\"+self.axis_location)\n   for text,y in zip(self.tics_labels,self.big_screen_tics):\n    if self.axis_location =='L':\n     x=self.screen_x -15\n     angle=-90 if self.tics_vertical else 0\n     anchor=\"end\"\n    else :\n     x=self.screen_x+15\n     angle=90 if self.tics_vertical else 0\n     anchor=\"start\"\n    drawing.text(\"tics_label\",x,y,text,font_size=self.tics_label_font_size,angle=angle,text_anchor=anchor)\n   drawing.close_group()\n   \n   \n  lab_shift=lab_width if not self.tics_vertical else lab_height\n  \n  if self.axis_location =='L':\n   x=self.__screen_x -30 -lab_shift\n   angle=-90\n  else :\n   x=self.__screen_x+30+lab_shift\n   angle=90\n  y=((self.min_screen_coordinate -self.max_screen_coordinate)/2.0)+self.max_screen_coordinate\n  drawing.text(\"LabelY\",x,y,self.label,font_size=self.label_font_size,angle=angle)\n", ["math", "visualife.core.styles"]], "visualife.core.CanvasViewport": [".py", "#! /usr/bin/env python\n\nimport sys\nfrom visualife.core.styles import hex_to_rgb\nfrom math import pi,sin,cos,floor\nfrom browser import console,window,html,document\n\nclass CanvasViewport:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n __slots__=['__canvas','__viewport_width','__viewport_height']\n \n def __init__(self,canvas,width,height):\n  ''\n\n  \n  self.__canvas=canvas\n  self.__viewport_width=width\n  self.__viewport_height=height\n  self.__if_stroke=False\n  self.__last_scale=1\n  \n def __prepare_attributes(self,**kwargs):\n  ''\n  \n  if 'fill'in kwargs:self.__canvas.fillStyle=str(kwargs['fill'])\n  if 'stroke_width'in kwargs:\n   if kwargs['stroke_width']==0:\n    self.__if_stroke=False\n   else :\n    self.__canvas.lineWidth=kwargs['stroke_width']\n  self.__canvas.strokeStyle=\"#000000\"\n  if 'stroke'in kwargs:\n   if kwargs['stroke']==\"none\":\n    self.__if_stroke=False\n   else :\n    self.__canvas.strokeStyle=kwargs['stroke']\n  font_str=' '\n  if 'font_weight'in kwargs:\n   font_str +=kwargs['font_weight']+\" \"\n  font_str +=\" %dpx \"%kwargs.get('font_size',12)\n  font_str +=\" \"+kwargs.get('font_family',\"Arial\")\n  self.__canvas.font=font_str\n  \n  if 'text_anchor'in kwargs:\n   if kwargs['text_anchor']==\"middle\":\n    self.__canvas.textAlign=\"center\"\n   else :\n    self.__canvas.textAlign=kwargs['text_anchor']\n    \n def rect(self,id_str,x,y,w,h,**kwargs):\n  ''\n\n\n\n\n\n\n\n  \n  self.__prepare_attributes(**kwargs)\n  if 'fill'in kwargs:\n   self.__canvas.fillRect(x,y,w,h)\n   \n  if self.__if_stroke:\n   self.__canvas.strokeRect(x,y,w,h)\n   \n def square(self,id_str,x,y,a,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  self.__prepare_attributes(**kwargs)\n  if 'fill'in kwargs:\n   self.__canvas.fillRect(x -a /2,y -a /2,a,a)\n  if self.__if_stroke:\n   self.__canvas.strokeRect(x -a /2,y -a /2,a,a)\n   \n def circle(self,id_str,x,y,r,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  self.__prepare_attributes(**kwargs)\n  self.__canvas.beginPath()\n  self.__canvas.arc(x,y,r,0,2 *pi)\n  self.__canvas.fill()\n  self.__canvas.stroke()\n  \n  \n def line(self,id_str,xb,yb,xe,ye,**kwargs):\n  ''\n\n\n\n\n\n\n\n  \n  self.__prepare_attributes(**kwargs)\n  self.__canvas.beginPath()\n  self.__canvas.moveTo(xb,yb)\n  self.__canvas.lineTo(xe,ye)\n  self.__canvas.stroke()\n  \n def ellipse(self,id_str,x,y,rx,ry,**kwargs):\n  ''\n\n\n\n\n\n\n\n  \n  raise NotImplementedError\n  \n def polygon(self,id_str,points,**kwargs):\n  ''\n\n\n\n\n  \n  self.__prepare_attributes(**kwargs)\n  self.__canvas.beginPath()\n  self.__canvas.moveTo(points[0][0],points[0][1])\n  for p in points[1:]:\n   self.__canvas.lineTo(p[0],p[1])\n  self.__canvas.closePath()\n  self.__canvas.fill()\n  self.__canvas.stroke()\n  \n def triangle(self,id_str,x,y,r,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  angle=2 *pi /3.0\n  points=[[x+r *sin(0 *angle),y+r *cos(0 *angle)],\n  [x+r *sin(1 *angle),y+r *cos(1 *angle)],\n  [x+r *sin(2 *angle),y+r *cos(2 *angle)]]\n  self.polygon(id_str,points,**kwargs)\n  \n  \n def rhomb(self,id_str,x,y,r,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  points=[[x,y+r],[x+r,y],[x,y -r],[x -r,y]]\n  self.polygon(id_str,points,**kwargs)\n  \n  \n def text(self,id_str,x,y,text,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  self.__prepare_attributes(**kwargs)\n  self.__canvas.fillText(text,x,y)\n  \n def circles_group(self,gid,x,y,c,r,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  \n  if not isinstance(r,list):\n   r=[r]\n  for i in range(len(x)):\n   self.circle(gid+\":\"+str(i),x[i],y[i],r[i %len(r)],fill=c[i %len(c)].__str__())\n   \n def squares_grid(self,gid,x0,y0,w,h,rows,columns,**kwargs):\n  ''\n\n\n\n\n\n\n\n  \n  def color_pixel(i,color):\n   c=hex_to_rgb(color)\n   imageData.data[i+0]=c[0];\n   imageData.data[i+1]=c[1];\n   imageData.data[i+2]=c[2];\n   imageData.data[i+3]=255 ;\n   \n  colors=kwargs.get(\"colors\",[\"pink\"])\n  \n  imageData=self.__canvas.createImageData(w *columns,h *rows);\n  for ir in range(h *rows):\n   for iw in range(columns *w):\n    ii=ir *imageData.width *4+iw *4\n    cc=int(iw /w)+floor(ir /h)*columns\n    \n    color_pixel(ii,colors[(cc)%len(colors)])\n    \n  self.__canvas.putImageData(imageData,x0,y0);\n  \n def squares_group(self,id_str,x,y,c,a,**kwargs):\n  ''\n\n\n\n\n\n\n\n  \n  self.__prepare_attributes(**kwargs)\n  \n  for i in range(len(x)):\n   self.__canvas.fillStyle=str(c[i])\n   \n   self.__canvas.fillRect(x[i]-a /2,y[i]-a /2,a,a)\n  if 'stroke'in kwargs:\n   for i in range(len(x)):\n    self.__canvas.strokeRect(x[i]-a /2,y[i]-a /2,a,a)\n    \n def triangle_group(self,gid,x,y,c,r,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  for i in range(len(x)):\n   self.triangle(gid+\":\"+str(i),x[i],y[i],r,fill=c[i %len(c)].__str__())\n   \n def rhomb_group(self,gid,x,y,c,r,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  for i in range(len(x)):\n   self.rhomb(gid+\":\"+str(i),x[i],y[i],r,fill=c[i %len(c)].__str__())\n   \n def translate(self,delta_x,delta_y):\n  ''\n  self.__canvas.translate(delta_x,delta_y)\n  \n def viewport_name(self):\n  ''\n\n  \n  return \"CANVAS\"\n  \n def get_width(self):\n  ''\n  \n  return self.__viewport_width\n  \n def get_height(self):\n  ''\n  \n  return self.__viewport_height\n  \n def error_msg(self,msg):\n  ''\n\n\n\n  \n  print(msg)\n  \n def clear(self):\n  ''\n  self.__canvas.clearRect(0,0,self.get_width(),self.get_height())\n  \n def close(self):\n  ''\n  \n  pass\n  \n def binary_map_2(self,matrix_as_string,dimension_rows,dimension_columns,**kwargs):\n  ''\n\n\n\n\n  \n  def draw(id):\n  \n  \n   self.__canvas.scale(scale_for_now,scale_for_now);\n   self.__canvas.imageSmoothingEnabled=False\n   self.__canvas.drawImage(id,0,0);\n   \n  scale=int(self.__viewport_width /dimension_columns)\n  \n  scale_for_now=1\n  \n  if self.__last_scale !=scale:\n   scale_for_now=int(scale /self.__last_scale)\n   self.__last_scale=scale_for_now\n   \n   \n  if isinstance(matrix_as_string,str):\n   a=[]\n   new_str=matrix_as_string\n   \n   for i in new_str:\n    a.append(int(i)*255)\n    a.append(int(i)*255)\n    a.append(int(i)*255)\n    a.append(255)\n    \n  else :\n   a=matrix_as_string\n   \n  arr=window.Uint8ClampedArray.new(a)\n  id=window.ImageData.new(arr,dimension_columns)\n  \n  options={\n  \n  \n  \n  }\n  window.createImageBitmap(id,options).then(draw)\n  \n  \n", ["browser", "math", "sys", "visualife.core.styles"]], "visualife.core.DraggablePlot": [".py", "#! /usr/bin/env python\n\nfrom browser import document\nfrom visualife.core.Plot import Plot\n\nplot_counter=0\n\nclass DraggablePlot(Plot):\n ''\n \n \n \n __slots__=['__is_dragged','__drag_x','__drag_y','__shift_x','__shift_y','__max_drag_x','__max_drag_y','__max_x','__max_y','__min_x','__min_y']\n \n def __init__(self,viewport,min_screen_x,max_screen_x,min_screen_y,max_screen_y,min_data_x,max_data_x,\n min_data_y,max_data_y,axes_definition=\"BL\"):\n  super().__init__(viewport,min_screen_x,max_screen_x,min_screen_y,max_screen_y,\n  min_data_x,max_data_x,min_data_y,max_data_y,axes_definition)\n  \n  global plot_counter\n  \n  self.__is_dragged=False\n  self.__drag_x=0\n  self.__drag_y=0\n  self.__shift_x=0\n  self.__shift_y=0\n  self.__max_drag_x=max_screen_x -min_screen_x\n  self.__max_drag_y=max_screen_y -min_screen_y\n  self.__max_x=max_data_x\n  self.__max_y=max_data_y\n  self.__min_x=min_data_x\n  self.__min_y=min_data_y\n  \n  \n  \n  plot_counter +=1\n  self.clip_path_name=\"clip-element-\"+str(plot_counter)\n  self.clip_path_tics=\"clip-axis-\"+str(plot_counter)\n  viewport.start_clip_path(self.clip_path_name)\n  style=\"\"\"opacity:0;\"\"\"\n  viewport.rect(self.clip_path_name+\"-plot\",min_screen_x,min_screen_y,max_screen_x -min_screen_x,max_screen_y -min_screen_y)\n  viewport.close_clip_path()\n  viewport.start_clip_path(self.clip_path_tics)\n  viewport.rect(\"axisL\",0,min_screen_x -10,min_screen_x+20,max_screen_y -min_screen_x+20,style=style)\n  viewport.rect(\"axisB\",min_screen_x -10,max_screen_y -10,max_screen_x -min_screen_x+20,min_screen_y,style=style)\n  viewport.rect(\"axisU\",max_screen_x -10,min_screen_y -10,min_screen_x+10,max_screen_y -min_screen_y+20,style=style)\n  viewport.rect(\"axisR\",min_screen_x -10,min_screen_y -30,max_screen_x -min_screen_x+20,min_screen_y,style=style)\n  viewport.close_clip_path()\n  \n  \n  self.axes[\"B\"].tics_at_fraction([0,0.5,1,1.5,2],[0,0.25,0.5,0.75,1.0])\n  \n  \n  \n  if viewport.viewport_name()==\"HTML\":\n   style=\"\"\"opacity:0;stroke_width:0;fill:white;\"\"\"\n   viewport.rect(\"drag-element\",min_screen_x,min_screen_y,max_screen_x -min_screen_x,max_screen_y -min_screen_y,style=style)\n   viewport.bind(\"drag-element\",\"mousedown\",self.start_drag)\n   viewport.bind(\"drag-element\",\"mousemove\",self.drag)\n   viewport.bind(\"drag-element\",\"mouseup\",self.end_drag)\n   \n   \n def clear(self):\n \n  self.__drag_x=0\n  self.__drag_y=0\n  self.__shift_x=0\n  self.__shift_y=0\n  super(DraggablePlot,self).clear()\n  \n @property\n def is_dragged(self):\n  ''\n  return self.__is_dragged\n  \n @is_dragged.setter\n def is_dragged(self,new_drag):\n  self.__is_dragged=new_drag\n  \n @property\n def max_drag_x(self):\n  ''\n  return self.__max_drag_x\n  \n @max_drag_x.setter\n def max_drag_x(self,new_drag):\n  self.__max_drag_x=new_drag\n  \n @property\n def max_drag_y(self):\n  ''\n  return self.__max_drag_y\n  \n @max_drag_y.setter\n def max_drag_y(self,new_drag):\n  self.__max_drag_y=new_drag\n  \n @property\n def drag_x(self):\n  ''\n  return self.__drag_x\n  \n @drag_x.setter\n def drag_x(self,new_drag):\n  self.__drag_x=new_drag\n  \n @property\n def drag_y(self):\n  ''\n  return self.__drag_y\n  \n @drag_y.setter\n def drag_y(self,new_drag):\n  self.__drag_y=new_drag\n  \n @property\n def shift_x(self):\n  ''\n  return self.__shift_x\n  \n @shift_x.setter\n def shift_x(self,new_x):\n  self.__drag_y=new_x\n  \n @property\n def shift_y(self):\n  ''\n  return self.__shift_y\n  \n @shift_y.setter\n def shift_y(self,new_y):\n  self.__shift_y=new_y\n  \n def start_drag(self,evt):\n  ''\n\n\n  \n  self.__drag_x=evt.x\n  self.__drag_y=evt.y\n  self.__is_dragged=True\n  \n def drag(self,evt):\n  ''\n\n\n  \n  if self.__is_dragged:\n   delta_x=evt.x -self.__drag_x+self.__shift_x\n   delta_y=evt.y -self.__drag_y+self.__shift_y\n   self.set_plot_at_xy(delta_x,delta_y)\n   \n def end_drag(self,evt):\n  ''\n\n\n  \n  self.__is_dragged=False\n  self.__shift_x +=evt.x -self.__drag_x\n  self.__shift_y +=evt.y -self.__drag_y\n  if self.__shift_x >0:self.__shift_x=0\n  if self.__shift_y <0:self.__shift_y=0\n  if self.__shift_x <-self.__max_drag_x:self.__shift_x=-self.__max_drag_x\n  if self.__shift_y >self.__max_drag_y:self.__shift_y=self.__max_drag_y\n  \n def set_plot_at_xy(self,x,y):\n  ''\n  if self.viewport.viewport_name()==\"HTML\":\n   if x >0:x=0\n   if y <0:y=0\n   if x <-self.__max_drag_x:x=-self.__max_drag_x\n   if y >self.__max_drag_y:y=self.__max_drag_y\n   for did in self.data_ids:\n    document[did].attrs[\"transform\"]=\"translate(%.1f %.1f)\"%(x,y)\n   document[\"YaxisTicsLabR\"].attrs[\"transform\"]=\"translate(%.1f %.1f)\"%(0,y)\n   document[\"YaxisTicsLabL\"].attrs[\"transform\"]=\"translate(%.1f %.1f)\"%(0,y)\n   document[\"XaxisTicsLabU\"].attrs[\"transform\"]=\"translate(%.1f %.1f)\"%(x,0)\n   document[\"XaxisTicsLabB\"].attrs[\"transform\"]=\"translate(%.1f %.1f)\"%(x,0)\n   \n def set_axes(self):\n \n \n  fractions=[]\n  values=[]\n  self.max_drag_x=self.axes[\"B\"].screen_coordinate(self.converter.max_x)-self.axes[\"B\"].screen_coordinate(self.__max_x)\n  self.max_drag_y=-self.axes[\"L\"].screen_coordinate(self.converter.max_y)+self.axes[\"L\"].screen_coordinate(self.__max_y)\n  frac=(self.__max_x -self.__min_x)/4.0\n  N=int(self.converter.max_x /frac+1)\n  for i in range(N+1):\n   fractions.append(i /4)\n   values.append(i *frac)\n  self.axes[\"B\"].tics_at_fraction(fractions,values)\n  self.axes[\"U\"].tics_at_fraction(fractions,values)\n  fractions.clear()\n  values.clear()\n  frac=(self.__max_y -self.__min_y)/4.0\n  N=int(self.converter.max_y /frac+1)\n  for i in range(N+1):\n   fractions.append(i /4)\n   values.append(i *frac)\n  self.axes[\"L\"].tics_at_fraction(fractions,values)\n  self.axes[\"R\"].tics_at_fraction(fractions,values)\n  \n def scatter(self,*args,**kwargs):\n  super().scatter(*args,**kwargs)\n  self.set_axes()\n", ["browser", "visualife.core.Plot"]], "visualife.core.Feature2D": [".py", "#! /usr/bin/env python\n\nfrom visualife.core.axes import AxisX,AxisY\nfrom visualife.core.Circle import Circle\nfrom visualife.core.styles import color_name_to_hex\nfrom visualife.core.Plot import Plot\n\nclass Feature2dMap(Plot):\n\n __slots__=['__structure','__map']\n \n def __init__(self,viewport):\n \n  Plot.init(viewport,min_screen_x,max_screen_x,min_screen_y,max_screen_y,min_data_x,max_data_x,\n  min_data_y,max_data_y,axes_definition=\"BL\")\n  self.__structure=None\n  self.__map=None\n  \n @property\n def structure(self):\n  return self.__structure\n  \n @structure.setter\n def structure(self,new_structure):\n  self.__structure=new_structure\n  \n def add_structure(self,a_structure):\n  return self\n  \n def add_contacts(self,a_contact):\n  return self\n  \n def plot(self,viewport):\n  self.__viewport=viewport\n  marker_size=3.0\n  colors=[]\n  color=\"Red\"\n  colors.append(color_name_to_hex(color))\n  \n  \n  x_data=[]\n  y_data=[]\n  if len(args)>=2:\n   for i in range(len(args[0])):\n    x_data.append(self.__axes['B'].screen_coordinate(args[0][i]))\n    y_data.append(self.__axes['L'].screen_coordinate(args[1][i]))\n  else :\n   for i in range(len(args[0])):\n    x_data.append(self.__axes['B'].screen_coordinate(args[0][i][0]))\n    y_data.append(self.__axes['L'].screen_coordinate(args[0][i][1]))\n    \n  elememts=[]\n  c=Circle()\n  for i in range(len(x_data)):\n   c.x=x_data[i]\n   c.y=y_data[i]\n   c.r=marker_size\n   self.__viewport.current_style.set_fill_color(colors[i %len(colors)])\n   elements.append(self.__viewport.draw(c))\n   \n  else :\n   self.__viewport.error_msg(\"Unknown marker style\")\n   return elements\n", ["visualife.core.Circle", "visualife.core.Plot", "visualife.core.axes", "visualife.core.styles"]], "visualife.core.HtmlViewport": [".py", "#! /usr/bin/env python\n\nimport re\n\nfrom visualife.core.SvgViewport import SvgViewport\nfrom browser import console,document,html,window\nfrom visualife.core.styles import *\n\n\nclass HtmlViewport(SvgViewport):\n ''\n\n\n \n \n \n \n def __init__(self,svg_element,x_min,y_min,x_max,y_max,color='transparent',download_button=False ,style=default_drawing_style,text_style=default_text_style):\n  ''\n\n  \n  super().__init__('',x_min,y_min,x_max,y_max,color,style,text_style)\n  self.__svg=svg_element\n  self.__svg_width=svg_element.getBoundingClientRect().width\n  self.__svg_height=svg_element.getBoundingClientRect().height\n  self.__bind_ids=[]\n  self.__bind_events=[]\n  self.__bind_funcs=[]\n  self.__if_download=download_button\n  self.__if_download_ready=False\n  if \"font-awesome\"not in document:\n   document <=html.LINK(id=\"font-awesome\",\n   href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css\",\n   rel=\"stylesheet\",type=\"text/css\")\n   \n  self.__style_tag=html.STYLE(\"\"\".default_text_style {%s}\n            .default_drawing_style {%s}\"\"\"%(self.text_style,self.style))\n  self.__svg <=self.__style_tag\n  \n @property\n def svg(self):\n  ''\n\n  \n  return self.__svg\n  \n @property\n def width_in_pixels(self):\n  ''\n\n\n\n\n  \n  return self.__svg_width\n  \n @property\n def height_in_pixels(self):\n  ''\n\n\n\n\n  \n  return self.__svg_height\n  \n def scale_x(self):\n  ''\n\n\n\n\n\n  \n  return self.__svg_width /super().get_width()\n  \n def scale_y(self):\n  ''\n\n\n\n\n\n  \n  return self.__svg_height /super().get_height()\n  \n def clear(self):\n  ''\n\n  \n  self.__bind_ids=[]\n  self.__bind_events=[]\n  self.__bind_funcs=[]\n  self.__if_download_ready=False\n  super().clear()\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n def error_msg(self,msg):\n  ''\n\n\n\n  \n  console.log(msg)\n  \n def viewport_name(self):\n  ''\n\n\n  \n  return \"HTML\"\n  \n def add_download_button(self):\n  ''\n  \n  if self.__if_download_ready:return\n  \n  download_id=self.__svg.id+':'+'download_plot'\n  tooltip=html.A(id=download_id,style={\"font-size\":\"10px\",\"background\":\"white\",\n  \"opacity\":\"0.8\",\"text-align\":\"center\"})\n  triangle=html.DIV(Class=\"fa fa-download\",style={\"font-size\":\"18px\"})\n  tooltip <=triangle\n  tooltip <=html.DIV(\"download<br> plot as SVG\")\n  box=self.__svg.getBoundingClientRect()\n  tooltip.style={'position':'absolute','visibility':\"hidden\",'top':str(box.top+20)+'px',\n  'left':str(box.right -30 -box.left)+'px'}\n  tooltip[\"href_lang\"]='image/svg+xml'\n  tooltip[\"download\"]=\"plot.svg\"\n  self.__svg.parent <=tooltip\n  \n  document[self.__svg.id].bind('mouseover',self.__show_dwnld_button)\n  document[self.__svg.id].bind('mouseout',self.__hide_dwnld_button)\n  document[download_id].bind('mouseover',self.__show_dwnld_button)\n  document[download_id].bind('mouseout',self.__hide_dwnld_button)\n  svgAsXML=window.XMLSerializer.new().serializeToString(self.__svg)\n  document[download_id][\"href\"]=\"data:image/svg+xml;utf8,\"+window.encodeURIComponent(svgAsXML)\n  self.__if_download_ready=True\n  \n def close(self):\n  ''\n  super().close()\n  \n  self.__svg.innerHTML=\"\"\"<style>\n            .default_text_style {%s}\n            .default_drawing_style {%s}\n            </style>\\n\"\"\"%(self.text_style,self.style)+\"\\n\"+self.innerHTML\n  \n  if self.__if_download:\n   self.add_download_button()\n   \n  for i in range(len(self.__bind_ids)):\n   document[self.__bind_ids[i]].bind(self.__bind_events[i],self.__bind_funcs[i])\n   \n  return self.__svg\n  \n def bind(self,id_str,on_what,func):\n  ''\n\n\n\n\n  \n  self.__bind_ids.append(id_str)\n  self.__bind_events.append(on_what)\n  self.__bind_funcs.append(func)\n  \n def text_length(self,text,**kwargs):\n  ''\n\n\n\n\n  \n  backup=self.innerHTML\n  self._SvgViewport__innerHTML=\"\"\n  self.text(\"test-text\",0,0,text,**kwargs)\n  svg_text=self.innerHTML\n  document <=html.DIV(id='test-test',style={'visibility':'hidden'})\n  document['test-test'].innerHTML=svg_text\n  bb=document['test-text'].getBoundingClientRect()\n  w=bb.right -bb.x\n  h=bb.bottom -bb.y\n  self._SvgViewport__innerHTML=backup\n  \n  return w,h\n  \n  \n def __show_dwnld_button(self,evt):\n  document[self.__svg.id+':'+'download_plot'].style.visibility=\"visible\"\n  \n def __hide_dwnld_button(self,evt):\n  document[self.__svg.id+':'+'download_plot'].style.visibility=\"hidden\"\n  \n  \n  \n  \n", ["browser", "re", "visualife.core.SvgViewport", "visualife.core.styles"]], "visualife.core.Plot": [".py", "#! /usr/bin/env python\n\nfrom visualife.core.axes import AxisX,AxisY\nfrom visualife.core.styles import *\nfrom math import sqrt\nimport math\n\nplot_counter=0\n''\n\n\nclass DataConverter:\n ''\n\n\n\n \n def __init__(self,plot,x_code,y_code):\n  ''\n\n\n\n\n\n\n\n\n  \n  self.__plot=plot\n  self.__x_code=x_code\n  self.__y_code=y_code\n  self.__min_x,self.__min_y=None ,None\n  self.__max_x,self.__max_y=None ,None\n  \n  \n @property\n def plot(self):\n  ''\n  return self.__plot\n  \n @property\n def max_x(self):\n  ''\n  return self.__max_x\n  \n @property\n def min_x(self):\n  ''\n  return self.__min_x\n  \n @property\n def max_y(self):\n  ''\n  return self.__max_y\n  \n @property\n def min_y(self):\n  ''\n  return self.__min_y\n  \n def set_min_and_max_data(self,dataset):\n  ''\n\n\n  \n  \n  check=False\n  if self.__max_x !=None :\n   check=True\n   old_max_x=self.__max_x\n   old_max_y=self.__max_y\n   old_min_x=self.__min_x\n   old_min_y=self.__min_y\n  else :\n   self.__max_x=dataset.max_x\n   self.__min_x=dataset.min_x\n   self.__max_y=dataset.max_y\n   self.__min_y=dataset.min_y\n   \n  if check:\n   self.__max_x=max(dataset.max_x,old_max_x)\n   self.__min_x=min(dataset.min_x,old_min_x)\n   self.__max_y=max(dataset.max_y,old_max_y)\n   self.__min_y=min(dataset.min_y,old_min_y)\n   \n def __set_range(self,miin,maax,tics=5):\n  ''\n  \n  range_=maax -miin\n  range_ /=(tics -1)\n  cnt=0\n  if range_ ==0:\n   lista=[maax -1,miin+1]\n   if lista[-1]<maax:\n    lista.append(lista[-1]+1)\n   if lista[0]>miin:\n    lista=[lista[0]-1]+lista\n   return lista\n  while range_ >1.0:\n   cnt +=1\n   range_ /=10\n  zakres=[0.1,0.20,0.25,0.3,0.4,0.5,0.6,0.7,0.75,0.8,0.9,1.0]\n  for i in zakres:\n   if range_ <=i:\n    nice_range=int(i *(10 **(cnt)))if int(i *(10 **(cnt)))>1 else i *(10 **(cnt))\n    break\n    \n  lista=[]\n  print(\"range\",nice_range)\n  mi=nice_range *math.floor(miin /nice_range)\n  print(\"mi\",mi)\n  for i in range(tics):\n   lista.append(mi+i *nice_range)\n  if lista[-1]<maax:\n   lista.append(lista[-1]+nice_range)\n  if lista[0]>miin:\n   lista=[lista[0]-nice_range]+lista\n   \n  return lista\n  \n def set_nice_range(self,what=\"xy\"):\n  ''\n\n\n  \n  if \"x\"in what:\n   tics_x=self.__set_range(self.__min_x,self.__max_x,self.__plot.axes[self.__x_code[0]].n_tics[1])\n   \n   formatx=\"%d\"\n   print(\"X\",tics_x)\n   for i in tics_x:\n    if isinstance(i,float):\n     formatx=\"%.2f\"\n     \n   for i in self.__x_code:\n    self.__plot.axes[i].set_range(tics_x[0],tics_x[-1])\n    self.__plot.axes[i].tics_at_values(tics_x,formatx)\n    \n  if \"y\"in what:\n  \n   tics_y=self.__set_range(self.__min_y,self.__max_y,self.__plot.axes[self.__y_code[0]].n_tics[1])\n   \n   formaty=\"%d\"\n   print(\"Y\",tics_y)\n   \n   for i in tics_y:\n    if isinstance(i,float):\n     formaty=\"%.2f\"\n     \n   for i in self.__y_code:\n    self.__plot.axes[i].set_range(tics_y[0],tics_y[-1])\n    self.__plot.axes[i].tics_at_values(tics_y,formaty)\n    \n    \n def convert_data(self,x_data,y_data):\n  ''\n\n\n\n\n\n\n\n  \n  screen_x_data=[]\n  screen_y_data=[]\n  \n  for i in range(len(x_data)):\n   ix=self.__plot.axes[self.__x_code[0]].screen_coordinate(x_data[i])\n   iy=self.__plot.axes[self.__y_code[0]].screen_coordinate(y_data[i])\n   screen_x_data.append(ix)\n   screen_y_data.append(iy)\n  return screen_x_data,screen_y_data\n  \n  \n  \nclass DataSet:\n ''\n \n def __init__(self,converter,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n  \n  self.__x_data=[]\n  self.__y_data=[]\n  self.__z_data=[]\n  self.__min_x,self.__min_y,self.__min_z=0,0,0\n  self.__max_x,self.__max_y,self.__max_z=0,0,0\n  self.__converter=converter\n  self.__kwargs=kwargs\n  self.__marker_size=5\n  \n  self.__marker_style=\"\"\n  \n  self.__title=\"\"\n  self.__colors=\"\"\n  \n  if len(args)>=2:\n   self.__max_x=max(args[0])\n   self.__max_y=max(args[1])\n   self.__min_x=min(args[0])\n   self.__min_y=min(args[1])\n   self.__x_data=args[0]\n   self.__y_data=args[1]\n   if len(args)>2:\n    self.__min_z=max(args[2])\n    self.__max_z=max(args[2])\n    self.__z_data=args[2]\n  else :\n   self.__max_x=args[0][0][0]\n   self.__max_y=args[0][0][1]\n   self.__min_x=self.__max_x\n   self.__min_y=self.__max_y\n   found_z=False\n   if len(args[0][0])>2:\n    self.__max_z=args[0][0][2]\n    self.__min_z=self.__max_z\n    found_z=True\n    \n   for i in range(len(args[0])):\n    self.__max_x=max(self.__max_x,args[0][i][0])\n    self.__min_x=min(self.__min_x,args[0][i][0])\n    self.__max_y=max(self.__max_y,args[0][i][1])\n    self.__min_y=min(self.__min_y,args[0][i][1])\n    self.__x_data.append(args[0][i][0])\n    self.__y_data.append(args[0][i][1])\n    if found_z:\n     v=args[0][i][2]\n     if v >self.__max_z:self.__max_z=v\n     elif v <self.__min_z:self.__min_z=v\n     self.__z_data.append(v)\n     \n @property\n def title(self):\n  ''\n  return self.__title\n  \n @title.setter\n def title(self,new_title):\n  self.__title=new_title\n  \n @property\n def converter(self):\n  ''\n  return self.__converter\n  \n @property\n def kwargs(self):\n  ''\n  return self.__kwargs\n  \n @property\n def colors(self):\n  ''\n  return self.__colors\n  \n @colors.setter\n def colors(self,new_colors):\n  self.__colors=new_colors\n  \n @property\n def marker_size(self):\n  ''\n  return self.__marker_size\n  \n @marker_size.setter\n def marker_size(self,new_size):\n  self.__marker_size=new_size\n  \n @property\n def marker_style(self):\n  ''\n  return self.__marker_style\n  \n @marker_style.setter\n def marker_style(self,new_style):\n  self.__marker_style=new_style\n  \n @property\n def x_data(self):\n  ''\n  return self.__x_data\n  \n @property\n def y_data(self):\n  ''\n  return self.__y_data\n  \n @property\n def z_data(self):\n  ''\n\n\n  \n  return self.__z_data\n  \n @property\n def max_x(self):\n  ''\n  return self.__max_x\n  \n @property\n def min_x(self):\n  ''\n  return self.__min_x\n  \n @property\n def max_y(self):\n  ''\n  return self.__max_y\n  \n @property\n def min_y(self):\n  ''\n  return self.__min_y\n  \n @property\n def max_z(self):\n  ''\n  return self.__max_z\n  \n @property\n def min_z(self):\n  ''\n  return self.__min_z\n  \n def draw(self,plot,default_color=0):\n  pass\n  \n  \nclass ScatterDataSet(DataSet):\n ''\n \n def __init__(self,converter,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  DataSet.__init__(self,converter,*args,**kwargs)\n  \n  \n  self.marker_size=kwargs.get(\"markersize\",3.0)\n  self.marker_style=kwargs.get(\"markerstyle\",'c')\n  self.title=kwargs.get(\"title\",\"scatter\")\n  self.colors=kwargs.get(\"colors\")\n  \n  \n def draw(self,viewport,default_color=0):\n  ''\n  \n  \n  \n  x_data,y_data=self.converter.convert_data(self.x_data,self.y_data)\n  \n  \n  if self.marker_style =='c'or self.marker_style =='o':\n   viewport.circles_group(self.title,x_data,y_data,self.colors,self.marker_size,**self.kwargs)\n  elif self.marker_style =='s':\n   viewport.squares_group(self.title,x_data,y_data,self.colors,self.marker_size,**self.kwargs)\n  elif self.marker_style =='t':\n   viewport.triangle_group(self.title,x_data,y_data,self.colors,self.marker_size,**self.kwargs)\n  elif self.marker_style =='r':\n   viewport.rhomb_group(self.title,x_data,y_data,self.colors,self.marker_size,**self.kwargs)\n  else :\n   viewport.error_msg(\"Unknown marker style\")\n   \n  if viewport.viewport_name()==\"HTML\"and self.kwargs.get(\"flush\",True ):\n   viewport.close()\n   \n   \nclass LineDataSet(DataSet):\n ''\n \n def __init__(self,converter,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  DataSet.__init__(self,converter,*args,**kwargs)\n  self.title=kwargs[\"title\"]if \"title\"in kwargs else \"line\"\n  self.width=kwargs[\"width\"]if \"width\"in kwargs else 2.0\n  self.colors=kwargs.get(\"colors\")\n  \n def draw(self,viewport,default_color=0):\n  x_data,y_data=self.converter.convert_data(self.x_data,self.y_data)\n  \n  \n  \n  \n  \n  viewport.lines_group(self.title,x_data,y_data,self.colors,stroke=self.colors[default_color %len(self.colors)].__str__(),stroke_width=self.width)\n  \n  \n  \n  if viewport.viewport_name()==\"HTML\"and self.kwargs.get(\"flush\",True ):\n   viewport.close()\n   \nclass BarDataSet(DataSet):\n ''\n \n def __init__(self,converter,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  DataSet.__init__(self,converter,*args,**kwargs)\n  self.title=kwargs.get(\"title\",\"bars\")\n  self.width=kwargs.get(\"width\",3.0)\n  self.colors=kwargs.get(\"colors\")\n  self.marker_size=kwargs[\"width\"]\n  \n  \n def draw(self,viewport,default_color=0):\n \n  x_data,y_data=self.converter.convert_data(self.x_data,self.y_data)\n  x0,h0=self.converter.convert_data([0],[0])\n  viewport.start_group(\"BarsGroup\",**self.kwargs)\n  for i in range(len(x_data)):\n   if self.y_data[i]<0:\n    viewport.rect(self.title+\":\"+str(i),x_data[i],h0[0],self.width,\n    y_data[i]-h0[0],**self.kwargs)\n   else :\n    viewport.rect(self.title+\":\"+str(i),x_data[i],y_data[i],self.width,\n    h0[0]-y_data[i],**self.kwargs)\n  viewport.close_group()\n  if viewport.viewport_name()==\"HTML\"and self.kwargs.get(\"flush\",True ):\n   viewport.close()\n   \nclass BubblesDataSet(DataSet):\n ''\n \n def __init__(self,converter,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  DataSet.__init__(self,converter,*args,**kwargs)\n  if not \"colors\"in kwargs:\n   kwargs=dict(**kwargs,colors=self.z_data)\n   \n  self.colors=self.converter.plot.prepare_data_colors(kwargs)\n  \n  self.title=kwargs[\"title\"]if \"title\"in kwargs else \"bubble chart\"\n  \n  marker_factor=kwargs.get(\"markersize\",3.0)\n  self.marker_size=[]\n  for v in self.z_data:\n   self.marker_size.append(sqrt(v)*marker_factor)\n   \n   \n def draw(self,viewport,default_color=0):\n \n  x_data,y_data=self.converter.convert_data(self.x_data,self.y_data)\n  \n  viewport.start_group(\"Outer\"+self.title,**self.kwargs)\n  viewport.circles_group(self.title,x_data,y_data,self.colors,self.marker_size,**self.kwargs)\n  viewport.close_group()\n  \n  \n  if viewport.viewport_name()==\"HTML\"and self.kwargs.get(\"flush\",True ):\n   viewport.close()\n   \n   \nclass PlotLegend:\n ''\n \n def __init__(self):\n  ''\n  \n  self.__series=[]\n  \n def add_serie(self,dataset):\n  ''\n\n\n\n\n  \n  self.__series.append(dataset)\n  \n @property\n def series(self):\n  ''\n  \n  return self.__series\n  \n def draw(self,viewport,screen_x,screen_y,width,height,font_size):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  viewport.rect(\"Legend\",screen_x,screen_y,width,height,fill=\"white\")\n  for i in range(len(self.series)):\n   x_c=screen_x+5+self.series[i].marker_size\n   x_t=screen_x+10+2 *self.series[i].marker_size\n   y_c=screen_y+(i+1)*height /(len(self.series)+1)\n   y_t=y_c+self.series[i].marker_size /2\n   if self.series[i].marker_style =='c'or self.series[i].marker_style =='o':\n    viewport.circle(\"lgnd-serie%d-p\"%i,x_c,y_c,self.series[i].marker_size,fill=self.series[i].colors[0])\n   elif self.series[i].marker_style =='s':\n    viewport.square(\"lgnd-serie%d-p\"%i,x_c,y_c,self.series[i].marker_size,fill=self.series[i].colors[0])\n   elif self.series[i].marker_style =='t':\n    viewport.triangle(\"lgnd-serie%d-p\"%i,x_c,y_c,self.series[i].marker_size,fill=self.series[i].colors[0])\n   elif self.series[i].marker_style =='r':\n    viewport.rhomb(\"lgnd-serie%d-p\"%i,x_c,y_c,self.series[i].marker_size,fill=self.series[i].colors[0])\n   else :\n    viewport.square(\"lgnd-serie%d-p\"%i,x_c,y_c,self.series[i].marker_size,fill=self.series[i].colors[0])\n   viewport.text(\"lgnd-serie%d\"%i,x_t,y_t,self.series[i].title,text_anchor=\"start\",font_size=font_size)\n   \n   \nclass Plot:\n ''\n \n \n __slots__=['__viewport','__axes','__plot_label','__default_style_index','__mask_element','__label_text_style',\n '__data_ids','__clip_path_name','__clip_path_tics','__axes_svg','__plot_label_font_size','__extra_labels',\n '__axes_definition','__legend','__primary_converter','__secondary_converter',\n '__data_sets','__plot_id']\n \n \n def __init__(self,viewport,min_screen_x,max_screen_x,min_screen_y,max_screen_y,min_data_x=0,max_data_x=1,\n min_data_y=0,max_data_y=1,axes_definition=\"BL\"):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  global plot_counter\n  \n  plot_counter +=1\n  self.__viewport=viewport\n  self.__axes={}\n  self.__plot_label=''\n  self.__extra_labels=[]\n  self.__default_style_index=0\n  self.__plot_label_font_size=get_font_size((max_screen_x -min_screen_x)/40)\n  self.__data_ids=[]\n  self.__axes_svg={}\n  self.__clip_path_name=''\n  self.__clip_path_tics=''\n  self.__axes_definition=axes_definition\n  self.__legend=PlotLegend()\n  self.__primary_converter=DataConverter(self,\"BU\",\"LR\")\n  self.__secondary_converter=DataConverter(self,\"U\",\"R\")\n  self.__data_sets=[]\n  self.__plot_id=\"plot-%d\"%plot_counter\n  \n  \n  if axes_definition.find(\"B\")!=-1:\n   x_bottom_axis=AxisX(max_screen_y,min_screen_x,max_screen_x,min_data_x,max_data_x,'B')\n   if x_bottom_axis.label ==\"\":x_bottom_axis.label=\" \"\n   x_bottom_axis.tics(13,5)\n   self.__axes[\"B\"]=x_bottom_axis\n   \n  if axes_definition.find(\"U\")!=-1:\n   x_top_axis=AxisX(min_screen_y,min_screen_x,max_screen_x,min_data_x,max_data_x,'U')\n   if x_top_axis.label ==\"\":x_top_axis.label=\" \"\n   x_top_axis.tics(13,5)\n   self.__axes[\"U\"]=x_top_axis\n   \n  if axes_definition.find(\"L\")!=-1:\n   y_left_axis=AxisY(min_screen_x,max_screen_y,min_screen_y,min_data_y,max_data_y,'L')\n   if y_left_axis.label ==\"\":y_left_axis.label=\" \"\n   y_left_axis.tics(13,5)\n   self.__axes[\"L\"]=y_left_axis\n   \n  if axes_definition.find(\"R\")!=-1:\n   y_right_axis=AxisY(max_screen_x,max_screen_y,min_screen_y,min_data_y,max_data_y,'R')\n   y_right_axis.tics(13,5)\n   if y_right_axis.label ==\"\":y_right_axis.label=\" \"\n   self.__axes[\"R\"]=y_right_axis\n   \n   \n @property\n def converter(self):\n  return self.__primary_converter\n  \n  \n def clear(self):\n  for name,group in self.__axes_svg.items():\n   group.parent.removeChild(group)\n  self.__axes_svg.clear()\n  \n def axes_svg_x(self):\n  ''\n  return self.__axes_svg[\"axis\"].children[1].children\n  \n def axes_svg_y(self):\n  ''\n  return self.__axes_svg[\"axis\"].children[5].children\n  \n @property\n def extra_labels(self):\n  ''\n\n\n  \n  return self.__extra_labels\n  \n def add_extra_label(self,label_text,data_x,data_y,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n  \n  if len(kwargs)>0:\n   self.__extra_labels.append((data_x,data_y,label_text,kwargs))\n  else :\n   self.__extra_labels.append((data_x,data_y,label_text))\n   \n def scale(self,scale):\n  ''\n\n\n  \n  self.__viewport.svg.attrs[\"transform\"]=\"scale(%.1f)\"%(scale)\n  \n @property\n def data_ids(self):\n  ''\n  \n  return self.__data_ids\n  \n @property\n def viewport(self):\n  ''\n  \n  return self.__viewport\n  \n @property\n def axes_svg(self):\n  ''\n  \n  return self.__axes_svg\n  \n  \n @property\n def plot_label(self):\n  ''\n\n\n\n\n  \n  return self.__plot_label\n  \n @plot_label.setter\n def plot_label(self,new_label):\n  self.__plot_label=str(new_label)\n  \n @property\n def plot_label_font_size(self):\n  ''\n\n\n\n\n  \n  return self.__plot_label_font_size\n  \n @plot_label_font_size.setter\n def plot_label_font_size(self,new_font_size):\n  self.__plot_label_font_size=new_font_size\n  \n @property\n def clip_path_name(self):\n  ''\n\n\n\n\n  \n  return self.__clip_path_name\n  \n @clip_path_name.setter\n def clip_path_name(self,name):\n  self.__clip_path_name=name\n  \n @property\n def clip_path_tics(self):\n  ''\n\n\n\n\n  \n  return self.__clip_path_tics\n  \n @clip_path_tics.setter\n def clip_path_tics(self,name):\n  self.__clip_path_tics=name\n  \n def draw_plot_label(self):\n  ''\n  \n  y=self.__axes[\"U\"].screen_y -(self.__axes[\"U\"].max_screen_coordinate -self.__axes[\"U\"].min_screen_coordinate)/10\n  x=(self.__axes[\"U\"].max_screen_coordinate -self.__axes[\"U\"].min_screen_coordinate)/2+self.__axes[\"U\"].min_screen_coordinate\n  self.__viewport.text(\"PlotLabel\",x,y,self.__plot_label,fill=self.__axes[\"U\"].stroke,font_size=self.plot_label_font_size)\n  i=0\n  for xyl in self.__extra_labels:\n   x=self.axes[\"B\"].screen_coordinate(xyl[0])\n   y=self.axes[\"L\"].screen_coordinate(xyl[1])\n   if len(xyl)==4:\n    self.__viewport.text(\"extra-\"+str(i),x,y,xyl[2],**xyl[3])\n   else :\n    self.__viewport.text(\"extra-\"+str(i),x,y,xyl[2])\n    \n @property\n def axes(self):\n  ''\n\n\n\n\n  \n  return self.__axes\n  \n def draw_axes(self):\n  ''\n  \n  if self.__clip_path_tics ==\"\":\n   self.__viewport.start_group(\"Outer-Axis\")\n  else :\n   self.__viewport.start_group(\"Outer-Axis\",clip_path=self.__clip_path_tics)\n  self.__viewport.start_group(\"Axis\")\n  for ax_key in self.__axes:\n   self.__axes[ax_key].draw(self.__viewport)\n  self.__viewport.close_group()\n  self.__viewport.close_group()\n  \n def draw_grid(self):\n  ''\n  \n  \n  def draw_horizontal_grid_lines(x_from,x_to,y,style):\n   for yi in y:self.__viewport.line(\"gr\",x_from,yi,x_to,yi,**style)\n   \n  def draw_vertical_grid_lines(x,y_from,y_to,style):\n   for xi in x:self.__viewport.line(\"gr\",xi,y_from,xi,y_to,**style)\n   \n  self.__viewport.start_group(\"Grid\")\n  \n  style={'stroke_dasharray':4,'stroke':self.__axes['B'].stroke,'stroke_width':self.__axes['B'].stroke_width /3.0}\n  draw_vertical_grid_lines(self.__axes['B'].big_screen_tics[1:-1],self.__axes['L'].min_screen_coordinate,\n  self.__axes['L'].max_screen_coordinate,style)\n  draw_horizontal_grid_lines(self.__axes['B'].min_screen_coordinate,self.__axes['B'].max_screen_coordinate,\n  self.__axes['L'].big_screen_tics[1:-1],style)\n  self.__viewport.close_group()\n  \n def draw_legend(self,position=\"RU\"):\n  ''\n  \n  \n  n_rows=len(self.__legend.series)\n  height=n_rows *30\n  width=(self.axes[\"U\"].max_screen_coordinate -self.axes[\"U\"].min_screen_coordinate)/5\n  if position[0]==\"R\"or position[0]==\"L\":\n   if position[0]==\"R\":x=self.axes[\"R\"].screen_x+15\n   elif position[0]==\"L\":x=self.axes[\"L\"].screen_x -15 -width\n   \n   y=(self.axes[\"B\"].screen_y -self.axes[\"U\"].screen_y)/2+self.axes[\"U\"].screen_y -width /2\n   if len(position)>1:\n    if position[1]==\"U\":\n     y=self.axes[\"U\"].screen_y+15\n    elif position[1]==\"C\":\n     y=(self.axes[\"B\"].screen_y -self.axes[\"U\"].screen_y)/2+self.axes[\"U\"].screen_y -width /2\n    elif position[1]==\"B\":\n     y=self.axes[\"B\"].screen_y -15 -height\n  if position[0]==\"U\"or position[0]==\"B\":\n   if position[0]==\"U\":y=self.axes[\"U\"].screen_y -15 -height\n   elif position[0]==\"B\":y=self.axes[\"B\"].screen_y+15+height\n   x=(self.axes[\"R\"].screen_x -self.axes[\"L\"].screen_x)/2+self.axes[\"L\"].screen_x -width /2\n   if len(position)>1:\n    if position[1]==\"L\":\n     x=self.axes[\"L\"].screen_x+15\n    elif position[1]==\"C\":\n     x=(self.axes[\"R\"].screen_x -self.axes[\"L\"].screen_x)/2+self.axes[\"L\"].screen_x -width /2\n    elif position[1]==\"R\":\n     x=self.axes[\"R\"].screen_x -15 -width\n     \n  self.__legend.draw(self.__viewport,x,y,width,height,self.axes[\"B\"].label_font_size)\n  \n def prepare_data_colors(self,kwargs_dict):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  colors=[]\n  if \"colors\"in kwargs_dict:\n   color=kwargs_dict[\"colors\"]\n   if isinstance(color,str)and color in known_color_scales:\n    return known_color_scales[color]\n   if isinstance(color,str):colors.append(color_name_to_hex(color))\n   elif isinstance(color,int):\n    colors.append(default_plotting_colors[color %len(default_plotting_colors)])\n   elif isinstance(color,list):\n    min_z=min(color)\n    max_z=max(color)\n    cmap=kwargs_dict[\"cmap\"]if \"cmap\"in kwargs_dict else \"blues\"\n    if isinstance(cmap,str):\n     cmap1=colormap_by_name(cmap,min_z,max_z,if_reversed=(\"cmap_reversed\"in kwargs_dict))\n    else :\n     cmap1=cmap\n    for z in color:colors.append(cmap1.color(z))\n  else :\n   colors.append(default_plotting_colors[self.__default_style_index])\n   self.__default_style_index +=1\n   \n  return colors\n  \n def draw(self,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  self.__viewport.start_group(self.__plot_id)\n  if_grid=kwargs.get(\"grid\",False )\n  if_plot_label=kwargs.get(\"plot_label\",True )\n  if_axes=kwargs.get(\"axes\",True )\n  if_legend=kwargs.get(\"legend\",False )\n  \n  if if_axes:self.draw_axes()\n  if if_grid:self.draw_grid()\n  if if_plot_label:self.draw_plot_label()\n  if if_legend:\n   if isinstance(if_legend,str):\n    self.draw_legend(if_legend)\n   else :self.draw_legend()\n   \n  for d_set in self.__data_sets:\n   self.__viewport.start_group(\"Outer\"+d_set.title,clip_path=self.clip_path_name,**d_set.kwargs)\n   d_set.draw(self.viewport,self.__default_style_index)\n   self.__viewport.close_group()\n   \n  self.__viewport.close_group()\n  \n  if self.__viewport.viewport_name()==\"HTML\"and kwargs.get(\"flush\",True ):\n   self.__viewport.close()\n   \n def scatter(self,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  converter=kwargs.get(\"converter_type\",\"primary\")\n  colors=self.prepare_data_colors(kwargs)\n  kwargs[\"colors\"]=colors\n  string_format=kwargs.get(\"tics_label_format\",\"%.2f\")\n  \n  if converter ==\"primary\":\n   scatter_set=ScatterDataSet(self.__primary_converter,*args,**kwargs)\n   self.__primary_converter.set_min_and_max_data(scatter_set)\n   \n   if kwargs.get(\"adjust_range\",True )==True :\n    self.__primary_converter.set_nice_range(string_format)\n  else :\n   scatter_set=ScatterDataSet(self.__secondary_converter,*args,**kwargs)\n   self.__secondary_converter.set_min_and_max_data(scatter_set)\n   \n   if kwargs.get(\"adjust_range\",True )==True :\n    self.__secondary_converter.set_nice_range(string_format)\n  self.__data_ids.append(scatter_set.title)\n  self.__data_sets.append(scatter_set)\n  self.__legend.add_serie(scatter_set)\n  \n  \n def bubbles(self,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  converter=kwargs.get(\"converter_type\",\"primary\")\n  \n  \n  if converter ==\"primary\":\n   data_set=BubblesDataSet(self.__primary_converter,*args,**kwargs)\n   self.__primary_converter.set_min_and_max_data(data_set)\n   \n   if kwargs.get(\"adjust_range\",True )==True :\n    self.__primary_converter.set_nice_range()\n  else :\n   data_set=BubblesDataSet(self.__secondary_converter,*args,**kwargs)\n   self.__secondary_converter.set_min_and_max_data(data_set)\n   \n   if kwargs.get(\"adjust_range\",True )==True :\n    self.__secondary_converter.set_nice_range()\n  self.__data_ids.append(data_set.title)\n  self.__data_sets.append(data_set)\n  self.__legend.add_serie(data_set)\n  \n def line(self,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  converter=kwargs.get(\"converter_type\",\"primary\")\n  \n  colors=self.prepare_data_colors(kwargs)\n  kwargs[\"colors\"]=colors\n  \n  \n  if converter ==\"primary\":\n   data_set=LineDataSet(self.__primary_converter,*args,**kwargs)\n   self.__primary_converter.set_min_and_max_data(data_set)\n   \n   if kwargs.get(\"adjust_range\",True )==True :\n    self.__primary_converter.set_nice_range()\n  else :\n   data_set=LineDataSet(self.__secondary_converter,*args,**kwargs)\n   self.__secondary_converter.set_min_and_max_data(data_set)\n   \n   if kwargs.get(\"adjust_range\",True )==True :\n    self.__secondary_converter.set_nice_range()\n  self.__data_ids.append(data_set.title)\n  self.__data_sets.append(data_set)\n  self.__legend.add_serie(data_set)\n  \n  \n def bars(self,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  converter=kwargs.get(\"converter_type\",\"primary\")\n  colors=self.prepare_data_colors(kwargs)\n  kwargs[\"colors\"]=colors\n  default_width=(self.axes['B'].max_data_value -self.axes['B'].min_data_value)/100.0\n  width=kwargs.get(\"width\",default_width)\n  \n  kwargs[\"width\"]=self.axes['B'].screen_coordinate(width)-self.axes['B'].screen_coordinate(0)\n  \n  kwargs['fill']=kwargs.get(\"color\",colors[self.__default_style_index %len(colors)])\n  \n  if converter ==\"primary\":\n   data_set=BarDataSet(self.__primary_converter,*args,**kwargs)\n   self.__primary_converter.set_min_and_max_data(data_set)\n   \n   if kwargs.get(\"adjust_range\",\"xy\")!=False :\n    self.__primary_converter.set_nice_range(kwargs.get(\"adjust_range\",\"xy\"))\n  else :\n   data_set=BarDataSet(self.__secondary_converter,*args,**kwargs)\n   self.__secondary_converter.set_min_and_max_data(data_set)\n   \n   if kwargs.get(\"adjust_range\",\"xy\")!=False :\n    self.__secondary_converter.set_nice_range(kwargs.get(\"adjust_range\",\"xy\"))\n  self.__data_ids.append(data_set.title)\n  self.__data_sets.append(data_set)\n  self.__legend.add_serie(data_set)\n  \n  \n def boxes(self,*args,**kwargs):\n \n \n  colors=self.prepare_data_colors(kwargs)\n  title=kwargs[\"title\"]if \"title\"in kwargs else \"boxes\"\n  kwargs['width']=kwargs[\"width\"]if \"width\"in kwargs else 15.0\n  \n  kwargs['fill']=kwargs.get(\"color\",\"white\")\n  kwargs['stroke_width']=kwargs.get(\"stroke_width\",1)\n  kwargs['stroke']=kwargs.get(\"stroke\",\"black\")\n  \n  if len(args)==1:\n   data=args[0]\n  else :\n   data=args\n  width=kwargs.get(\"box_width\",10)\n  self.__viewport.start_group(\"BoxesGroup\",**kwargs)\n  median_style=\"\"\"stroke-width:%s; stroke:%s;\"\"\"%(kwargs['stroke_width']*3.0,kwargs['stroke'])\n  circle_style=\"\"\"stroke-width:0; fill:%s;\"\"\"%kwargs['stroke']\n  for i_box in range(len(data)):\n   if len(data[i_box])<6:data[i_box].insert(0,i_box+1)\n   x=self.axes['B'].screen_coordinate(data[i_box][0])\n   q1=self.axes['L'].screen_coordinate(data[i_box][2])\n   q2=self.axes['L'].screen_coordinate(data[i_box][3])\n   q3=self.axes['L'].screen_coordinate(data[i_box][4])\n   ymin=self.axes['L'].screen_coordinate(data[i_box][1])\n   ymax=self.axes['L'].screen_coordinate(data[i_box][5])\n   \n   self.viewport.rect(title+\"-b-\"+str(i_box),x -width *0.5,q3,width,(q1 -q3))\n   \n   self.viewport.line(title+\"-l-\"+str(i_box),x -width *0.5,q2,x+width *0.5,q2,style=median_style)\n   \n   self.viewport.circle(title+\"-c-\"+str(i_box),x,q2,width *0.1,style=circle_style)\n   \n   self.viewport.line(title+\"-t-\"+str(i_box),x,ymax,x,q3)\n   self.viewport.line(title+\"-t-\"+str(i_box),x -width *0.5,ymax,x+width *0.5,ymax)\n   \n   self.viewport.line(title+\"-d-\"+str(i_box),x -width *0.5,ymin,x+width *0.5,ymin)\n   self.viewport.line(title+\"-d-\"+str(i_box),x,ymin,x,q1)\n   \n  self.__viewport.close_group()\n  \n  if self.__viewport.viewport_name()==\"HTML\"and kwargs.get(\"flush\",True ):\n   self.__viewport.close()\n", ["math", "visualife.core.axes", "visualife.core.styles"]], "visualife.core.shapes": [".py", "from visualife.calc.math_utils import *\n\n\ndef grid(viewport,id_str,x,y,w,h,**kwargs):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n viewport.start_group(id_str,**kwargs)\n draw=kwargs.get(\"draw\",\"both\")\n x_step=kwargs.get(\"xstep\",kwargs.get(\"step\",10.0))\n y_step=kwargs.get(\"ystep\",kwargs.get(\"step\",10.0))\n if draw ==\"both\"or draw ==\"horizontal\":\n  i=0\n  for yi in linspace(y,y+h,endpoint=True ,step=y_step):\n   viewport.line(\"id_str-h%d\"%i,x,yi,x+w,yi,**kwargs)\n   i +=1\n if draw ==\"both\"or draw ==\"vertical\":\n  i=0\n  for xi in linspace(y,y+h,endpoint=True ,step=x_step):\n   viewport.line(\"id_str-v%d\"%i,xi,y,xi,y+h,**kwargs)\n   i +=1\n viewport.close_group()\n \n \ndef dots(viewport,id_str,x,y,w,h,r,**kwargs):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n viewport.start_group(id_str,**kwargs)\n x_step=kwargs.get(\"xstep\",kwargs.get(\"step\",10.0))\n y_step=kwargs.get(\"ystep\",kwargs.get(\"step\",10.0))\n yi=linspace(y,y+h,endpoint=True ,step=y_step)\n xi=linspace(y,y+h,endpoint=True ,step=x_step)\n i=0\n k=0\n for yy in yi:\n  i +=1\n  j=0\n  for xx in xi:\n   if callable(r):\n    rr=r(xx,yy)\n   elif isinstance(r,list):\n    if isinstance(r[0],list):\n     rr=r[j][i]\n    else :\n     rr=r[k]\n   else :\n    rr=r\n   viewport.circle(\"id_str-%d-%d\"%(i,j),xx,yy,rr,**kwargs)\n   j +=1\n   k +=1\n  i +=1\n viewport.close_group()\n \n \ndef arc(drawing,id_str,x0,y0,r,deg_from,deg_to,**kwargs):\n ''\n\n\n\n\n\n\n\n\n\n\n \n \n arc=1 if abs(deg_from -deg_to)>180 else 0\n segments=[[\"M\",polar_to_cartesian(r,deg_from,x0,y0)]]\n x,y=polar_to_cartesian(r,deg_to,x0,y0)\n segments.append([\"A\",r,r,0,arc,1,x,y])\n drawing.path(id_str,segments,**kwargs)\n \n \ndef circle_segment(drawing,id_str,x0,y0,r_in,r_out,deg_from,deg_to,**kwargs):\n ''\n\n\n\n\n\n\n\n\n\n\n\n \n \n arc=1 if abs(deg_from -deg_to)>180 else 0\n segments=[[\"M\",polar_to_cartesian(r_in,deg_from,x0,y0)]]\n x,y=polar_to_cartesian(r_in,deg_to,x0,y0)\n segments.append([\"A\",r_in,r_in,0,arc,1,x,y])\n segments.append([\"L\",polar_to_cartesian(r_out,deg_to,x0,y0)])\n x,y=polar_to_cartesian(r_out,deg_from,x0,y0)\n segments.append([\"A\",r_out,r_out,0,arc,0,x,y])\n segments.append([\"Z\"])\n \n drawing.path(id_str,segments,**kwargs)\n \ndef arrow(drawing,id_str,width,height,tip_width,tip_height=0,**kwargs):\n\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n cx=kwargs.get(\"cx\",0.0)-width /2.0\n cy=kwargs.get(\"cy\",0.0)+tip_height /2.0\n l1=width -tip_width\n hh=height /2+tip_height\n \n segments=[[\"M\",(cx,cy)],[\"l\",(0,-height)],[\"l\",(l1,0)],[\"l\",(0,-tip_height)],\n [\"l\",(hh,hh)],[\"l\",(-hh,hh)],\n [\"l\",(0,-tip_height)],[\"z\"]]\n \n drawing.path(id_str,segments,**kwargs)\n \n", ["visualife.calc.math_utils"]], "visualife.core.styles": [".py", "#! /usr/bin/env python\n\nfrom math import fabs\nfrom typing import List,Tuple\n\n\ndef is_hex(color)->bool:\n ''\n\n\n\n\n\n \n if isinstance(color,str)and color[0]=='#':\n  return True\n return False\n \n \ndef color_name_to_hex(name:str)->str:\n ''\n\n\n\n\n\n\n\n \n try :\n  return colors[name.lower()]\n except KeyError as e:\n  print(f'\\033[93mWarning! Color: {e} is not define. Set default color.\\033[0m')\n  return '#000000'\n  \n  \ndef rgb_norm_to_hex(rgb:tuple or str)->str:\n ''\n\n\n\n\n\n\n\n \n if isinstance(rgb,str):\n  rgb=tuple(map(int,rgb[4:-1].split(',')))\n r,g,b=map(lambda x:0 if x <0 else 255 if x >1 else round(x *255),rgb)\n return f'#{r:02X}{g:02X}{b:02X}'\n \n \ndef rgb_to_hex(rgb:tuple or str)->str:\n ''\n\n\n\n\n\n\n\n \n if isinstance(rgb,str):\n  rgb=tuple(map(int,rgb[4:-1].split(',')))\n r,g,b=map(lambda x:0 if x <0 else 255 if x >255 else round(x),rgb)\n return f'#{r:02X}{g:02X}{b:02X}'\n \n \ndef hsv_to_rgb(hsv:tuple)->tuple:\n ''\n\n\n\n\n\n\n\n \n h,s,v=hsv\n if s ==0.0:\n  v *=255\n  return tuple(map(round,(v,v,v)))\n h /=360.\n i=int(h *6.)\n f=(h *6.)-i\n p,q,t=int(255 *v *(1. -s)),int(255 *v *(1. -s *f)),int(255 *v *(1. -s *(1. -f)))\n v *=255\n i %=6\n if i ==0:\n  return tuple(map(round,(v,t,p)))\n if i ==1:\n  return tuple(map(round,(q,v,p)))\n if i ==2:\n  return tuple(map(round,(p,v,t)))\n if i ==3:\n  return tuple(map(round,(p,q,v)))\n if i ==4:\n  return tuple(map(round,(t,p,v)))\n if i ==5:\n  return tuple(map(round,(v,p,q)))\n  \n  \ndef hsv_to_hex(hsv:tuple)->str:\n ''\n\n\n\n\n\n\n\n \n return rgb_to_hex(hsv_to_rgb(hsv))\n \n \ndef hex_to_rgb(hex_str:str)->tuple:\n ''\n\n\n\n\n\n\n\n \n hex_str=hex_str.lstrip('#')\n lv=len(hex_str)\n return tuple(int(hex_str[i:i+int(lv /3)],16)for i in range(0,lv,int(lv /3)))\n \n \ndef mix_colors(color1:str,color2:str,fraction:float)->str:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n fraction=0 if fraction <0 else 1 if fraction >1 else fraction\n if not is_hex(color1):\n  color1=color_name_to_hex(color1)\n if not is_hex(color2):\n  color2=color_name_to_hex(color2)\n  \n h1=color1.lstrip('#')\n h2=color2.lstrip('#')\n \n lv=len(h1)\n ll=int(lv /3)\n red=round(fraction *int(h1[0:ll],16)+(1 -fraction)*int(h2[0:ll],16))\n grn=round(fraction *int(h1[ll:2 *ll],16)+(1 -fraction)*int(h2[ll:2 *ll],16))\n blu=round(fraction *int(h1[2 *ll:3 *ll],16)+(1 -fraction)*int(h2[2 *ll:3 *ll],16))\n \n return f'#{red:02X}{grn:02X}{blu:02X}'\n \n \ndef clamp(val:float,minimum=0,maximum=255):\n ''\n\n\n\n\n\n \n if val <minimum:\n  return minimum\n if val >maximum:\n  return maximum\n return val\n \n \ndef shade(color:str,factor:float)->str:\n ''\n\n\n\n\n\n\n\n\n\n\n \n if not is_hex(color):\n  color=color_name_to_hex(color)\n r,g,b=hex_to_rgb(color)\n r=clamp(r *factor)if r >0 else int(255 *(factor -1))\n g=clamp(g *factor)if g >0 else int(255 *(factor -1))\n b=clamp(b *factor)if b >0 else int(255 *(factor -1))\n return rgb_to_hex((r,g,b))\n \n \ndef make_darker(color:str,factor=0.1)->str:\n ''\n\n\n\n\n\n\n\n\n\n\n \n return shade(color,1 -factor)\n \n \ndef make_brighter(color:str,factor=0.1)->str:\n ''\n\n\n\n\n\n\n\n\n\n\n \n return shade(color,1+factor)\n \n \nlist_tuples_hex_color=[(\"#F0F8FF\",\"AliceBlue\"),(\"#FAEBD7\",\"AntiqueWhite\"),(\"#00FFFF\",\"Aqua\"),\n(\"#7FFFD4\",\"Aquamarine\"),(\"#F0FFFF\",\"Azure\"),(\"#F5F5DC\",\"Beige\"),(\"#FFE4C4\",\"Bisque\"),\n(\"#000000\",\"Black\"),(\"#FFEBCD\",\"BlanchedAlmond\"),(\"#0000FF\",\"Blue\"),\n(\"#8A2BE2\",\"BlueViolet\"),(\"#A52A2A\",\"Brown\"),(\"#DEB887\",\"BurlyWood\"),\n(\"#5F9EA0\",\"CadetBlue\"),(\"#7FFF00\",\"Chartreuse\"),(\"#D2691E\",\"Chocolate\"),\n(\"#FF7F50\",\"Coral\"),(\"#6495ED\",\"CornflowerBlue\"),(\"#FFF8DC\",\"Cornsilk\"),\n(\"#DC143C\",\"Crimson\"),(\"#00FFFF\",\"Cyan\"),(\"#00008B\",\"DarkBlue\"),(\"#008B8B\",\"DarkCyan\"),\n(\"#B8860B\",\"DarkGoldenRod\"),(\"#A9A9A9\",\"DarkGray\"),(\"#A9A9A9\",\"DarkGrey\"),\n(\"#006400\",\"DarkGreen\"),(\"#BDB76B\",\"DarkKhaki\"),(\"#8B008B\",\"DarkMagenta\"),\n(\"#556B2F\",\"DarkOliveGreen\"),(\"#FF8C00\",\"DarkOrange\"),(\"#9932CC\",\"DarkOrchid\"),\n(\"#8B0000\",\"DarkRed\"),(\"#E9967A\",\"DarkSalmon\"),(\"#8FBC8F\",\"DarkSeaGreen\"),\n(\"#483D8B\",\"DarkSlateBlue\"),(\"#2F4F4F\",\"DarkSlateGray\"),(\"#2F4F4F\",\"DarkSlateGrey\"),\n(\"#00CED1\",\"DarkTurquoise\"),(\"#9400D3\",\"DarkViolet\"),(\"#FF1493\",\"DeepPink\"),\n(\"#00BFFF\",\"DeepSkyBlue\"),(\"#696969\",\"DimGray\"),(\"#696969\",\"DimGrey\"),\n(\"#1E90FF\",\"DodgerBlue\"),(\"#B22222\",\"FireBrick\"),(\"#FFFAF0\",\"FloralWhite\"),\n(\"#228B22\",\"ForestGreen\"),(\"#FF00FF\",\"Fuchsia\"),(\"#DCDCDC\",\"Gainsboro\"),\n(\"#F8F8FF\",\"GhostWhite\"),(\"#FFD700\",\"Gold\"),(\"#DAA520\",\"GoldenRod\"),(\"#808080\",\"Gray\"),\n(\"#808080\",\"Grey\"),(\"#008000\",\"Green\"),(\"#ADFF2F\",\"GreenYellow\"),(\"#F0FFF0\",\"HoneyDew\"),\n(\"#FF69B4\",\"HotPink\"),(\"#CD5C5C\",\"Chestnut\"),(\"#4B0082\",\"Indigo\"),(\"#FFFFF0\",\"Ivory\"),\n(\"#F0E68C\",\"Khaki\"),(\"#E6E6FA\",\"Lavender\"),(\"#FFF0F5\",\"LavenderBlush\"),\n(\"#7CFC00\",\"LawnGreen\"),(\"#FFFACD\",\"LemonChiffon\"),(\"#ADD8E6\",\"LightBlue\"),\n(\"#F08080\",\"LightCoral\"),(\"#E0FFFF\",\"LightCyan\"),(\"#FAFAD2\",\"LightGoldenRodYellow\"),\n(\"#D3D3D3\",\"LightGray\"),(\"#D3D3D3\",\"LightGrey\"),(\"#90EE90\",\"LightGreen\"),\n(\"#FFB6C1\",\"LightPink\"),(\"#FFA07A\",\"LightSalmon\"),(\"#20B2AA\",\"LightSeaGreen\"),\n(\"#87CEFA\",\"LightSkyBlue\"),(\"#778899\",\"LightSlateGray\"),(\"#778899\",\"LightSlateGrey\"),\n(\"#B0C4DE\",\"LightSteelBlue\"),(\"#FFFFE0\",\"LightYellow\"),(\"#00FF00\",\"Lime\"),\n(\"#32CD32\",\"LimeGreen\"),(\"#FAF0E6\",\"Linen\"),(\"#FF00FF\",\"Magenta\"),(\"#800000\",\"Maroon\"),\n(\"#66CDAA\",\"MediumAquaMarine\"),(\"#0000CD\",\"MediumBlue\"),(\"#BA55D3\",\"MediumOrchid\"),\n(\"#9370DB\",\"MediumPurple\"),(\"#3CB371\",\"MediumSeaGreen\"),(\"#7B68EE\",\"MediumSlateBlue\"),\n(\"#00FA9A\",\"MediumSpringGreen\"),(\"#48D1CC\",\"MediumTurquoise\"),\n(\"#C71585\",\"MediumVioletRed\"),(\"#191970\",\"MidnightBlue\"),(\"#F5FFFA\",\"MintCream\"),\n(\"#FFE4E1\",\"MistyRose\"),(\"#FFE4B5\",\"Moccasin\"),(\"#FFDEAD\",\"NavajoWhite\"),\n(\"#000080\",\"Navy\"),(\"#FDF5E6\",\"OldLace\"),(\"#808000\",\"Olive\"),(\"#6B8E23\",\"OliveDrab\"),\n(\"#FFA500\",\"Orange\"),(\"#FF4500\",\"OrangeRed\"),(\"#DA70D6\",\"Orchid\"),\n(\"#EEE8AA\",\"PaleGoldenRod\"),(\"#98FB98\",\"PaleGreen\"),(\"#AFEEEE\",\"PaleTurquoise\"),\n(\"#DB7093\",\"PaleVioletRed\"),(\"#FFEFD5\",\"PapayaWhip\"),(\"#FFDAB9\",\"PeachPuff\"),\n(\"#CD853F\",\"Peru\"),(\"#FFC0CB\",\"Pink\"),(\"#DDA0DD\",\"Plum\"),(\"#B0E0E6\",\"PowderBlue\"),\n(\"#800080\",\"Purple\"),(\"#663399\",\"RebeccaPurple\"),(\"#FF0000\",\"Red\"),\n(\"#BC8F8F\",\"RosyBrown\"),(\"#4169E1\",\"RoyalBlue\"),(\"#8B4513\",\"SaddleBrown\"),\n(\"#FA8072\",\"Salmon\"),(\"#F4A460\",\"SandyBrown\"),(\"#2E8B57\",\"SeaGreen\"),\n(\"#FFF5EE\",\"SeaShell\"),(\"#A0522D\",\"Sienna\"),(\"#C0C0C0\",\"Silver\"),(\"#87CEEB\",\"SkyBlue\"),\n(\"#6A5ACD\",\"SlateBlue\"),(\"#708090\",\"SlateGray\"),(\"#708090\",\"SlateGrey\"),\n(\"#FFFAFA\",\"Snow\"),(\"#00FF7F\",\"SpringGreen\"),(\"#4682B4\",\"SteelBlue\"),(\"#D2B48C\",\"Tan\"),\n(\"#008080\",\"Teal\"),(\"#D8BFD8\",\"Thistle\"),(\"#FF6347\",\"Tomato\"),(\"#40E0D0\",\"Turquoise\"),\n(\"#EE82EE\",\"Violet\"),(\"#F5DEB3\",\"Wheat\"),(\"#FFFFFF\",\"White\"),(\"#F5F5F5\",\"WhiteSmoke\"),\n(\"#FFFF00\",\"Yellow\"),(\"#9ACD32\",\"YellowGreen\"),(\"#89B3E2\",\"ClustalXBlue\"),\n(\"#59B93D\",\"ClustalXGreen\"),(\"#DC9C5B\",\"ClustalXOrange\"),(\"#CDCB42\",\"ClustalXYellow\"),\n(\"#B53A25\",\"ClustalXRed\"),(\"#BD59C6\",\"ClustalXMagenta\"),(\"#E28683\",\"ClustalXPink\"),\n(\"#77dd88\",\"MAELightGreen\"),(\"#99ee66\",\"MAEGreen\"),(\"#55bb33\",\"MAEDarkGreen\"),\n(\"#66bbff\",\"MAEBlue\"),(\"#9999ff\",\"MAELilac\"),(\"#5555ff\",\"MAEDarkBlue\"),\n(\"#ffcc77\",\"MAEOrange\"),(\"#eeaaaa\",\"MAEPink\"),(\"#ff4455\",\"MAERed\")]\ncolors={key.lower():value for value,key in list_tuples_hex_color}\n\n\ndefault_plotting_colors=[\"#1f77b4\",\"#ff7f0e\",\"#2ca02c\",\"#d62728\",\"#9467bd\",\"#8c564b\",\"#e3ffc2\",\"#7f7f7f\",\n\"#bcbd22\",\"#17becf\"]\n\nclass ColorMap:\n ''\n\n\n \n \n def __init__(self,stops,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.stop_values=[]\n  self.stop_colors=[]\n  self.__left_color=kwargs.get(\"left_color\",None )\n  self.__right_color=kwargs.get(\"right_color\",None )\n  for v,c in stops:\n   if not is_hex(c):\n    print(c,v,stops)\n    self.stop_colors.append(color_name_to_hex(c))\n   else :\n    self.stop_colors.append(c)\n   self.stop_values.append(v)\n  if kwargs.get('continuous_palette',None ):\n   hex_stops=list(zip(self.stop_values,self.stop_colors))\n   self.continuous_palette_values,self.continuous_palette_colors=self.continuous_palette(hex_stops)\n  else :\n   self.continuous_palette_values,self.continuous_palette_colors=None ,None\n   \n @property\n def min_value(self):\n  ''\n\n\n\n  \n  return self.stop_values[0]\n  \n @property\n def max_value(self):\n  ''\n\n\n\n  \n  return self.stop_values[-1]\n  \n @property\n def left_color(self):\n  ''\n  return self.__left_color\n  \n @left_color.setter\n def left_color(self,new_color):\n  self.__left_color=new_color\n  \n @property\n def right_color(self):\n  ''\n  return self.__right_color\n  \n @right_color.setter\n def right_color(self,new_color):\n  self.__right_color=new_color\n  \n def color(self,val):\n  ''\n\n\n\n\n  \n  if val <self.stop_values[0]:\n   return self.__left_color if self.__left_color else self.stop_colors[0]\n  if val >self.stop_values[-1]:\n   return self.__right_color if self.__right_color else self.stop_colors[-1]\n  for i in range(1,len(self.stop_values)):\n   if self.stop_values[i -1]<=val <=self.stop_values[i]:\n    return mix_colors(self.stop_colors[i],self.stop_colors[i -1],\n    (val -self.stop_values[i -1])/(self.stop_values[i]-self.stop_values[i -1]))\n    \n def continuous_color(self,val:float)->str:\n  ''\n\n\n\n\n\n\n\n  \n  if not self.continuous_palette_values:\n   hex_stops=list(zip(self.stop_values,self.stop_colors))\n   self.continuous_palette_values,self.continuous_palette_colors=self.continuous_palette(hex_stops)\n  if val <self.continuous_palette_values[0]:\n   return self.__left_color if self.__left_color else self.continuous_palette_colors[0]\n  if val >self.continuous_palette_values[-1]:\n   return self.__right_color if self.__right_color else self.continuous_palette_colors[-1]\n  for i in range(1,len(self.continuous_palette_values)):\n   if self.continuous_palette_values[i -1]<=val <=self.continuous_palette_values[i]:\n    p=round((val -self.continuous_palette_values[i -1])/(\n    self.continuous_palette_values[i]-self.continuous_palette_values[i -1]))\n    return self.continuous_palette_colors[i -1]if p ==0 else self.continuous_palette_colors[i]\n    \n @staticmethod\n def continuous_palette(pal:{object,List[Tuple[float,str]]},s=0.1)->Tuple[List[float],List[str]]:\n  ''\n\n\n\n\n\n\n\n\n\n\n\n  \n  if isinstance(pal,ColorMap):\n   palette=list(zip(pal.stop_values,pal.stop_colors))\n  else :\n   palette=pal\n  min_value=palette[0][0]\n  max_value=palette[-1][0]\n  rev_res=s **(-1)\n  steps=(round(x *s,4)for x in range(int(min_value *rev_res),int(max_value *rev_res+1)))\n  con_palette=([],[])\n  for step in steps:\n   for i in range(1,len(palette)):\n    if palette[i -1][0]<=step <=palette[i][0]:\n     con_palette[0].append(step)\n     con_palette[1].append(mix_colors(palette[i][1],palette[i -1][1],\n     (step -palette[i -1][0])/(palette[i][0]-palette[i -1][0])))\n  return con_palette\n  \n  \n  \nknown_color_scales={\"reds\":['#ffffe0','#ffd59b','#ffa474','#f47461','#db4551','#b81b34','#8b0000'],\n\"blues\":['#eff3ff','#c6dbef','#9ecae1','#6baed6','#4292c6','#2171b5','#084594'],\n\"greens\":['#edf8e9','#c7e9c0','#a1d99b','#74c476','#41ab5d','#238b45','#005a32'],\n\"greys\":['#f7f7f7','#d9d9d9','#bdbdbd','#969696','#737373','#525252','#252525'],\n\"purples\":['#f2f0f7','#dadaeb','#bcbddc','#9e9ac8','#807dba','#6a51a3','#4a1486'],\n\"pinks\":['#feebe2','#fcc5c0','#fa9fb5','#f768a1','#dd3497','#ae017e','#7a0177'],\n\"magma\":['#FCFFB2','#FCDF96','#FBC17D','#FBA368','#FA8657','#F66B4D','#ED504A','#E03B50',\n'#C92D59','#B02363','#981D69','#81176D','#6B116F','#57096E','#43006A','#300060',\n'#1E0848','#110B2D','#080616','#000005'],\n\"viridis\":['#440154','#481567','#482677','#453781','#404788','#39568C','#33638D',\n'#2D708E','#287D8E','#238A8D','#1F968B','#20A387','#29AF7F','#3CBB75',\n'#55C667','#73D055','#95D840','#B8DE29','#DCE319','#FDE725'],\n\"pastel1\":[\"#fbb4ae\",\"#b3cde3\",\"#ccebc5\",\"#decbe4\",\"#fed9a6\",\"#ffffcc\",\"#e5d8bd\",\n\"#fddaec\",\"#f2f2f2\"],\n\"accent\":[\"#7fc97f\",\"#beaed4\",\"#fdc086\",\"#ffff99\",\"#386cb0\",\"#f0027f\",\"#bf5b17\",\n\"#666666\"],\n\"paired\":[\"#a6cee3\",\"#1f78b4\",\"#b2df8a\",\"#33a02c\",\"#fb9a99\",\"#e31a1c\",\"#fdbf6f\",\"#ff7f00\",\n\"#cab2d6\",\"#6a3d9a\",\"#ffff99\",\"#b15928\"],\n\"tableau10\":[\"#4e79a7\",\"#f28e2c\",\"#e15759\",\"#76b7b2\",\"#59a14f\",\"#edc949\",\"#af7aa1\",\n\"#ff9da7\",\"#9c755f\",\"#bab0ab\"],\n\"violet_red\":[\"#77216f\",\"#7b3f88\",\"#7f5ea1\",\"#837dbb\",\"#a76a8f\",\"#cb5763\",\"#ef4438\"],\n\"yellow_green\":[\"#cddc37\",\"#88c452\",\"#44ad6d\",\"#009688\",\"#007f8f\",\"#006997\",\"#00539f\"],\n\"spectral\":['#9e0142','#a70b44','#af1446','#b71d48','#c02749','#c7304a','#ce384b',\n'#d5414b','#db494a','#e1514a','#e65949','#ea6149','#ee6a49','#f1724a',\n'#f47b4d','#f68550','#f88e53','#f99858','#fba15d','#fcaa62','#fcb368',\n'#fdbc6e','#fdc474','#fecc7b','#fed382','#feda89','#fee090','#fee698',\n'#feeb9f','#fef0a5','#fdf3aa','#fcf6ae','#faf8b0','#f8f9b0','#f5faae',\n'#f2f9ab','#edf8a7','#e8f6a4','#e2f3a1','#dbf19f','#d4ee9f','#cbea9f',\n'#c3e79f','#b9e3a0','#b0dfa1','#a6dba3','#9bd7a3','#91d3a4','#87cea5',\n'#7dc9a6','#73c3a7','#69bda9','#60b6ab','#57aeae','#50a6b0','#499db2',\n'#4595b4','#428cb5','#4283b4','#447ab3','#4771b0','#4c68ad','#525fa9',\n'#5956a5'],\n\"purple_orange\":['#2d004b','#330655','#390c5e','#3f1367','#461a70','#4c2279','#522a81',\n'#593388','#603d8f','#664796','#6d529c','#745da2','#7c68a8','#8372ae',\n'#8a7cb4','#9286b9','#998fbf','#a198c5','#a8a0ca','#afa8cf','#b6b0d4',\n'#bcb8d9','#c3c0dd','#c9c7e1','#cfcee4','#d4d4e7','#dadaea','#dfdfed',\n'#e4e4ee','#e8e8ef','#ecebef','#f0eded','#f3eeea','#f6eee4','#f8eddd',\n'#faead5','#fbe7cc','#fce3c1','#fddeb6','#fdd9aa','#fdd49e','#fdce92',\n'#fcc885','#fbc178','#faba6c','#f7b35f','#f4ab52','#f1a346','#ed9b3b',\n'#e89430','#e38c27','#dd841f','#d77d18','#d17613','#ca6f0f','#c3680c',\n'#bc620a','#b55c09','#ad5708','#a55208','#9d4c07','#954807','#8d4308',\n'#853e08'],\n\"red_blue\":['#67001f','#730421','#7e0823','#8a0c25','#941127','#9f172a','#a81d2d',\n'#b12531','#b82e35','#bf373a','#c6413f','#cc4c45','#d1574b','#d66252',\n'#db6d59','#e07861','#e58369','#e98d71','#ed977a','#f0a183','#f3ab8d',\n'#f5b497','#f7bda1','#f9c5ab','#faccb5','#fad3bf','#fbdac8','#fae0d1',\n'#fae5d8','#f9e9e0','#f7ece6','#f4eeeb','#f1efee','#edf0f1','#e9eff2',\n'#e3edf2','#ddeaf2','#d6e7f0','#cfe4ef','#c7e0ed','#bedbea','#b5d7e8',\n'#abd1e5','#a1cce2','#96c6df','#8bc0db','#80b9d7','#74b2d4','#69aad0',\n'#5ea3cc','#549bc8','#4b94c4','#428cc0','#3b85bc','#347eb7','#2e76b2',\n'#296fad','#2467a6','#1f609e','#1a5895','#164f8b','#114781','#0d3f75',\n'#08366a'],\n\"red_yellow_blue\":['#a50026','#ad0826','#b50f26','#bc1727','#c41f28','#cb2729','#d12f2b',\n'#d7382d','#dd4030','#e24a33','#e75337','#eb5d3c','#ee6640','#f17044',\n'#f47a49','#f6844e','#f88e53','#f99858','#fba15d','#fcaa63','#fcb369',\n'#fdbc70','#fdc477','#fecc7e','#fed385','#feda8c','#fee094','#fee69b',\n'#feeba3','#fef0aa','#fdf3b2','#fbf6ba','#f9f8c2','#f7f9ca','#f3f9d2',\n'#eff8da','#eaf6e1','#e4f4e7','#def1eb','#d7eeee','#d0ebef','#c8e7ef',\n'#c0e3ee','#b8deec','#b0d9e9','#a7d4e6','#9fcee3','#96c8e0','#8ec1dc',\n'#86bad8','#7db3d4','#75abd0','#6da3cc','#669bc8','#5f92c3','#5889bf',\n'#5180ba','#4c77b5','#466eb1','#4264ac','#3e5ba7','#3a51a2','#37479e',\n'#333d99'],\n\"pink_yellow_green\":['#8e0152','#970559','#9f0960','#a70e66','#af146d','#b71b74','#be237b',\n'#c42c83','#c9378a','#ce4391','#d34f99','#d75ca0','#da69a8','#de75af',\n'#e181b6','#e48cbd','#e796c4','#eaa0ca','#eda9d0','#f0b1d6','#f2bada',\n'#f4c1df','#f6c8e3','#f8cfe6','#f9d5e9','#fadaec','#fadfee','#fae4f0',\n'#fae8f1','#f9ecf2','#f8eff2','#f7f1f1','#f5f3ef','#f3f4ec','#f1f5e7',\n'#eef5e2','#ebf5dc','#e7f4d5','#e2f2cc','#ddf1c3','#d7eeb9','#d1ecaf',\n'#cae8a4','#c3e599','#bbe18e','#b3dc83','#abd878','#a2d26d','#9acd62',\n'#91c759','#89c150','#80bb47','#78b540','#70af39','#68a833','#60a12e',\n'#599b2a','#529426','#4b8d23','#448621','#3e7f1f','#38781d','#31711b',\n'#2b691a']}\n\ncategorical_palettes=[\"pastel1\",\"accent\",\"paired\",\"tableau10\"]\ncontinuous_palettes=[\"violet_red\",\"blues\",\"greens\",\"greys\",\"purples\",\"pinks\",\"magma\",\"viridis\",\"yellow_green\",\n\"spectral\",\"purple_orange\",\"red_blue\",\"red_yellow_blue\",\"pink_yellow_green\"]\n\ndef colormap_by_name(scale_name,min_val,max_val,if_reversed=False ):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n arg=[]\n if scale_name in known_color_scales:\n  if if_reversed:\n   known_color_scales[scale_name].reverse()\n  for i in range(0,len(known_color_scales[scale_name])):\n   v=(max_val -min_val)/(len(known_color_scales[scale_name])-1)*i+min_val\n   arg.append((v,known_color_scales[scale_name][i]))\n  if if_reversed:\n   known_color_scales[scale_name].reverse()\n   \n return ColorMap(arg)\n \n \ndef get_font_size(x):\n ''\n\n\n\n\n\n \n \n sizes=[4,8,12,16,20,24]\n \n for i in sizes:\n  if fabs(x)<=i:return i -1\n return sizes[-1]\n \n \ndef create_style(**kwargs):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n \n style_str=\"style='\"\n if 'style'in kwargs:style_str +=kwargs[\"style\"]\n if 'gradient'in kwargs:style_str +=\" fill:url(#%s);\"%kwargs['gradient']\n else :\n  if 'fill'in kwargs:style_str +=\" fill:%s ;\"%kwargs['fill']\n  \n if 'stroke'in kwargs:\n  if kwargs['stroke']==\"darker\"and 'fill'in kwargs:\n   col=make_darker(kwargs['fill'],0.3)\n   style_str +=\" stroke:%s;\"%str(col)\n  elif kwargs['stroke']==\"lighter\"and 'fill'in kwargs:\n   col=make_brighter(kwargs['fill'],0.2)\n   style_str +=\" stroke:%s;\"%str(col)\n  else :\n   style_str +=\" stroke:%s;\"%kwargs['stroke']\n if 'stroke_width'in kwargs:style_str +=\" stroke-width:%s;\"%kwargs['stroke_width']\n if 'opacity'in kwargs:style_str +=\" opacity:%.2f;\"%kwargs['opacity']\n if 'stroke_dasharray'in kwargs:style_str +=\" stroke-dasharray:%.1f;\"%kwargs['stroke_dasharray']\n if 'font_size'in kwargs:style_str +=\"font-size:%.1fpx;\"%kwargs['font_size']\n if 'font_family'in kwargs:style_str +=\"font-family:%s;\"%kwargs['font_family']\n if 'font_weight'in kwargs:style_str +=\"font-weight: %s;\"%kwargs['font_weight']\n if 'text_anchor'in kwargs:style_str +=\"text-anchor:%s;\"%kwargs['text_anchor']\n if 'stroke_linecap'in kwargs:style_str +=\": stroke-linecap:%s;\"%kwargs['stroke_linecap']\n if 'stroke_linejoin'in kwargs:style_str +=\"stroke-linejoin:%s;\"%kwargs['stroke_linejoin']\n if 'fill_opacity'in kwargs:style_str +=\" fill-opacity:%s;\"%kwargs['fill_opacity']\n if 'cursor'in kwargs:style_str +=\" cursor:%s; \"%kwargs['cursor']\n \n style_str +=\"'\"\n return style_str\n \n \ndefault_drawing_style=\"\"\"\n    stroke:black;\n    \"\"\"\n\ndefault_text_style=\"\"\"stroke-width:0;\n    font-size: 10px;\n    font-family:sans-serif;\n    font-weight:normal;\n    text-anchor:middle;\n    \"\"\"\n\natom_colors={\"H\":rgb_to_hex((128,128,128)),\"C\":\"#050505\",\"CA\":\"#050505\",\"S\":\"#FFC832\",\"P\":\"#FFA500\",\n\"N\":\"#87CEEB\",\"FE\":\"#C0C0C0\",\"O\":\"red\",\"NA\":\"#A0A0A0\",\"MG\":\"#000080\",\"CU\":\"#e96b39\",\n\"ZN\":\"#C0C0C0\",\"MO\":\"#20B2AA\",\"SE\":\"Orange\"}\n\n\n__mlg=color_name_to_hex(\"MAELightGreen\")\n__mg=color_name_to_hex(\"MAEGreen\")\n__mdg=color_name_to_hex(\"MAEDarkGreen\")\n__mb=color_name_to_hex(\"MAEBlue\")\n__ml=color_name_to_hex(\"MAELilac\")\n__mdb=color_name_to_hex(\"MAEDarkBlue\")\n__mo=color_name_to_hex(\"MAEOrange\")\n__mp=color_name_to_hex(\"MAEPink\")\n__mr=color_name_to_hex(\"MAERed\")\n\n\n__b=color_name_to_hex(\"ClustalXBlue\")\n__r=color_name_to_hex(\"ClustalXRed\")\n__o=color_name_to_hex(\"ClustalXOrange\")\n__y=color_name_to_hex(\"ClustalXYellow\")\n__g=color_name_to_hex(\"ClustalXGreen\")\n__m=color_name_to_hex(\"ClustalXMagenta\")\n__p=color_name_to_hex(\"ClustalXPink\")\nknown_sequence_scales={\n\"hec_secondary\":{'H':\"red\",\"E\":\"blue\",\"C\":\"gray\",\"L\":\"gray\",\"gap\":\"gray\"},\n\"clustal\":{\n\"A\":__b,\"I\":__b,\"L\":__b,\"M\":__b,\"F\":__b,\"W\":__b,\"V\":__b,\"K\":__r,\n\"R\":__r,\"D\":__m,\"E\":__m,\"N\":__g,\"Q\":__g,\"S\":__g,\"T\":__g,\n\"C\":__p,\"G\":__o,\"P\":__y,\"H\":\"white\",\"Y\":\"white\",\"-\":\"grey\",\"_\":\"grey\"\n},\n\"maeditor\":{\n\"A\":__mlg,\"I\":__mb,\"L\":__mb,\"M\":__mb,\"F\":__ml,\"W\":__ml,\"V\":__mb,\"K\":__mo,\n\"R\":__mo,\"D\":__mdg,\"E\":__mdg,\"N\":__mdg,\"Q\":__mdg,\"S\":__mr,\"T\":__mr,\n\"C\":__mg,\"G\":__mlg,\"P\":__mp,\"H\":__mdb,\"Y\":__ml,\"-\":\"grey\",\"_\":\"grey\"\n}\n}\n", ["math", "typing"]], "visualife.core.SvgViewport": [".py", "#! /usr/bin/env python \n\nfrom visualife.core.styles import create_style\nfrom math import pi,sin,cos\n\n\nclass SvgViewport:\n default_drawing_style=\"\"\"\n    stroke:black;\n    \"\"\"\n '' \n default_text_style=\"\"\"stroke-width:0;\n    font-size: 10px;\n    font-family:sans-serif;\n    font-weight:normal;\n    text-anchor:middle;\n    color: black;\n    \"\"\"\n '' \n \n \n \n \n def __init__(self,file_name,x_min,y_min,x_max,y_max,color=\"transparent\",style=default_drawing_style,\n text_style=default_text_style):\n  ''\n\n\n\n\n  \n  \n  self.__file_name=file_name\n  self.__file_handler=open(file_name,\"w\")if len(file_name)>0 else None\n  self.__x_0=x_min\n  self.__y_0=y_min\n  self.__viewport_width=x_max -x_min\n  self.__viewport_height=y_max -y_min\n  self.__style=style\n  self.__text_style=text_style\n  \n  self.__set_clean_viewport()\n  \n  if color !=\"transparent\":\n   self.__innerHTML +=\"\"\"<rect x=\"%.1f\" y=\"%.1f\" width=\"%.1f\" height=\"%.1f\" id=\"bg\" style=\"fill:%s\" />\\n\"\"\"%(\n   self.__x_0,self.__y_0,self.__viewport_width,self.__viewport_height,color)\n   \n def __set_clean_viewport(self):\n \n  self.__innerHTML=\"\"\"<svg viewBox=\"%.1f %.1f %.1f %.1f\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\\n\"\"\"\\\n  %(self.__x_0,self.__y_0,self.__viewport_width+self.__x_0,\n  self.__viewport_height+self.__y_0)\n  \n  \n  if self.__file_name !='':\n   self.__innerHTML +=\"\"\"<style>\n            .default_text_style {%s}\n            .default_drawing_style {%s}\n            </style>\\n\"\"\"%(self.__text_style,self.__style)\n   \n def viewport_name(self):\n  ''\n\n\n  \n  return \"SVG\"\n  \n def set_background(self,color):\n  ''\n  self.__innerHTML +=\"\"\"<rect x=\"%.1f\" y=\"%.1f\" width=\"%.1f\" height=\"%.1f\" id=\"bg\" style=\"fill:%s\" />\\n\"\"\"%(\\\n  self.__x_0,self.__y_0,self.__viewport_width,self.__viewport_height,color)\n  \n @property\n def style(self):\n  ''\n\n\n\n  \n  return self.__style\n  \n @style.setter\n def style(self,new_drawing_css):\n  self.__style=new_drawing_css\n  if self.__file_name !='':\n   self.__innerHTML +=\"\"\"<style> .default_drawing_style {%s} </style>\\n\"\"\"%self.__style\n   \n @property\n def text_style(self):\n  ''\n\n\n\n  \n  return self.__text_style\n  \n @text_style.setter\n def text_style(self,new_text_css):\n  self.__text_style=new_text_css\n  if self.__file_name !='':\n   self.__innerHTML +=\"\"\"<style> .default_text_style {%s} </style>\\n\"\"\"%self.__text_style\n   \n def get_width(self):\n  ''\n\n  \n  return self.__viewport_width\n  \n def get_height(self):\n  ''\n\n  \n  return self.__viewport_height\n  \n @property\n def innerHTML(self):\n  ''\n\n  \n  return self.__innerHTML\n  \n def close(self):\n  ''\n\n  \n  self.__innerHTML +=\"</svg>\"\n  if self.__file_name ==\"\":\n   return self.__innerHTML\n  else :\n   self.__file_handler.write(self.__innerHTML)\n   self.__file_handler.close()\n   \n def clear(self):\n  ''\n\n  \n  self.__set_clean_viewport()\n  \n def error_msg(self,msg):\n  ''\n\n\n\n\n  \n  \n  print(msg)\n  \n def scale_x(self):\n  ''\n  return 1\n  \n def scale_y(self):\n  ''\n  return 1\n  \n def text_length(self,text,**kwargs):\n  ''\n\n\n\n\n  \n  n_chars=len(text)\n  font_size=kwargs.get(\"font_size\")\n  return 0.7 *n_chars *font_size,font_size\n  \n @staticmethod\n def __points_as_string(points):\n  str=\"\"\n  for p in points:str +=\"%.2f,%.2f \"%(p[0],p[1])\n  return str[:-1]\n  \n def __prepare_attributes(self,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  attrs=create_style(**kwargs)\n  transform=\"\"\n  if \"Class\"in kwargs:\n   attrs +=\" class='%s' \"%kwargs['Class']\n  else :\n   attrs +=\" class=' default_drawing_style ' \"\n  if \"translate\"in kwargs:\n   val=kwargs[\"translate\"]\n   if isinstance(val,list):\n    transform=\"translate(%.1f %.1f)\"%(val[0],val[1])\n   elif isinstance(val,str):\n    transform=\"translate(\"+val+\")\"\n   else :\n    self.error_msg(\"ERROR: unknown translate coordinates: \"+str(val))\n  if \"rotate\"in kwargs:\n   transform +=\"rotate(\"+kwargs[\"rotate\"]+\")\"\n  if len(transform)>0:\n   attrs +=\" transform='\"+transform+\"'\"\n  if \"marker_start\"in kwargs:\n   print(\"mark start\")\n   attrs +=\" marker-start='url(#\"+kwargs[\"marker_start\"]+\")' \"\n  if \"marker_end\"in kwargs:\n   print(\"mark end\")\n   attrs +=\" marker-end='url(#\"+kwargs[\"marker_end\"]+\")' \"\n  if \"marker_mid\"in kwargs:\n   attrs +=\" marker-mid='url(#\"+kwargs[\"marker_mid\"]+\")' \"\n  if \"filter\"in kwargs:\n   attrs +=\" filter='url(#\"+kwargs[\"filter\"]+\")' \"\n   \n  return attrs\n  \n def radial_gradient(self,id_str,stop1,stop2,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  cx=kwargs.get(\"cx\",'50%')\n  fx=kwargs.get(\"fx\",'50%')\n  cy=kwargs.get(\"cy\",'50%')\n  fy=kwargs.get(\"fy\",'50%')\n  r=kwargs.get(\"r\",'50%')\n  self.__innerHTML +=\"\"\"<radialGradient id=\\\"%s\\\" cx=\\\"%s\\\" cy=\\\"%s\\\" r=\\\"%s\\\" fx=\\\"%s\\\" fy=\\\"%s\\\" >\\n\"\"\"\\\n  %(id_str,cx,cy,r,fx,fy)\n  \n  self.__innerHTML +=\"\"\"<stop offset=\\\"%s\\\" style=\\\"stop-color:%s;stop-opacity:%s\\\" />\\n\"\"\"%(\n  stop1[0],stop1[1],stop1[2])\n  self.__innerHTML +=\"\"\"<stop offset=\\\"%s\\\" style=\\\"stop-color:%s;stop-opacity:%s\\\" />\\n\"\"\"%(\n  stop2[0],stop2[1],stop2[2])\n  self.__innerHTML +=\"\"\"</radialGradient>\\n\"\"\"\n  \n def start_clip_path(self,id_str):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__innerHTML +=\"\"\"<clipPath id=\"%s\">\\n\"\"\"%(id_str)\n  \n def close_clip_path(self):\n  ''\n  self.__innerHTML +=\"\"\"</clipPath>\\n\"\"\"\n  \n def start_marker(self,id_str,view_box,ref_x,ref_y,width,height,orient=\"auto\"):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  v=\"viewBox=\"\n  if isinstance(view_box,list)and len(view_box)>=4:\n   v +=\"'%.1f %.1f %.1f %.1f'\"%(view_box[0],view_box[1],view_box[2],view_box[3])\n  else :\n   v +=\"'\"+view_box+\"'\"\n  self.__innerHTML +=\"\"\"<defs><marker id=\"%s\" %s refX=\"%.1f\" refY=\"%.1f\" markerWidth=\"%.1f\" markerHeight=\"%.1f\" orient=\"%s\">\\n\"\"\"\\\n  %(id_str,v,ref_x,ref_y,width,height,orient)\n  \n def close_marker(self):\n  ''\n  self.__innerHTML +=\"\"\"</marker></defs>\\n\"\"\"\n  \n def add_filter(self,id_str,if_black=True ):\n  ''\n  \n  in_offset=\"SourceAlpha\"\n  if if_black ==False :\n   in_offset=\"SourceGraphic\"\n   \n  self.__innerHTML +=\"\"\"\n        <defs>\n          <filter id=\"shadow\" x=\"0\" y=\"0\" width=\"200%\" height=\"200%\">\n            <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"8\" dy=\"8\" />\n            <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"5\" />\n            <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\n          </filter>\n        </defs>\n        \"\"\"\n  \n  \n def start_group(self,id_str,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  if 'clip_path'in kwargs and kwargs['clip_path']!=\"\":\n   clip_str=\"\"\" clip-path=\"url(#%s)\" \"\"\"%kwargs['clip_path']\n  else :\n   clip_str=\"\"\n  self.__innerHTML +=\"\"\"<g id=\"%s\" %s %s>\\n\"\"\"%(id_str,self.__prepare_attributes(**kwargs),clip_str)\n  \n def close_group(self):\n  ''\n  self.__innerHTML +=\"</g>\"\n  \n def circles_group(self,gid,x,y,c,r,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if not isinstance(r,list):\n   r=[r]\n  self.__innerHTML +=\"\"\"<g id=\"%s\" %s>\\n\"\"\"%(gid,self.__prepare_attributes(**kwargs))\n  for i in range(len(x)):\n   self.__innerHTML +=\\\n   \"\"\"<circle cx=\"%.1f\" cy=\"%.1f\" r=\"%.1f\" id=\"%s\" fill=\"%s\" />\\n\"\"\"%(\n   x[i],y[i],r[i %len(r)],gid+\":\"+str(i),c[i %len(c)].__str__())\n   \n   \n  self.__innerHTML +=\"</g>\"\n  \n def squares_group(self,gid,x,y,c,a,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__innerHTML +=\"\"\"<g id=\"%s\" %s>\\n\"\"\"%(gid,self.__prepare_attributes(**kwargs))\n  cl=\"Class='\"+kwargs[\"Class\"]+\"'\"if \"Class\"in kwargs else \"\"\n  for i in range(len(x)):\n   self.__innerHTML +=\\\n   \"\"\"<rect x=\"%.1f\" y=\"%.1f\" width=\"%.1f\" height=\"%.1f\" id=\"%s\" fill=\"%s\" %s />\\n\"\"\"%(\n   x[i]-a /2,y[i]-a /2,a,a,gid+\":\"+str(i),c[i %len(c)].__str__(),cl)\n  self.__innerHTML +=\"</g>\"\n  \n def lines_group(self,gid,x,y,c,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__innerHTML +=\"\"\"<g id=\"%s\" %s>\\n\"\"\"%(gid,self.__prepare_attributes(**kwargs))\n  cl=\"Class='\"+kwargs[\"Class\"]+\"'\"if \"Class\"in kwargs else \"\"\n  for i in range(len(x)-1):\n   self.__innerHTML +=\\\n   \"\"\"<line x1=\"%.1f\" y1=\"%.1f\" x2=\"%.1f\" y2=\"%.1f\" id=\"%s\" fill=\"%s\" %s />\\n\"\"\"\\\n   %(x[i],y[i],x[i+1],y[i+1],gid+\":\"+str(i),c[i %len(c)].__str__(),cl)\n  self.__innerHTML +=\"</g>\"\n  \n def squares_grid(self,gid,x0,y0,w,h,rows,columns,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  self.__innerHTML +=\"\"\"<g id=\"%s\" %s>\\n\"\"\"%(gid,self.__prepare_attributes(**kwargs))\n  \n  d=kwargs.get(\"margin\",0)\n  dx=w+kwargs.get(\"xmargin\",d)\n  dy=h+kwargs.get(\"ymargin\",d)\n  \n  x=x0\n  if \"Class\"in kwargs:\n   whc=(\" width='%.1f' height='%.1f' class='%s' \"%(w,h,kwargs[\"Class\"]))\n  else :\n   whc=(\" width='%.1f' height='%.1f'\"%(w,h))\n   \n  for i in range(rows):\n   dxs=\"%.1f'\"%x\n   y=y0\n   id=gid+\"-\"+str(i)\n   for j in range(columns):\n    self.__innerHTML +=\"\\t<rect x='\"+dxs+whc+\" y='%.1f' id='%s' />\\n\"%(y,id+\"-\"+str(j))\n    y +=dy\n   x +=dx\n   \n  self.__innerHTML +=\"</g>\"\n  \n def triangle_group(self,gid,x,y,c,r,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  self.__innerHTML +=\"\"\"<g id=\"%s\" %s>\\n\"\"\"%(gid,self.__prepare_attributes(**kwargs))\n  for i in range(len(x)):\n   self.triangle(gid+\":\"+str(i),x[i],y[i],r,**dict(**kwargs,fill=c[i %len(c)].__str__()))\n  self.__innerHTML +=\"</g>\"\n  \n def rhomb_group(self,gid,x,y,c,r,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__innerHTML +=\"\"\"<g id=\"%s\" %s>\\n\"\"\"%(gid,self.__prepare_attributes(**kwargs))\n  for i in range(len(x)):\n   self.rhomb(gid+\":\"+str(i),x[i],y[i],r,**dict(**kwargs,fill=c[i %len(c)].__str__()))\n  self.__innerHTML +=\"</g>\"\n  \n def image(self,img_id,x,y,w,h,href,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n  \n  self.__innerHTML +=\"\"\"<image id=\"%s\" href=\"%s\" x=\"%.1f\" y=\"%.1f\" height=\"%.1f\" width=\"%.1f\" />\"\"\"\\\n  %(img_id,href,x,y,h,w)\n  \n def rect(self,id_str,x,y,w,h,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  s=\" \"\n  if \"rx\"in kwargs:s +=\"rx='%.1f' \"%kwargs[\"rx\"]\n  if \"ry\"in kwargs:s +=\"ry='%.1f' \"%kwargs[\"ry\"]\n  if \"angle\"in kwargs:\n   s +=\"transform='rotate(%.1f %.1f %.1f)'\"%(float(kwargs[\"angle\"]),x+w /2.0,y+h /2.0)\n   \n  self.__innerHTML +=\\\n  \"\"\"<rect x=\"%.1f\" y=\"%.1f\" width=\"%.1f\" height=\"%.1f\" id=\"%s\" %s %s/>\\n\"\"\"%(\\\n  x,y,w,h,id_str,self.__prepare_attributes(**kwargs),s)\n  \n def square(self,id_str,x,y,a,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__innerHTML +=\\\n  \"\"\"<rect x=\"%.1f\" y=\"%.1f\" width=\"%.1f\" height=\"%.1f\" id=\"%s\" %s />\\n\"\"\"%(\\\n  x -a /2,y -a /2,a,a,id_str,self.__prepare_attributes(**kwargs))\n  \n def circle(self,id_str,x,y,r,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  self.__innerHTML +=\\\n  \"\"\"<circle cx=\"%.1f\" cy=\"%.1f\" r=\"%.1f\" id=\"%s\" %s />\\n\"\"\"%(\\\n  x,y,r,id_str,self.__prepare_attributes(**kwargs))\n  \n def line(self,id_str,xb,yb,xe,ye,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n  \n  self.__innerHTML +=\\\n  \"\"\"<line x1=\"%.1f\" y1=\"%.1f\" x2=\"%.1f\" y2=\"%.1f\" id=\"%s\" %s />\\n\"\"\"\\\n  %(xb,yb,xe,ye,id_str,self.__prepare_attributes(**kwargs))\n  \n def polyline(self,id_str,*points,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  print(\"kw \",kwargs)\n  str=\"\"\n  if len(points)==1:points=points[0]\n  for p in points:\n   str +=\"%.1f,%.1f \"%(p[0],p[1])\n  self.__innerHTML +=\"\"\"<polyline points=\"%s\" id=\"%s\" %s/>\\n\"\"\"\\\n  %(str,id_str,self.__prepare_attributes(**kwargs))\n  \n def ellipse(self,id_str,x,y,rx,ry,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n  \n  self.__innerHTML +=\\\n  \"\"\"<ellipse cx=\"%.1f\" cy=\"%.1f\" rx=\"%.1f\" ry=\"%.1f\" id=\"%s\" %s />\\n\"\"\"\\\n  %(x,y,rx,ry,id_str,self.__prepare_attributes(**kwargs))\n  \n def polygon(self,id_str,points,**kwargs):\n  ''\n  \n  str=SvgViewport.__points_as_string(points)\n  self.__innerHTML +=\\\n  \"\"\"<polygon points=\"%s\" id=\"%s\"  %s />\\n\"\"\"%(str,id_str,self.__prepare_attributes(**kwargs))\n  \n def triangle(self,id_str,x,y,r,**kwargs):\n  ''\n\n\n\n\n\n  \n  angle=2 *pi /3.0\n  self.polygon(id_str,[[x+r *sin(0 *angle),y+r *cos(0 *angle)],\n  [x+r *sin(1 *angle),y+r *cos(1 *angle)],\n  [x+r *sin(2 *angle),y+r *cos(2 *angle)]],\n  **kwargs)\n  \n def rhomb(self,id_str,x,y,r,**kwargs):\n  ''\n\n\n\n\n\n  \n  self.polygon(id_str,[[x,y+r],[x+r,y],[x,y -r],[x -r,y]],**kwargs)\n  \n def path(self,id_str,elements,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  str=\"\"\n  for e in elements:\n   str +=\" \"+e[0]\n   if len(e)==2 and isinstance(e[1],tuple):\n    for coord in e[1]:\n     str +=\" %d\"%coord if isinstance(coord,int)else \" %.1f\"%coord\n   else :\n    for coord in e[1:]:\n     str +=\" %d\"%coord if isinstance(coord,int)else \" %.1f\"%coord\n  self.__innerHTML +=\"\"\"<path d=\"%s\" id=\"%s\" %s />\\n\"\"\"%(str,id_str,self.__prepare_attributes(**kwargs))\n  \n def text(self,id_str,x,y,text,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  \n  dy=kwargs.get('dy',\"1.0em\")\n  angle=kwargs.get('angle',0)\n  \n  font_size=kwargs.get('font_size',10)\n  if isinstance(text,list):y -=font_size *(len(text))/2.0\n  \n  if angle ==0:\n   svg_txt=\"\"\"<text class= 'default_text_style' x=\"%.1f\" y=\"%.1f\" id='%s' %s>\"\"\"%(\n   x,y,id_str,create_style(**kwargs))\n  else :\n   svg_txt=\"\"\"<text class= 'default_text_style' x=\"%.1f\" y=\"%.1f\" id='%s' %s transform=\"rotate(%.1f %.1f %.1f)\"> \"\"\"%(\n   x,y,id_str,create_style(**kwargs),angle,x,y)\n   \n  if isinstance(text,list):\n   svg_txt +=\"\\n\"\n   \n   for it in text:\n    svg_txt +=\"\"\"<tspan dy=\"%s\" x=\"%.1f\">%s</tspan>\\n\"\"\"%(dy,x,it)\n   svg_txt +=\"</text>\\n\"\n  else :\n   svg_txt +=str(text)+\"</text>\\n\"\n   \n  self.__innerHTML +=svg_txt\n", ["math", "visualife.core.styles"]], "visualife.core": [".py", "from visualife.core.CanvasViewport import CanvasViewport\n\ntry :\n from visualife.core.DraggablePlot import DraggablePlot\n from visualife.core.HtmlViewport import HtmlViewport\nexcept :\n pass\n \nfrom visualife.core.Plot import *\nfrom visualife.core.SvgViewport import SvgViewport\nfrom visualife.core.axes import *\n", ["visualife.core.CanvasViewport", "visualife.core.DraggablePlot", "visualife.core.HtmlViewport", "visualife.core.Plot", "visualife.core.SvgViewport", "visualife.core.axes"], 1], "visualife.core.three_d.MoleculePanel": [".py", "from visualife.data import *\nfrom visualife.core.three_d.Svg3DPanel import *\nfrom visualife.core.styles import atom_colors\n\n\nclass MoleculePanel(Svg3DPanel):\n ''\n \n \n def __init__(self,svg_canvas,width=500,height=500):\n  super().__init__(svg_canvas,width,height)\n  \n def set_molecule(self,atms,bonds,flag=\"H\",s=40):\n \n  self.scale=s\n  ''  \n  \n  suma_x=0\n  suma_y=0\n  suma_z=0\n  \n  for ai in atms:\n   suma_x +=ai.x\n   suma_y +=ai.y\n   suma_z +=ai.z\n   \n  self.center_x=suma_x /float(len(atms))\n  self.center_y=suma_y /float(len(atms))\n  self.center_z=suma_z /float(len(atms))\n  \n  for atom in atom_colors.keys():\n   self.define_gradient(\"grad%s\"%atom,[\"0%\",\"white\",\"0.9\"],[\"100%\",\"%s\"%atom_colors[atom],\"1\"])\n   \n  i=0\n  for ai in atms:\n  \n   c_x,c_y=ai[0]*self.scale -self.center_x *self.scale,ai[1]*self.scale -self.center_y *self.scale\n   c_gradient=\"grad%s\"%ai.element\n   c_r=vdw_atomic_radii[ai.element]*5\n   print(\"[MoleculePanel] placing atom at\",c_x,c_y)\n   if flag ==\"H\":\n    self.add_vertex(c_x,c_y,ai[2]*self.scale -self.center_z *self.scale)\n    \n    self.sphere_at(\"circle\"+str(i),i,c_r,fill=atom_colors[ai.element],stroke_width=0,gradient=c_gradient)\n    i +=1\n   else :\n    if ai.element !=\"H\":\n     self.add_vertex(c_x,c_y,ai[2]*self.scale -self.center_z *self.scale)\n     self.sphere_at(\"circle\"+str(i),i,c_r,fill=atom_colors[ai.element],stroke_width=0,gradient=c_gradient)\n     i +=1\n     \n  i=0\n  for li in bonds:\n   ind1=li.atom1.id -1\n   ind2=li.atom2.id -1\n   \n   if int(li.type)>=2:\n    self.line_at(\"line\"+str(i),ind1,ind2,stroke='black',stroke_width='5')\n    self.line_at(\"doubleline\"+str(i),ind1,ind2,stroke='white',stroke_width='2')\n   else :\n    self.line_at(\"line\"+str(i),ind1,ind2,stroke='black',stroke_width='2')\n   i +=1\n   \n   \n", ["visualife.core.styles", "visualife.core.three_d.Svg3DPanel", "visualife.data"]], "visualife.core.three_d.Svg3DPanel": [".py", "from math import pi,cos,sin,sqrt\nfrom visualife.core.HtmlViewport import HtmlViewport\nfrom visualife.core.styles import color_name_to_hex,mix_colors\nfrom browser import document\n\n\nclass Sphere:\n ''\n \n \n def __init__(self,id,vertex,r,**kwargs):\n  self.id=id\n  self.v=vertex\n  self.r=r\n  self.params=kwargs\n  \n  \nclass SpheresGroup:\n def __init__(self,id,vertices,radii,**kwargs):\n  ''\n  \n  self.id=id\n  self.v=vertices\n  self.r=radii\n  self.params=kwargs\n  \n @property\n def vertices(self):\n  ''\n  return self.v\n  \n @property\n def y(self):\n  ''\n  return [vi[1]+self.__offset_y for vi in self.v]\n  \n  \nclass Line:\n ''\n \n \n def __init__(self,id,vb,ve,**kwargs):\n  self.id=id\n  self.vb=vb\n  self.ve=ve\n  self.params=kwargs\n  \n  \nclass Face:\n ''\n \n \n def __init__(self,id,verts,**kwargs):\n  self.id=id\n  self.vertices=verts\n  self.params=kwargs\n  \n def average_z(self):\n  ''\n\n  \n  z=0\n  for vi in self.vertices:z +=vi[2]\n  \n  return z /len(self.vertices)\n  \n  \nclass Svg3DPanel:\n ''\n \n \n def __init__(self,svg_canvas,width,height):\n  self.__alpha=0\n  self.__beta=0\n  self.__width=width\n  self.__height=height\n  self.__is_dragged=False\n  self.__vertices=[]\n  self.__spheres=[]\n  self.__sphere_groups=[]\n  self.__faces=[]\n  self.__lines=[]\n  self.__gradients=[]\n  self.__drawing=HtmlViewport(svg_canvas,0,0,width,height)\n  self.__drawing.clear()\n  self.__scale=1\n  self.__offset_x=width /2\n  self.__offset_y=height /2\n  self.__center_x=0\n  self.__center_y=0\n  self.__center_z=0\n  self.__prev_rotation_x=0\n  self.__prev_rotation_y=0\n  \n  self.__light=self.normalize([0.5,-0.2,-2])\n  self.__ambient_light=0.1\n  self.__z_order=False\n  \n @property\n def offset_x(self):\n  ''\n  return self.__offset_x\n  \n @property\n def offset_y(self):\n  ''\n  return self.__offset_y\n  \n @offset_x.setter\n def offset_x(self,x):\n  self.__offset_x=x\n  \n @offset_y.setter\n def offset_y(self,y):\n  self.__offset_y=y\n  \n @property\n def center_x(self):\n  ''\n  return self.__center_x\n  \n @property\n def center_y(self):\n  ''\n  return self.__center_y\n  \n @property\n def center_z(self):\n  ''\n  return self.__center_z\n  \n @property\n def drawing(self):\n  ''\n  return self.__drawing\n  \n @property\n def scale(self):\n  ''\n  return self.__scale\n  \n @property\n def z_order(self):\n  return self.__z_order\n  \n @z_order.setter\n def z_order(self,flag):\n  self.__z_order=flag\n  \n def clear(self):\n  ''\n  self.__drawing.clear()\n  self.__vertices.clear()\n  self.__spheres.clear()\n  self.__faces.clear()\n  self.__lines.clear()\n  \n def count_vertices(self):\n  ''\n  return len(self.__vertices)\n  \n def count_spheres(self):\n  ''\n  return len(self.__spheres)\n  \n def count_faces(self):\n  ''\n  return len(self.__faces)\n  \n def count_lines(self):\n  ''\n  return len(self.__lines)\n  \n def add_vertex(self,x,y,z):\n  ''\n  self.__vertices.append([x,y,z])\n  return len(self.__vertices)-1\n  \n def sphere_at(self,id,v_index,r,**kwargs):\n  ''\n  self.__spheres.append(Sphere(id,self.__vertices[v_index],r,**kwargs))\n  \n def add_sphere(self,id,x,y,z,r,**kwargs):\n  ''\n  i=self.add_vertex(x,y,z)\n  self.sphere_at(id,i,r,**kwargs)\n  return i\n  \n def append_spheres_group(self,spheres_group):\n  ''\n  self.__sphere_groups.append(spheres_group)\n  \n def line_at(self,id,vb_index,ve_index,**kwargs):\n  ''\n  self.__lines.append(Line(id,self.__vertices[vb_index],self.__vertices[ve_index],**kwargs))\n  \n def face_at(self,id,points,**kwargs):\n  ''\n  verts=[]\n  for i in points:verts.append(self.__vertices[i])\n  self.__faces.append(Face(id,verts,**kwargs))\n  \n def rotate_vertices(self):\n  ''\n  \n  __sa=sin(self.__alpha)\n  __ca=cos(self.__alpha)\n  __sb=sin(self.__beta)\n  __cb=cos(self.__beta)\n  for v in self.__vertices:\n  \n   x_przed=v[0]-self.__center_x\n   y_przed=v[1]-self.__center_y\n   z_przed=v[2]-self.__center_z\n   \n   \"\"\"Wok\u00f3\u0142 X\"\"\"\n   y_po=(y_przed *__cb -z_przed *__sb)\n   z=(y_przed *__sb+z_przed *__cb)\n   \n   \"\"\"Wok\u00f3\u0142 Y\"\"\"\n   x_po=(z *__sa+x_przed *__ca)\n   z_po=(z *__ca -x_przed *__sa)\n   \n   \"\"\"Dodajemy z powrotem odj\u0119te warto\u015bci, zapis punkt\u00f3w po\"\"\"\n   v[0]=x_po+self.__center_x\n   v[1]=y_po+self.__center_y\n   v[2]=z_po+self.__center_z\n   \n @staticmethod\n def subtract_vectors(vi,vj):\n  ''\n  return [vi[0]-vj[0],vi[1]-vj[1],vi[2]-vj[2]]\n  \n @staticmethod\n def length(v):\n  ''\n  return sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2])\n  \n @staticmethod\n def normalize(v):\n  ''\n  ll=Svg3DPanel.length(v)\n  v[0]/=ll\n  v[1]/=ll\n  v[2]/=ll\n  return v\n  \n @staticmethod\n def plane_normal(verts):\n  v1=Svg3DPanel.subtract_vectors(verts[0],verts[1])\n  v2=Svg3DPanel.subtract_vectors(verts[0],verts[2])\n  \n  return [v1[1]*v2[2]-v1[2]*v2[1],v1[2]*v2[0]-v1[0]*v2[2],v1[0]*v2[1]-v1[1]*v2[0]]\n  \n @staticmethod\n def dot_product(vi,vj):\n  ''\n  return vi[0]*vj[0]+vi[1]*vj[1]+vi[2]*vj[2]\n  \n def define_gradient(self,id,stop1,stop2):\n  ''\n  self.__gradients.append([id,stop1,stop2])\n  \n def draw(self):\n  ''\n  \n  self.rotate_vertices()\n  self.__drawing.clear()\n  \n  \n  for g in self.__gradients:\n   self.__drawing.radial_gradient(g[0],g[1],g[2])\n   \n   \n  if self.__z_order:\n   faces_copy=[]\n   for f in self.__faces:faces_copy.append((f.average_z(),f))\n   faces_copy.sort(key=lambda x:x[0])\n   fc=[f[1]for f in faces_copy]\n  else :\n   fc=self.__faces\n   \n  black=color_name_to_hex(\"black\")\n  for f in fc:\n   fnorm=self.normalize(self.plane_normal(f.vertices))\n   if fnorm[2]>0:continue\n   dp=Svg3DPanel.dot_product(self.__light,fnorm)\n   \n   light_fraction=self.__ambient_light+(1 -self.__ambient_light)*max(0,dp)\n   clr=f.params.get('fill','#0000ff')\n   if clr[0]!='#':clr=color_name_to_hex(clr)\n   \n   fill=mix_colors(clr,black,light_fraction)\n   for v in f.vertices:\n    v[0]+=self.__offset_x\n    v[1]=-v[1]+self.__offset_y\n   self.__drawing.polygon(f.id,f.vertices,fill=fill,stroke='white',stroke_width=1)\n   for v in f.vertices:\n    v[0]-=self.__offset_x\n    v[1]=-v[1]+self.__offset_y\n    \n    \n  for l in self.__lines:\n   vb=l.vb\n   ve=l.ve\n   self.__drawing.line(l.id,vb[0]+self.__offset_x,-vb[1]+self.__offset_y,ve[0]+self.__offset_x,-ve[1]+self.__offset_y,**l.params)\n   \n   \n  for c in self.__spheres:\n   cc=c.v\n   self.__drawing.circle(c.id,cc[0]+self.__offset_x,-cc[1]+self.__offset_y,c.r,**c.params)\n   \n   \n  for g in self.__sphere_groups:\n   x,y=[],[]\n   for vi in g.v:\n    x.append(self.__vertices[vi][0]+self.__offset_x)\n    y.append(self.__vertices[vi][1]+self.__offset_y)\n    \n   self.__drawing.circles_group(g.id,x,y,\"black\",g.r)\n   \n   \n  self.__drawing.rect(\"drag-element\",0,0,self.__width,self.__height,\n  style=\"\"\"fill:white; opacity:0.0; stroke_width:0;\"\"\")\n  \n  \n  self.__drawing.close()\n  document['drag-element'].bind(\"mousedown\",self.start_drag)\n  document['drag-element'].bind(\"mouseup\",self.end_drag)\n  document['drag-element'].bind(\"mousemove\",self.drag)\n  \n  \n  \n def start_drag(self,evt):\n  ''\n\n\n  \n  self.__prev_rotation_x=evt.x\n  self.__prev_rotation_y=evt.y\n  self.__is_dragged=True\n  \n def drag(self,evt):\n  ''\n\n\n  \n  \n  if not self.__is_dragged:return\n  ''  \n  \n  self.__alpha=(evt.x -self.__prev_rotation_x)/100\n  self.__beta=(evt.y -self.__prev_rotation_y)/100\n  self.__prev_rotation_x=evt.x\n  self.__prev_rotation_y=evt.y\n  \n  self.draw()\n  \n def end_drag(self,evt):\n  ''\n\n\n  \n  self.__is_dragged=False\n  \n def key_pressed(self,evt):\n  ''\n  if evt.keyCode ==\"LEFT\":self.__beta +=0.1\n  elif evt.keyCode ==\"RIGHT\":self.__beta -=0.1\n  elif evt.keyCode ==\"UP\":self.__alpha +=0.1\n  elif evt.keyCode ==\"DOWN\":self.__alpha -=0.1\n  self.draw()\n  \n", ["browser", "math", "visualife.core.HtmlViewport", "visualife.core.styles"]], "visualife.core.three_d": [".py", "try :\n from visualife.core.three_d.Svg3DPanel import *\n from visualife.core.three_d.MoleculePanel import *\nexcept :\n pass\n \n", ["visualife.core.three_d.MoleculePanel", "visualife.core.three_d.Svg3DPanel"], 1], "visualife.data.Atom": [".py", "class Atom:\n ''\n \n \n __elements=[\"NA\",\"K\",\"MG\",\"ZN\",\"CU\",\"FE\",\"SE\",\"CO\",\"MN\",\"MO\"]\n \n def __init__(self,args):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__data=args\n  self.__owner=None\n  \n def __getitem__(self,key):\n  return self.__data[key]\n  \n @property\n def x(self):\n  return self.__data[0]\n  \n @x.setter\n def x(self,x):\n  self.__data[0]=x\n  \n @property\n def y(self):\n  return self.__data[1]\n  \n @y.setter\n def y(self,y):\n  self.__data[1]=y\n  \n @property\n def z(self):\n  return self.__data[2]\n  \n @z.setter\n def z(self,z):\n  self.__data[2]=z\n  \n @property\n def element(self):\n  if self.__data[4].strip()in Atom.__elements:element=self.__data[4].strip()\n  else :element=self.__data[4].strip()[0]\n  return element\n  \n @property\n def id(self):\n  return self.__data[3]\n  \n @id.setter\n def id(self,id):\n  self.__data[3]=id\n  \n @property\n def name(self):\n  return self.__data[4].strip()\n  \n @name.setter\n def name(self,name):\n  self.__data[4]=name\n  \n @property\n def icode(self):\n  return self.__data[5]\n  \n @icode.setter\n def icode(self,icode):\n  self.__data[5]=icode\n  \n @property\n def owner(self):\n  return self.__owner\n  \n @owner.setter\n def owner(self,new_owner):\n  self.__owner=new_owner\n  \n def distance_square_to(self,another_atom,bound=10000.0):\n \n  r=self.x -another_atom.x\n  r2=r *r\n  if r2 >bound:return bound\n  r=self.y -another_atom.y\n  r2 +=r *r\n  if r2 >bound:return bound\n  r=self.z -another_atom.z\n  \n  return r2+r *r\n  \n def __str__(self):\n  return \"%d %s %f %f %f\"%(int(self.id),self.name,self.x,self.y,self.z)\n", []], "visualife.data.Bond": [".py", "class Bond:\n ''\n \n \n def __init__(self,atom1,atom2,type='1'):\n  ''\n\n\n\n\n\n\n\n  \n  self.__atom1=atom1\n  self.__atom2=atom2\n  self.__type=type\n  \n @property\n def atom1(self):\n  ''\n  \n  return self.__atom1\n  \n @property\n def atom2(self):\n  ''\n  \n  return self.__atom2\n  \n @property\n def type(self):\n  ''\n  \n  return self.__type\n  \n def __str__(self):\n  ''\n  \n  return \"%d %d %d\"%(self.__atom1.id,self.__atom2.id,self.__type)\n", []], "visualife.data.Chain": [".py", "class Chain:\n ''\n \n def __init__(self,chainid):\n  self.__chain_id=chainid\n  self.__residues=[]\n  self.__owner=None\n  \n def __str__(self):\n  return \"%s\"%(self.__chain_id)\n  \n @property\n def residues(self):\n  return self.__residues\n  \n @property\n def chain_id(self):\n  return self.__chain_id\n  \n @chain_id.setter\n def chain_id(self,new_id):\n  self.__chain_id=new_id\n  \n @property\n def owner(self):\n  return self.__owner\n  \n @owner.setter\n def owner(self,new_owner):\n  self.__owner=new_owner\n  \n def find_residues(self,first_id,last_id):\n  ''\n\n\n\n\n  \n  out=[]\n  for r in self.__residues:\n   if r.res_id >=first_id and r.res_id <=last_id:out.append(r)\n  return out\n  \n  \n  \n", []], "visualife.data.HSSP": [".py", "import re\n\n\nclass HSSP:\n ''\n\n \n def __init__(self,file_name_or_data):\n  self.__ids=[]\n  self.__sequences={}\n  self.__headers={}\n  self.__n_aligned=0\n  self.__seq_length=0\n  \n  self.__read_hssp(file_name_or_data)\n  \n @property\n def ids(self):\n  return self.__ids\n  \n @property\n def headers(self):\n  return self.__headers\n  \n @property\n def sequences(self):\n  return self.__sequences\n  \n @property\n def seq_aligned(self):\n  return self.__n_aligned\n  \n @property\n def seq_length(self):\n  return self.__seq_length\n  \n def __read_hssp(self,file_name_or_data):\n  if len(file_name_or_data)<80:\n   f=open(file_name_or_data)\n   text=f.read()\n   f.close()\n  else :\n   text=file_name_or_data\n  lines=text.split(\"\\n\")\n  for line in lines:\n   if line.startswith(\"SEQLENGTH\"):\n    self.__seq_length=int(line.split()[1].strip())\n   elif line.startswith(\"NALIGN\"):\n    self.__n_aligned=int(line.split()[1].strip())\n    \n  protein_starts=re.search(r'^## PROTEINS',text,flags=re.MULTILINE).start()\n  alignments=re.finditer(r'^## ALIGNMENTS',text,flags=re.MULTILINE)\n  alignment_starts=[]\n  for a in alignments:\n   alignment_starts.append(a.start())\n  stop=re.search(r'^## SEQUENCE',text,flags=re.MULTILINE).start()\n  \n  proteins=text[protein_starts:alignment_starts[0]]\n  lines=proteins.split('\\n')\n  lines=lines[2:-1]\n  for line in lines:\n   self.__ids.append(line.split()[2])\n   \n  seq_tmp=[\"\"for _ in range(self.seq_length)]\n  for x in range(len(alignment_starts)-1):\n   alignments=text[alignment_starts[x]:alignment_starts[x+1]]\n   lines=alignments.split('\\n')\n   lines=lines[2:-1]\n   i=0\n   for line in lines:\n    seq=line[51:121].replace(' ','-')\n    seq_tmp[i]+=seq\n    i +=1\n    \n  last=text[alignment_starts[-1]:stop]\n  lines=last.split('\\n')\n  lines=lines[2:-1]\n  i=0\n  for line in lines:\n   seq=line[51:121].replace(' ','-')\n   seq_tmp[i]+=seq\n   i +=1\n  for i in range(self.seq_length):\n   seq_tmp[i]=seq_tmp[i][:self.seq_aligned]\n  for i in range(self.seq_aligned):\n   seq=\"\"\n   for j in range(self.seq_length):\n    seq +=seq_tmp[j][i]\n   self.__sequences[self.ids[i]]=seq\n   \n   \n   \n", ["re"]], "visualife.data.Molecule": [".py", "class Molecule:\n ''\n \n \n def __init__(self):\n  self.__atoms=[]\n  self.__bonds=[]\n  self.__bonds_for_atoms={}\n  \n @property\n def atoms(self):\n  return self.__atoms\n  \n @property\n def bonds(self):\n  return self.__bonds\n  \n @property\n def n_bonds(self):\n  return len(self.__bonds)\n  \n @property\n def n_atoms(self):\n  return len(self.__atoms)\n  \n def add_atom(self,a):\n  self.__atoms.append(a)\n  \n def add_bond(self,b):\n  self.__bonds.append(b)\n  if b.atom1 not in self.__atoms:self.__atoms.append(b.atom1)\n  if b.atom2 not in self.__atoms:self.__atoms.append(b.atom2)\n  \n  if b.atom1 not in self.__bonds_for_atoms:\n   self.__bonds_for_atoms[b.atom1]=[]\n  self.__bonds_for_atoms[b.atom1].append(b)\n", []], "visualife.data.pdb_utils": [".py", "''\n\n\nfrom visualife.data import Bond\nfrom visualife.utils.text_utils import from_string\n\nvdw_atomic_radii={\"H\":1,\"C\":1.7,\"N\":1.55,\"O\":1.52,\"P\":1.8,\"S\":1.8,\"SE\":1.8,\"FE\":1.7,\"MO\":1.8}\n\nvdw_interatomic_distances={}\n\namino_acid_code3_to_code1={'ALA':'A','ARG':'R','ASN':'N','ASP':'D',\n'CYS':'C','GLU':'E','GLN':'Q','GLY':'G',\n'HIS':'H','ILE':'I','LEU':'L','LYS':'K',\n'MET':'M','PHE':'F','PRO':'P','SER':'S',\n'THR':'T','TRP':'W','TYR':'Y','VAL':'V'}\n\namino_acid_code1_to_code3={'A':'ALA','R':'ARG','N':'ASN','D':'ASP','C':'CYS','E':'GLU','Q':'GLN',\n'G':'GLY','H':'HIS','I':'ILE','L':'LEU','K':'LYS','M':'MET','F':'PHE',\n'P':'PRO','S':'SER','T':'THR','W':'TRP','Y':'TYR','V':'VAL'}\n\nkd_hydrophobicity={'A':1.8,'R':-4.5,'N':-3.5,'D':-3.5,'C':2.5,'Q':-3.5,'E':-3.5,'G':-0.4,'H':-3.2,\n'I':4.5,'L':3.8,'K':-3.9,'M':1.9,'F':2.8,'P':-1.6,'S':-0.8,'T':-0.7,'W':-0.9,\n'Y':-1.3,'V':4.2,'X':0.0}\n\ndef create_sequence(residues):\n ''\n\n\n\n \n \n seq=[amino_acid_code3_to_code1.get(r.res_name,'X')for r in residues]\n return ''.join(seq)\n \n \ndef create_secondary_structure(pdb_as_text,residues):\n ''\n \n resids=[r.locator()for r in residues]\n helix_header=[]\n strand_header=[]\n sec_str=['C'for _ in range(len(resids))]\n \n for line in pdb_as_text.split(\"\\n\"):\n  if line[0:5]==\"HELIX\":helix_header.append(line)\n  elif line[0:5]==\"SHEET\":strand_header.append(line)\n  \n for helix_line in helix_header:\n \n \n \n \n  chain_from=helix_line[19]\n  residue_id_from=int(from_string(helix_line,21,25,-1))\n  insert_from=helix_line[25]\n  residue_id_to=int(from_string(helix_line,33,37,-1))\n  chain_to=helix_line[31]\n  insert_to=helix_line[37]\n  l_from=\"%c%d%c\"%(chain_from,residue_id_from,insert_from)\n  l_to=\"%c%d%c\"%(chain_to,residue_id_to,insert_to)\n  \n  for pos in range(resids.index(l_from),resids.index(l_to)+1):\n   sec_str[pos]='H'\n   \n for sheet_line in strand_header:\n \n \n \n \n \n  chain_from=sheet_line[21]\n  residue_id_from=int(from_string(sheet_line,22,26,-1))\n  insert_from=sheet_line[26]\n  residue_id_to=int(from_string(sheet_line,33,37,-1))\n  chain_to=sheet_line[32]\n  insert_to=sheet_line[37]\n  \n  l_from=\"%c%d%c\"%(chain_from,residue_id_from,insert_from)\n  l_to=\"%c%d%c\"%(chain_to,residue_id_to,insert_to)\n  \n  for pos in range(resids.index(l_from),resids.index(l_to)+1):\n   sec_str[pos]='E'\n   \n return ''.join(sec_str)\n \n \ndef detect_bonds(a_chain):\n ''\n\n\n\n\n \n \n if len(vdw_interatomic_distances)==0:prepare_vdw_interatomic_distances()\n bonds=[]\n for ri in a_chain.residues:\n  iid=ri.res_id\n  for rj in a_chain.residues:\n   if abs(iid -rj.res_id)>1:continue\n   for ai in ri.atoms:\n    x=ai.x\n    y=ai.y\n    z=ai.z\n    for aj in rj.atoms:\n     if ai !=aj:\n      r=x -aj.x\n      r2=r *r\n      if r2 >5.0:continue\n      r=y -aj.y\n      r2 +=r *r\n      if r2 >5.0:continue\n      r=z -aj.z\n      r2 +=r *r\n      if r2 <vdw_interatomic_distances[ai.element+aj.element]:\n       b=Bond(ai,aj,\"1\")\n       bonds.append(b)\n       \n return bonds\n \n \ndef prepare_vdw_interatomic_distances():\n ''\n \n \n for ei in vdw_atomic_radii:\n  ri=vdw_atomic_radii[ei]\n  for ej in vdw_atomic_radii:\n   r=vdw_atomic_radii[ej]+ri\n   vdw_interatomic_distances[ei+ej]=r *r *0.4\n", ["visualife.data", "visualife.utils.text_utils"]], "visualife.data.read_mol": [".py", "import sys\nfrom visualife.data import *\n\ndef parse_mol_data(mol_as_txt):\n ''\n \n \n llist=[]\n for line in mol_as_txt.splitlines():\n  llist.append(line.split())\n  \n n_atoms=int(llist[3][0])\n n_bonds=int(llist[3][1])\n \n m=Molecule()\n for i in range(n_atoms):\n  name=llist[i+4][3]\n  x=float(llist[i+4][0])\n  y=float(llist[i+4][1])\n  z=float(llist[i+4][2])\n  m.add_atom(Atom([x,y,z,i+1,name,\" \"]))\n  \n for j in range(n_bonds):\n  atom1=m.atoms[int(llist[j+n_atoms+4][0])-1]\n  atom2=m.atoms[int(llist[j+n_atoms+4][1])-1]\n  type=int(llist[j+n_atoms+4][2])\n  b=Bond(atom1,atom2,type)\n  m.add_bond(b)\n  \n return m\n \nif __name__ ==\"__main__\":\n\n inpt=open(sys.argv[1]).read()\n m=parse_mol_data(inpt)\n for a in m.atoms:print(a)\n for b in m.bonds:print(b)\n", ["sys", "visualife.data"]], "visualife.data.read_pdb": [".py", "''\n\n\nfrom visualife.data import Atom,Residue,Chain,Structure\n\n\ndef parse_pdb_data(pdb_as_text,**kwargs):\n\n ''\n\n\n\n\n\n\n\n\n\n\n \n if_hetatoms=kwargs.get(\"skip_heteroatoms\",False )\n if_parse_atoms=kwargs.get(\"parse_atoms\",True )\n structures=[]\n for line in pdb_as_text.split(\"\\n\"):\n  if line[0:5]==\"MODEL\":\n   s=Structure()\n   structures.append(s)\n  if line[0:2]!='AT'and line[0:4]!='HETA':continue\n  if if_hetatoms and line[0:4]=='HETA':continue\n  line=line.strip()\n  rname=line[17:20]\n  chainid=line[21]\n  resid=int(line[23:26].strip())\n  res_alt_loc=line[26]\n  \n  if len(structures)==0:\n   s=Structure()\n   structures.append(s)\n  else :s=structures[-1]\n  \n  if len(s.chains)==0:\n   c=Chain(chainid)\n   s.chains.append(c)\n   c.owner=s\n  elif s.chains[-1].chain_id !=chainid:\n   c=Chain(chainid)\n   s.chains.append(c)\n   c.owner=s\n  else :c=s.chains[-1]\n  \n  if len(c.residues)==0:\n   r=Residue(rname,resid,res_alt_loc)\n   c.residues.append(r)\n   r.owner=c\n   s.residues.append(r)\n  elif r.res_id !=resid or (r.alt_loc !=res_alt_loc and r.res_id ==resid):\n   r=Residue(rname,resid,res_alt_loc)\n   c.residues.append(r)\n   r.owner=c\n   s.residues.append(r)\n  else :r=c.residues[-1]\n  \n  if if_parse_atoms:\n   a=parse_pdb_atom(line)\n   structures[-1].atoms.append(a)\n   r.atoms.append(a)\n   a.owner=r\n   \n return structures\n \n \ndef parse_pdb_atom(atom_line):\n ''\n\n\n\n\n\n\n \n atom_number=int(atom_line[6:11].strip())\n x_position=float(atom_line[30:38].strip())\n y_position=float(atom_line[38:47].strip())\n z_position=float(atom_line[47:54].strip())\n atom_name=atom_line[12:16].strip()\n atom_alt_loc=atom_line[16]\n return Atom([x_position,y_position,z_position,atom_number,atom_name,atom_alt_loc])\n \n \ndef write_pdb_atom(atom,res_name=\"UNK\",chain_id='X'):\n ''\n\n\n\n\n \n return \"HETATM%5d %4s %s %c   1    %8.3f%8.3f%8.3f  1.00  0.00           %2s\"%\\\n (atom.id,atom.name,res_name,chain_id,atom.x,atom.y,atom.z,atom.element)\n \n", ["visualife.data"]], "visualife.data.read_sequences": [".py", "''\n\nimport re\n\n\ndef read_clustal(input_text,max_fields=3):\n ''\n\n\n\n\n\n \n seqdic={}\n input_text=input_text.split('\\n')\n for line in input_text:\n  tokens=line.split()\n  if len(tokens)>max_fields or len(tokens)<2:continue\n  if not re.match(\"[a-zA-Z\\-_]\",tokens[1]):continue\n  if tokens[0]in seqdic:\n   z=seqdic[tokens[0]]\n   z=z+tokens[1]\n   seqdic[tokens[0]]=z\n  else :\n   seqdic[tokens[0]]=tokens[1]\n output=[]\n for k,v in seqdic.items():\n  output.append({\"description\":k,\"sequence\":seqdic[k].replace('.','-').replace('~','-')})\n return output\n \n \ndef read_msf(input_text):\n ''\n\n\n\n\n \n return read_clustal(input_text,2)\n \n \ndef read_fasta(input_text):\n ''\n\n\n\n\n\n\n\n\n \n seqdic=[]\n last_header=\"\"\n last_seq=\"\"\n for line in input_text.split('\\n'):\n  if len(line)>1 and line[0]=='>':\n   if len(last_header)>0:\n    seqdic.append({\"description\":last_header,\"sequence\":last_seq})\n    last_seq=\"\"\n   last_header=line[1:]\n  else :\n   if len(line)>2:\n    last_seq +=line\n if last_header not in seqdic:\n  seqdic.append({\"description\":last_header,\"sequence\":last_seq})\n  \n return seqdic\n \n", ["re"]], "visualife.data.Residue": [".py", "class Residue:\n ''\n \n def __init__(self,rname,resid,icode=' '):\n  self.__res_name=rname\n  self.__res_id=resid\n  self.__alt_loc=icode\n  self.__atoms=[]\n  self.__owner=None\n  \n def __str__(self):\n  return \"%s %d\"%(self.__res_name,self.__res_id)\n  \n @property\n def res_name(self):\n  return self.__res_name\n  \n @res_name.setter\n def res_name(self,new_name):\n  self.__res_name=new_name\n  \n @property\n def atoms(self):\n  return self.__atoms\n  \n @property\n def res_id(self):\n  return self.__res_id\n  \n @res_id.setter\n def res_id(self,new_id):\n  self.__res_id=new_id\n  \n @property\n def alt_loc(self):\n  return self.__alt_loc\n  \n @alt_loc.setter\n def alt_loc(self,alt_loc):\n  self.__alt_loc=alt_loc\n  \n @property\n def owner(self):\n  return self.__owner\n  \n @owner.setter\n def owner(self,new_owner):\n  self.__owner=new_owner\n  \n def locator(self):\n  ''\n\n\n  \n  return \"%c%d%c\"%(self.owner.chain_id if self.owner else \" \",self.res_id,self.alt_loc)\n", []], "visualife.data.ScoreFile": [".py", "from sys import argv,stderr,stdout\nimport io\n\n\nclass ScoreFile:\n ''\n\n\n\n\n \n \n field_width=8\n \n def __init__(self,input_file:str=None ,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__annotated_sequence=None\n  self.__sequence=None\n  self.__columns={}\n  self.__n_rows=0\n  self.__skip_from_facs=[]\n  self.__rename_column=[]\n  self.__column_names=[]\n  self.__tag_to_index_map={}\n  \n  if \"columns\"in kwargs:\n   self.__column_names.extend(kwargs[\"columns\"])\n   for c in self.__column_names:\n    self.__columns[c]=[]\n  if \"skip_columns\"in kwargs:\n   for col_name in kwargs[\"skip_columns\"]:self.__skip_from_facs.append(col_name)\n  if \"rename_columns\"in kwargs:\n   for pair in kwargs[\"rename_columns\"]:self.__rename_column.append(pair)\n  if input_file:\n   if input_file.endswith('.fasc'):\n    self.read_fasc_file(input_file)\n   else :\n    self.read_score_file(input_file)\n    \n @property\n def n_rows(self):\n  ''\n\n\n\n  \n  return self.__n_rows\n  \n def detect_pdb_name_column(self,structure_names=[\"protein\",\"tag\",\"decoy\",\"description\"]):\n \n  for col_name in self.__column_names:\n   for good_name in structure_names:\n    if col_name.find(good_name)>=0:\n     return col_name\n  return None\n  \n def read_score_file(self,fname):\n  ''\n\n\n\n  \n  \n  if fname.find('\\n')>0:\n   stream=io.StringIO(fname)\n  else :\n   stderr.write(\"Reading in \"+fname+\"\\n\")\n   stream=open(fname)\n  self.__read_score_file_data(stream)\n  \n def column(self,col_name):\n  ''\n\n\n\n  \n  return self.__columns[col_name]\n  \n def is_relevant_column(self,col_name):\n  ''\n  \n  val=self.column(col_name)[0]\n  for i in range(1,len(self.column(col_name))):\n   if val !=self.column(col_name)[i]:\n    return True\n  return False\n  \n def add_row(self,row):\n  ''\n\n\n\n  \n  if len(row)!=len(self.__column_names):\n   raise Exception(\"wrong number of data in a given row!\")\n   \n  for i in range(len(row)):\n   self.__columns[self.__column_names[i]].append(row[i])\n   \n  self.__tag_to_index_map[self.__columns['tag'][-1]]=self.__n_rows\n  self.__n_rows +=1\n  \n def replace_value(self,column_name,row_tag,new_value):\n  ''\n\n\n\n\n\n\n\n\n  \n  i=self.find_row(row_tag)\n  self.__columns[column_name][i]=new_value\n  \n def row(self,index):\n  ''\n\n\n  \n  r=[]\n  for i in range(len(self.__column_names)):\n   r.append(self.__columns[self.__column_names[i]][index])\n  return r\n  \n def merge_in(self,other_sf):\n  ''\n\n\n\n\n\n  \n  for col_name in other_sf.column_names():\n   if col_name not in self.__column_names:\n    source_column=other_sf.column(col_name)\n    destination_col=[0 for v in other_sf.column(col_name)]\n    for other_idx,tag in enumerate(other_sf.column(\"tag\")):\n     idx=self.find_row(tag)\n     if idx >=0:\n      destination_col[idx]=source_column[other_idx]\n    self.__columns[col_name]=destination_col\n    self.__column_names.append(col_name)\n    \n def find_row(self,tag):\n  ''\n\n\n  \n  return self.__tag_to_index_map.get(tag,-1)\n  \n def column_names(self):\n  ''\n\n  \n  return self.__column_names\n  \n def write(self,fname):\n  ''\n\n\n\n  \n  \n  if fname is None :\n   file=stdout\n  else :\n   if isinstance(fname,str):\n    file=open(fname,\"w\")\n   else :\n    file=fname\n  if self.__sequence is not None :\n   file.write(\"SEQUENCE: \"+self.__sequence+\"\\n\")\n  file.write(\"SCORE:\")\n  for col_name in self.column_names():\n   fmt=\" %\"+str(ScoreFile.field_width)+\"s\"\n   file.write(fmt %col_name)\n  file.write(\"\\n\")\n  for i in range(self.__n_rows):\n   file.write(\"SCORE:\")\n   for col_name in self.column_names():\n    v=self.__columns[col_name][i]\n    if isinstance(v,int):\n     fmt=\" %\"+str(ScoreFile.field_width)+\"d\"\n     file.write(fmt %v)\n    elif isinstance(v,float):\n     fmt=\" %\"+str(ScoreFile.field_width)+\".2f\"\n     file.write(fmt %v)\n    else :\n     fmt=\" %\"+str(ScoreFile.field_width)+\"s\"\n     file.write(fmt %v)\n   file.write(\"\\n\")\n   \n def read_fasc_file(self,fname):\n  ''\n\n\n\n  \n  data=[]\n  for line in open(fname):data.append(eval(line.strip()))\n  for col_name in data[0].keys():\n   if col_name not in self.__skip_from_facs:\n    self.__columns[col_name]=[]\n    self.__column_names.append(col_name)\n  for d in data:\n   self.__n_rows +=1\n   for col_name in self.column_names():\n    if col_name not in self.__skip_from_facs:\n     self.__columns[col_name].append(d[col_name])\n     \n  self.__rename_columns()\n  \n def __read_score_file_data(self,file):\n \n  line=file.readline()\n  while not line.startswith(\"SCORE:\"):\n   if line.startswith(\"SEQUENCE\"):\n    tokens=line.split()\n    if len(tokens)>1:self.__sequence=tokens[1]\n   if line.startswith(\"ANNOTATED SEQUENCE:\"):\n    tokens=line.split()\n    if len(tokens)>1:self.__annotated_sequence=tokens[2]\n   line=file.readline()\n  col_names=line.strip().split()[1:]\n  for col_name in col_names:\n   if col_name not in self.__skip_from_facs:\n    self.__columns[col_name]=[]\n    self.__column_names.append(col_name)\n  for line in file:\n   tokens=line.strip().split()[1:]\n   self.__n_rows +=1\n   for key,val in zip(col_names,tokens):\n    if key not in self.__skip_from_facs:\n     try :\n      self.__columns[key].append(int(val))\n     except :\n      try :\n       self.__columns[key].append(float(val))\n      except :\n       self.__columns[key].append(val)\n       \n  self.__rename_columns()\n  \n  \n  i=0\n  tag_column_name=self.detect_pdb_name_column()\n  if tag_column_name:\n   for tag in self.__columns[tag_column_name]:\n    self.__tag_to_index_map[tag]=i\n    i +=1\n  else :\n   print(\"No column with pdb name or unknown column name for tag, description, decoy etc.\")\n   \n def __rename_columns(self):\n  for pair in self.__rename_column:\n   if pair[0]in self.__columns:\n    self.__columns[pair[1]]=self.__columns[pair[0]]\n    del (self.__columns[pair[0]])\n  for i in range(len(self.__column_names)):\n   for pair in self.__rename_column:\n    if self.__column_names[i]==pair[0]:\n     self.__column_names[i]=pair[1]\n     \n     \ndef filter_score_file(scorefile:ScoreFile,filter,column_name:str):\n ''\n\n\n\n\n\n\n\n\n \n \n new_sc=ScoreFile(columns=scorefile.column_names())\n for ir in range(scorefile.n_rows):\n  if filter(scorefile.column(column_name)[ir]):\n   new_sc.add_row(scorefile.row(ir))\n   \n return new_sc\n \n \ndef combine_score_files(*args,**kwargs):\n ''\n\n\n\n\n \n sf=ScoreFile(**kwargs)\n if args[0].endswith(\".fasc\"):\n  sf.read_fasc_file(args[0])\n else :\n  sf.read_score_file(args[0])\n for fname in args[1:]:\n  sfi=ScoreFile(**kwargs)\n  if fname.endswith(\".fasc\"):\n   sfi.read_score_file(fname)\n  else :\n   sfi.read_score_file(fname)\n  sf.merge_in(sfi)\n return sf\n \n \nif __name__ ==\"__main__\":\n\n sf=combine_score_files(\"out-2.fsc\",*argv[1:],\n skip_columns=[\"pdb_name\",\"decoy\",\"nstruct\",\"angle_constraint\",\"atom_pair_constraint\",\"chainbreak\",\n \"dslf_ca_dih\",\"dslf_cs_ang\",\"dslf_ss_dih\",\"dslf_ss_dst\",\"ref\",\"dihedral_constraint\",\n \"model\",\"rmsd\"],\n rename_columns=[(\"filename\",\"tag\")])\n sf.write(\"out.fsc\")\n", ["io", "sys"]], "visualife.data.Structure": [".py", "class Structure:\n ''\n\n \n \n def __init__(self):\n  ''\n  self.__atoms=[]\n  self.__residues=[]\n  self.__chains=[]\n  \n @property\n def atoms(self):\n  return self.__atoms\n  \n @property\n def chains(self):\n  return self.__chains\n  \n @property\n def residues(self):\n  return self.__residues\n  \n def find_chain(self,code):\n  ''\n\n\n\n  \n  for c in self.__chains:\n   if c.chain_id ==code:return c\n  return None\n  \n", []], "visualife.data": [".py", "from visualife.data.Bond import Bond\nfrom visualife.data.Atom import Atom\nfrom visualife.data.Chain import Chain\nfrom visualife.data.Residue import Residue\nfrom visualife.data.Molecule import Molecule\nfrom visualife.data.Structure import Structure\n\nfrom visualife.data.HSSP import HSSP\n\nfrom visualife.data.read_mol import parse_mol_data\n\nfrom visualife.data.pdb_utils import detect_bonds,vdw_atomic_radii,create_secondary_structure,create_sequence,\\\namino_acid_code1_to_code3,amino_acid_code3_to_code1,kd_hydrophobicity\nfrom visualife.data.read_pdb import parse_pdb_data,parse_pdb_atom,write_pdb_atom\nfrom visualife.data.read_sequences import read_clustal,read_msf,read_fasta\n\nfrom visualife.data.ScoreFile import ScoreFile,combine_score_files,filter_score_file\n", ["visualife.data.Atom", "visualife.data.Bond", "visualife.data.Chain", "visualife.data.HSSP", "visualife.data.Molecule", "visualife.data.Residue", "visualife.data.ScoreFile", "visualife.data.Structure", "visualife.data.pdb_utils", "visualife.data.read_mol", "visualife.data.read_pdb", "visualife.data.read_sequences"], 1], "visualife.diagrams.Diagram": [".py", "#! /usr/bin/env python\n\nimport math\nfrom copy import deepcopy\nfrom visualife.core.styles import make_darker,mix_colors,rgb_to_hex\n\ntry :\n from browser import document\nexcept :document=None\n\n\nbase_color=\"#6AB0DE\"\nstroke_color=make_darker(base_color,0.2)\nstroke_width=2\nfill_color=mix_colors(\"white\",base_color,0.8)\nhighlighted_color=mix_colors(\"red\",base_color,0.15)\n\ndefault_node_style={'stroke_width':'%dpx'%stroke_width,\n'stroke':stroke_color,\n'fill':fill_color\n}\n\ndefault_text_style={'stroke_width':'0px',\n'fill':'black',\n'text_anchor':'middle',\n'alignment_baseline':'middle'\n}\n\ndefault_segment_length=30\n\n\ndef repack_node_style_args(node_style_dict,text_style_dict,**attrs):\n ''\n\n\n\n\n\n\n\n\n\n\n \n \n out=dict()\n out[\"text_style\"]=dict(**text_style_dict)\n if \"text_style\"in attrs:\n  for k,v in attrs[\"text_style\"].items():out[\"text_style\"][k]=v\n  \n out[\"node_style\"]=dict(**node_style_dict)\n if \"node_style\"in attrs:\n  for k,v in attrs[\"node_style\"].items():out[\"node_style\"][k]=v\n  \n for k,v in attrs.items():\n  if k !=\"node_style\"and k !=\"text_style\":\n   out[\"node_style\"][k]=v\n   \n return out\n \n \nclass Point:\n ''\n\n\n\n\n\n \n \n def __init__(self,x,y):\n  ''\n\n\n\n  \n  self.__x=x\n  self.__y=y\n  \n @property\n def x(self):return self.__x\n \n @x.setter\n def x(self,x):self.__x=x\n \n @property\n def y(self):return self.__y\n \n @y.setter\n def y(self,y):self.__y=y\n \n def __str__(self):\n  ''\n\n\n  \n  return \"%.1f %.1f\"%(self.x,self.y)\n  \n def __add__(self,rhs):\n  ''\n\n\n\n  \n  return Point(self.x+rhs.x,self.y+rhs.y)\n  \n def __iadd__(self,rhs):\n  ''\n\n\n\n  \n  self.x +=rhs.x\n  self.y +=rhs.y\n  return self\n  \n def __sub__(self,rhs):\n  ''\n  return Point(self.x -rhs.x,self.y -rhs.y)\n  \n def distance_to(self,another_point):\n  ''\n\n\n\n  \n  d=another_point.x -self.x\n  d2=d *d\n  d=another_point.y -self.y\n  d2 +=d *d\n  return math.sqrt(d2)\n  \n  \ndef average_point(points):\n ''\n\n\n\n\n\n \n p=Point(0,0)\n for pi in points:\n  p.x +=pi.x\n  p.y +=pi.y\n p.x /=len(points)\n p.y /=len(points)\n return p\n \n \nclass NodeBase(Point):\n\n def __init__(self,id,x,y):\n  ''\n\n\n\n\n\n\n\n\n\n\n  \n  super().__init__(x,y)\n  self.__id=id\n  if document:\n   self.__fill=None\n   self.__is_highlighted=False\n   \n @property\n def left(self):\n  ''\n\n\n  \n  raise NotImplementedError(\"the *left* property is not implemented\")\n  \n @property\n def right(self):\n  ''\n\n\n  \n  raise NotImplementedError(\"the *right* property is not implemented\")\n  \n @property\n def top(self):\n  ''\n\n\n  \n  raise NotImplementedError(\"the *top* property is not implemented\")\n  \n @property\n def bottom(self):\n  ''\n\n\n  \n  raise NotImplementedError(\"the *bottom* property is not implemented\")\n  \n @property\n def id(self):\n  ''\n\n\n  \n  return self.__id\n  \n @property\n def text_id(self):\n  ''\n\n\n  \n  return self.id+\"-text\"\n  \n @property\n def shape_id(self):\n  ''\n\n\n\n  \n  return self.id+\"-box\"\n  \n @property\n def width(self):\n  ''\n\n\n\n\n  \n  return self.right.x -self.left.x\n  \n @property\n def height(self):\n  ''\n\n\n\n\n  \n  return self.bottom.y -self.top.y\n  \n def draw(self,viewport,**kwargs):\n  ''\n\n\n\n\n\n  \n  raise NotImplementedError(\"the *bottom* property is not implemented\")\n  \n def highlight(self,state=True ):\n  ''\n\n\n\n\n\n\n\n  \n  if document:\n   if state and not self.__is_highlighted:\n    self.__fill=rgb_to_hex(document[self.shape_id].style[\"fill\"])\n    hi_col=mix_colors(\"red\",self.__fill,0.15)\n    document[self.shape_id].style[\"fill\"]=str(hi_col)\n    self.__is_highlighted=True\n   if not state and self.__is_highlighted:\n    document[self.shape_id].style[\"fill\"]=str(self.__fill)\n    self.__is_highlighted=False\n    \nclass DotNode(NodeBase):\n\n def __init__(self,id,x,y,r,**attrs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  super().__init__(id,x,y)\n  self.__attrs=attrs\n  self.__r=r\n  \n def draw(self,viewport,**kwargs):\n  ''\n\n\n\n  \n  viewport.circle(self.id,self.x,self.y,r=self.r,**kwargs.get(\"node_style\",default_node_style))\n  \n @property\n def r(self):\n  ''\n\n\n  \n  return self.__r\n  \n @property\n def left(self):\n  ''\n\n\n  \n  return Point(self.x -self.r,self.y)\n  \n @property\n def right(self):\n  ''\n\n\n  \n  return Point(self.x+self.r,self.y)\n  \n @property\n def top(self):\n  ''\n\n\n  \n  return Point(self.x,self.y -self.r)\n  \n @property\n def bottom(self):\n  ''\n\n\n  \n  return Point(self.x,self.y+self.r)\n  \n  \nclass RectNode(NodeBase):\n\n def __init__(self,id,text,xc,yc,w,h,**attrs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  super().__init__(id,xc,yc)\n  self.__attrs=attrs\n  self.__text=text\n  self.__w=w\n  self.__h=h\n  \n def draw(self,viewport,**kwargs):\n  ''\n\n\n\n  \n  \n  params=repack_node_style_args(default_node_style,default_text_style,**self.__attrs)\n  params=repack_node_style_args(params[\"node_style\"],params[\"text_style\"],**kwargs)\n  params[\"node_style\"][\"filter\"]=\"shadow\"\n  x=self.x -self.w /2.0\n  y=self.y -self.h /2.0\n  viewport.rect(self.shape_id,x,y,self.__w,self.__h,**params[\"node_style\"])\n  viewport.text(self.text_id,self.x,self.y,self.__text,**params[\"text_style\"])\n  \n @property\n def w(self):\n  ''\n\n\n  \n  return self.__w\n  \n @property\n def h(self):\n  ''\n\n\n  \n  return self.__h\n  \n @property\n def left(self):\n  ''\n\n\n  \n  return Point(self.x -self.__w /2.0,self.y)\n  \n @property\n def right(self):\n  ''\n\n\n  \n  return Point(self.x+self.__w /2,self.y)\n  \n @property\n def top(self):\n  ''\n\n\n  \n  return Point(self.x,self.y -self.h /2)\n  \n @property\n def bottom(self):\n  ''\n\n\n  \n  return Point(self.x,self.y+self.__h /2)\n  \n  \nclass DiamondNode(RectNode):\n\n def __init__(self,id,text,xc,yc,w,**attrs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  super().__init__(id,text,xc -w /2.0,yc -w /2.0,w,w)\n  self.__attrs=attrs\n  \n def draw(self,viewport,**kwargs):\n  ''\n\n\n\n  \n  \n  super(DiamondNode,self).draw(viewport,**kwargs,angle=45)\n  \n @property\n def left(self):\n  ''\n\n\n  \n  return Point(self.x -self.w *math.sqrt(2)/2.0,self.y)\n  \n @property\n def right(self):\n  ''\n\n\n  \n  return Point(self.x+self.w *math.sqrt(2)/2.0,self.y)\n  \n @property\n def top(self):\n  ''\n\n\n  \n  return Point(self.x,self.y -self.w *math.sqrt(2)/2.0)\n  \n @property\n def bottom(self):\n  ''\n\n\n  \n  return Point(self.x,self.y+self.w *math.sqrt(2)/2.0)\n  \n  \nclass Connector(NodeBase):\n\n def __init__(self,id,*points,**attrs):\n  ''\n\n\n\n\n\n\n  \n  super().__init__(id,average_point(points).x,average_point(points).y)\n  self.points=points\n  self.__attrs=attrs\n  \n def draw(self,viewport,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  params=repack_node_style_args(default_node_style,default_text_style,**self.__attrs)\n  params=repack_node_style_args(params[\"node_style\"],params[\"text_style\"],**kwargs)\n  \n  ptx=[(p.x,p.y)for p in self.points]\n  marker=None\n  if \"mark\"in params[\"node_style\"]:\n   if params[\"node_style\"][\"mark\"]==\"inheritance\":marker=\"inheritance_marker\"\n   elif params[\"node_style\"][\"mark\"]==\"composition\":marker=\"composition_marker\"\n   elif params[\"node_style\"][\"mark\"]==\"aggregation\":marker=\"aggregation_marker\"\n   \n   if marker:\n    if \"reverse_connector\"in params[\"node_style\"]:\n     params[\"node_style\"][\"marker_start\"]=marker+\"_reversed\"\n     print(\"params \",params)\n     \n    else :\n     params[\"node_style\"][\"marker_end\"]=marker\n  params[\"node_style\"][\"fill\"]=\"none\"\n  viewport.polyline(self.id,*ptx,**params[\"node_style\"])\n  \n  \nclass Diagram:\n __composition_marker=[['M',0,0],['L',10,5],['L',20,0],['L',10,-5],['z']]\n __inherit_marker=[['M',0,-5],['L',10,0],['L',0,5],['z']]\n \n def __init__(self,viewport,id,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__viewport=viewport\n  self.__nodes={}\n  self.__id=id\n  self.__node_style_defaults=default_node_style\n  self.__text_style_defaults=default_text_style\n  self.__last_id=0\n  self.__autoconnect=kwargs.get(\"autoconnect\",True )\n  \n  self.__marker_size=10\n  viewport.start_marker(\"inheritance_marker\",\"-10 -10 20 20\",10,0,self.__marker_size,self.__marker_size)\n  viewport.path(\"inherit_arrow_path\",Diagram.__inherit_marker,fill=\"white\",\n  stroke=default_node_style[\"stroke\"],stroke_width=default_node_style[\"stroke_width\"])\n  viewport.close_marker()\n  \n  viewport.start_marker(\"composition_marker\",\"-10 -10 30 30\",20,0,self.__marker_size,self.__marker_size)\n  viewport.path(\"composition_marker_path\",Diagram.__composition_marker,fill=default_node_style[\"stroke\"],\n  stroke=default_node_style[\"stroke\"],stroke_width=default_node_style[\"stroke_width\"])\n  viewport.close_marker()\n  \n  viewport.start_marker(\"aggregation_marker\",\"-10 -10 30 30\",20,0,self.__marker_size,self.__marker_size)\n  viewport.path(\"aggregation_marker_path\",Diagram.__composition_marker,fill=\"white\",\n  stroke=default_node_style[\"stroke\"],stroke_width=default_node_style[\"stroke_width\"])\n  viewport.close_marker()\n  \n  viewport.start_marker(\"inheritance_marker_reversed\",\"-10 -10 20 20\",10,0,self.__marker_size,self.__marker_size,\"auto-start-reverse\")\n  viewport.path(\"inherit_arrow_path_r\",Diagram.__inherit_marker,fill=\"white\",\n  stroke=default_node_style[\"stroke\"],stroke_width=default_node_style[\"stroke_width\"])\n  viewport.close_marker()\n  \n  viewport.start_marker(\"composition_marker_reversed\",\"-10 -10 30 30\",20,0,self.__marker_size,self.__marker_size,\"auto-start-reverse\")\n  viewport.path(\"composition_marker_path_r\",Diagram.__composition_marker,fill=default_node_style[\"stroke\"],\n  stroke=default_node_style[\"stroke\"],stroke_width=default_node_style[\"stroke_width\"])\n  viewport.close_marker()\n  \n  viewport.start_marker(\"aggregation_marker_reversed\",\"-10 -10 30 30\",20,0,self.__marker_size,self.__marker_size,\"auto-start-reverse\")\n  viewport.path(\"aggregation_marker_path_r\",Diagram.__composition_marker,fill=\"white\",\n  stroke=default_node_style[\"stroke\"],stroke_width=default_node_style[\"stroke_width\"])\n  viewport.close_marker()\n  viewport.add_filter(\"shadow\")\n  \n def __getitem__(self,node_id):\n  ''\n\n\n\n  \n  return self.__nodes[node_id]\n  \n def add_node(self,node,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__only_add(node)\n  to_connect=[]\n  if \"center_at\"in kwargs:\n   b=kwargs[\"center_at\"]\n   node.y=b.y\n   node.x=b.x\n   return None\n  elif \"below\"in kwargs:\n   b=kwargs[\"below\"].bottom\n   dy=kwargs.get(\"dy\",default_segment_length)\n   node.y=b.y+float(dy)+node.height /2.0\n   node.x=b.x\n   to_connect=[b,node.top]\n  elif \"right_below\"in kwargs:\n   b=kwargs[\"right_below\"].right\n   dy=kwargs.get(\"dy\",default_segment_length)\n   node.y=b.y+float(dy)+node.height /2.0\n   node.x=b.x -node.width /2.0\n   to_connect=[b,node.top]\n  elif \"left_below\"in kwargs:\n   b=kwargs[\"left_below\"].left\n   dy=kwargs.get(\"dy\",default_segment_length)\n   node.y=b.y+float(dy)+node.height /2.0\n   node.x=b.x+node.width /2.0\n   to_connect=[b,node.top]\n  elif \"above\"in kwargs:\n   b=kwargs[\"above\"].top\n   dy=kwargs.get(\"dy\",default_segment_length)\n   node.y=b.y -float(dy)-node.height /2.0\n   node.x=b.x\n   to_connect=[b,node.bottom]\n  elif \"right_of\"in kwargs:\n   dx=kwargs.get(\"dx\",default_segment_length)\n   b=kwargs[\"right_of\"].right\n   node.x=b.x+float(dx)+node.width /2.0\n   node.y=b.y\n   to_connect=[b,node.left]\n  elif \"left_of\"in kwargs:\n   dx=kwargs.get(\"dx\",default_segment_length)\n   b=kwargs[\"left_of\"].left\n   node.x=b.x -float(dx)-node.width /2.0\n   node.y=b.y\n   to_connect=[b,node.right]\n   \n  if \"shift_by\"in kwargs:\n   node +=kwargs[\"shift_by\"]\n   \n  if len(to_connect)>0 and kwargs.get(\"autoconnect\",self.__autoconnect):\n   id=self.__id+\":\"+str(self.__last_id)\n   self.__last_id +=1\n   c=Connector(id,*to_connect,**dict(**default_node_style,**kwargs))\n   self.__only_add(c)\n   return c\n   \n def draw(self,viewport,**kwargs):\n  ''\n\n\n  \n  for n in self.__nodes.values():\n   n.draw(viewport,**kwargs)\n   \n @property\n def node_style(self):\n  ''\n\n\n\n\n\n  \n  return self.__node_style_defaults\n  \n @property\n def text_style(self):\n  ''\n\n\n\n\n\n  \n  return self.__text_style_defaults\n  \n @property\n def id(self):\n  ''\n\n\n\n  \n  return self.__id\n  \n def highlight(self,state=True ):\n  ''\n\n\n\n  \n  for n in self.__nodes.values():n.highlight(state)\n  \n def connect(self,*what,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n  \n  id=self.__id+\":\"+str(self.__last_id)\n  self.__last_id +=1\n  \n  if len(what)<2:return None\n  if len(what)>2:\n   c=Connector(id,*what,**dict(**default_node_style,**kwargs))\n   self.__only_add(c)\n   return c\n  else :\n   p_from=what[0]\n   p_to=what[1]\n   \n  if \"connect_xy\"in kwargs:\n   if p_from.left.distance_to(p_to.top)<p_from.right.distance_to(p_to.top):\n    connector=self.connect_xy(p_from.left,p_to.top)\n   else :\n    connector=self.connect_xy(p_from.right,p_to.top)\n  elif \"connect_yx\"in kwargs:\n   if p_to.left.distance_to(p_from.bottom)<p_to.right.distance_to(p_from.bottom):\n    connector=self.connect_yx(p_from.bottom,p_to.left)\n   else :\n    connector=self.connect_yx(p_from.bottom,p_to.right)\n  else :\n   c=Connector(id,*what,**dict(**default_node_style,**kwargs))\n   self.__only_add(c)\n   return c\n   \n  return connector\n  \n def connect_xy(self,start,stop,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  id=self.__id+\":\"+str(self.__last_id)\n  self.__last_id +=1\n  coords=[start,Point(stop.x,start.y),stop]\n  self.__only_add(Connector(id,*coords,**dict(**default_node_style,**kwargs)))\n  return self.__nodes[id]\n  \n def connect_yx(self,start,stop,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  \n  id=self.__id+\":\"+str(self.__last_id)\n  self.__last_id +=1\n  coords=[start,Point(start.x,stop.y),stop]\n  self.__only_add(Connector(id,*coords,**dict(**default_node_style,**kwargs)))\n  return self.__nodes[id]\n  \n def max_x(self):\n  ''\n\n\n  \n  \n  max_x=self.__nodes[0].bottom.x\n  for n in self.__nodes[1:]:max_x=max(max_x,n.bottom.x)\n  \n def max_y(self):\n  ''\n\n\n  \n  max_y=self.__nodes[0].bottom.y\n  for n in self.__nodes[1:]:\n   max_y=max(max_y,n.bottom.y)\n  return max_y\n  \n def __only_add(self,node):\n  self.__nodes[node.id]=node\n  \n", ["browser", "copy", "math", "visualife.core.styles"]], "visualife.diagrams.InteractiveDiagram": [".py", "#! /usr/bin/env python\n\nimport copy\nfrom visualife.diagrams.Diagram import *\n\n\nclass InteractiveNode(NodeBase):\n\n def __init__(self,node,code_snippet,**params):\n  ''\n\n\n\n  \n  \n  self.__code_snippet=code_snippet\n  self.next_command=None\n  self.__node=node\n  self.__lines=[]\n  if \"lines\"in params:\n   self.__lines.append(int(params[\"lines\"]))\n   \n def __str__(self):\n  ''\n\n\n  \n  return self.__code_snippet\n  \n @property\n def id(self):\n  return self.__node.id\n  \n @property\n def left(self):\n  return self.__node.left\n  \n @property\n def right(self):\n  return self.__node.right\n  \n @property\n def top(self):\n  return self.__node.top\n  \n @property\n def bottom(self):\n  return self.__node.bottom\n  \n @property\n def height(self):\n  return self.__node.height\n  \n @property\n def width(self):\n  return self.__node.width\n  \n @property\n def x(self):return self.__node.x\n \n @x.setter\n def x(self,x):self.__node.x=x\n \n @property\n def y(self):return self.__node.y\n \n @y.setter\n def y(self,y):self.__node.y=y\n \n @property\n def code_snippet(self):\n  ''\n\n\n  \n  return self.__code_snippet\n  \n @property\n def node(self):\n  ''\n\n\n  \n  return self.__node\n  \n def execute(self,global_variables,local_variables):\n  print(\"CODE to run: \",self.__code_snippet,global_variables,local_variables)\n  exec(self.__code_snippet,global_variables,local_variables)\n  return self.next_command\n  \n def draw(self,viewport,**kwargs):\n  self.__node.draw(viewport)\n  \n def highlight(self,state=True ):\n  self.__node.highlight(state)\n  \n  \nclass InteractiveCondition(InteractiveNode):\n\n def __init__(self,node,code_snippet,**params):\n  super().__init__(node,code_snippet,**params)\n  self.__true_command=None\n  self.__false_command=None\n  \n @property\n def true_command(self):\n  return self.__true_command\n  \n @true_command.setter\n def true_command(self,true_command):\n  self.__true_command=true_command\n  \n @property\n def false_command(self):\n  return self.__false_command\n  \n @false_command.setter\n def false_command(self,false_command):\n  self.__false_command=false_command\n  \n def execute(self,global_attrs):\n  result=eval(self.code_snippet,global_attrs)\n  self.next_command=self.__true_command if result else self.__false_command\n  return self.next_command\n  \n  \nclass InteractiveDiagram(Diagram):\n\n def __init__(self,viewport,id):\n  ''\n\n\n\n\n\n  \n  super().__init__(viewport,id)\n  self.__globals={}\n  self.__locals={}\n  self.__next_cmd=None\n  self.__start_cmd=None\n  self.__stop_cmd=None\n  self.__i_stop=0\n  \n @property\n def next_command(self):\n  ''\n\n\n\n  \n  return self.__next_cmd\n  \n def add_start(self,*location,**attrs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  if len(location)==2:\n   xc,yc=location[0],location[1]\n  else :\n   xc,yc=0,0\n  start=InteractiveNode(RectNode(\"start\",\"start\",xc,yc,80,30,**dict(node_style={\"rx\":20,\"ry\":20},**attrs)),\"True\",**attrs)\n  super(InteractiveDiagram,self).add_node(start,**attrs)\n  self.__start_cmd=start\n  return start\n  \n def add_stop(self,*location,**attrs):\n  ''\n\n\n\n\n\n\n\n\n\n\n  \n  if len(location)==2:\n   xc,yc=location[0],location[1]\n  else :\n   xc,yc=0,0\n  stop=InteractiveNode(RectNode(\"stop-\"+str(self.__i_stop),\"stop\",xc,yc,80,30,\n  **dict(node_style={\"rx\":20,\"ry\":20},**attrs)),\"True\",**attrs)\n  self.__i_stop +=1\n  super(InteractiveDiagram,self).add_node(stop,**attrs)\n  self.__stop_cmd=stop\n  return stop\n  \n def add_node(self,node,**attrs):\n  c=super().add_node(node,**attrs)\n  if \"follows\"in attrs:\n   attrs[\"follows\"].next_command=node\n  return c\n  \n def start(self):\n  self.highlight(False )\n  self.__next_cmd=self.__start_cmd\n  self.__next_cmd.highlight(True )\n  \n def next(self,if_debug=False ):\n  ''\n\n\n\n\n\n\n\n  \n  \n  self.__next_cmd.highlight(False )\n  if if_debug:print(\"entering next\",self.__next_cmd,self.__globals,self.__locals)\n  if self.__next_cmd ==self.__stop_cmd:return True\n  self.__next_cmd=self.__next_cmd.execute(self.__globals,self.__locals)\n  self.__next_cmd.highlight(True )\n  return False\n  \n def has_next(self):\n  ''\n\n\n  \n  return not self.__next_cmd ==self.__stop_cmd\n  \n def declare_variables(self,**kwargs):\n  for n,v in kwargs.items():\n   self.__locals[n]=v\n   \n def list_variables(self):\n  return self.__globals.keys()\n  \n def set_value(self,name,value):\n  self.__globals[name]=value\n  \n def get_value(self,name):\n  return self.__globals.get(name,\"\")\n  \n def globals_copy(self):\n  return copy.deepcopy(self.__globals)\n  \n def locals_copy(self):\n  return copy.deepcopy(self.__globals)\n", ["copy", "visualife.diagrams.Diagram"]], "visualife.diagrams": [".py", "from visualife.diagrams.Diagram import *\nfrom visualife.diagrams.InteractiveDiagram import *\n", ["visualife.diagrams.Diagram", "visualife.diagrams.InteractiveDiagram"], 1], "visualife.serverside.utils": [".py", "from visualife.data import ScoreFile,filter_score_file\n\n\n\ndef scorefile_to_json_dictionary(score_file_data,**kwargs):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n if not isinstance(score_file_data,ScoreFile):\n  sc_file=ScoreFile()\n  if len(score_file_data)>512:\n   good_data=score_file_data.decode('ASCII')\n   sc_file.read_score_file(good_data)\n  else :\n   sc_file.read_score_file(score_file_data)\n else :\n  sc_file=score_file_data\n  \n  \n filter=kwargs.get('filter',None )\n filter_by=kwargs.get('filter_by',None )\n if filter and filter_by:\n  sc_file=filter_score_file(sc_file,filter,filter_by)\n  \n column_names=[]\n columns={}\n rows=[]\n output={\"result\":\"OK\"}\n selected_columns=kwargs.get(\"selected_columns\",None )\n \n if_relevant=kwargs.get(\"relevant_only\",True )\n for column_name in sc_file.column_names():\n  if selected_columns and column_name in selected_columns:\n   column_names.append(column_name)\n   columns[column_name]=sc_file.column(column_name)\n  else :\n   if not if_relevant or sc_file.is_relevant_column(column_name):\n    column_names.append(column_name)\n    columns[column_name]=sc_file.column(column_name)\n if selected_columns:\n  output[\"column_names\"]=[col_name for col_name in selected_columns if col_name in column_names]\n else :\n  output[\"column_names\"]=column_names\n  \n  \n if kwargs.get(\"send_columns\",True ):\n  output[\"columns\"]=columns\n  \n  \n if kwargs.get(\"send_rows\",True ):\n  for i in range(sc_file.n_rows):\n   row=[]\n   for j in output[\"column_names\"]:\n    row.append(sc_file.column(j)[i])\n   rows.append(row)\n  output[\"rows\"]=rows\n return output\n", ["visualife.data"]], "visualife.serverside": [".py", "from visualife.serverside.utils import scorefile_to_json_dictionary\n", ["visualife.serverside.utils"], 1], "visualife.utils.html_utils": [".py", "from browser import html,document,ajax\nfrom visualife.utils.text_utils import substitute_template\n\ntooltip_style={\n'backgroundColor':'black',\n'color':'#fff',\n'textAlign':'center',\n'padding':'5px 0px',\n'borderRadius':'6px',\n'visibility':'hidden',\n'position':'fixed'\n}\n\ndef run_async_func(function,url=\"http://0.0.0.0:8000/\"):\n ajax.get(url,oncomplete=function)\n \n \ndef create_tooltip(id_text,tooltip_text,width,height):\n ''\n tooltip=html.DIV(tooltip_text,id=id_text,\n style={**tooltip_style,'height':height,'width':width})\n return tooltip\n \n \nclass MenuWidget:\n __menu_style=\"\"\"\n        .three_dots:after {\n            content: '\\\\2807';\n            font-size: 1.5em;\n        }\n        .box-shadow-menu {\n          position: relative;\n          padding-left: 1.25em;\n        }\n        .box-shadow-menu:before {\n          content: \"\";\n          position: absolute;\n          left: 0;\n          top: 0.25em;\n          width: 1em;\n          height: 0.15em;\n          background: black;\n          box-shadow: \n            0 0.25em 0 0 black,\n            0 0.5em 0 0 black;\n        }\n\n.Menu div ul li {\n    width: 30px;\n    background-color: white;\n}\n\n.Menu ul ul li { width: {%width%}px; }\n\n.Menu span.dropBottom, span.dropRight {\n    display: block;\n    box-shadow: inset 2px 0px 0px #222;\n    position: absolute;\n    left: 0px;\n    width: 100%;\n    height: 100%;\n    top: 0px;\n}\n\n.Menu span.dropBottom {\n    box-shadow: inset 0px 2px 0px #222;\n    position: absolute;\n    width: 100%;\n    bottom: 0px;\n}\n\n/* exclude border from the top-most menu level */\ndiv.Menu ul li { font-size: 120%; }\ndiv.Menu ul li a { padding: 0px; }\ndiv.Menu ul li span.dropBottom { box-shadow: inset 0px 0px 0px 0px; } \n\n.Menu ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.Menu ul ul {\n    opacity: 0;\n    position: absolute;\n    top: 160%;\n    visibility: hidden;\n    transition: all .4s ease;\n    -webkit-transition: all .4s ease;\n}\n\n.Menu ul ul ul { top: 0%; left: 160%; }\n\n.Menu ul ul li:hover > ul {\n    top: 0%;\n    left: 100%;\n    opacity: 1;\n    visibility: visible;\n}\n\n.Menu ul li:hover > ul {\n    opacity: 1; \n    background-color: rgba(255,255,255,0.8);\n    top: 100%;\n    visibility: visible;\n    border: 1px solid gray;\n}\n\n.Menu ul li { \n    float: left; \n    position: relative; \n    background-color: rgba(255,255,255,0.8);\n    cursor: pointer; \n    padding: 5px 15px;\n    list-style: none;\n}\n\n.Menu ul ul li { float: none; }\n\n.Menu ul a {\n    text-decoration: none;  \n    color: #000;\n    padding: 10px 15px;\n    text-align: center;\n    font: 13px Tahoma, Sans-serif;\n}\n\n.Menu ul ul li:hover { background-color: rgba(200,200,200,0.8); }\n\n    \"\"\"\n \n def __init__(self,element_id,dict_of_menu_items={},**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n  \n  self.__element_id=element_id\n  self.__dict_of_menu_items=dict_of_menu_items\n  \n  replacements={\"{%width%}\":str(kwargs.get(\"width\",170))}\n  document <=html.STYLE(substitute_template(MenuWidget.__menu_style,replacements))\n  \n  style=kwargs.get(\"style\",\"burger\")\n  self.__style=\"three_dots\"if style ==\"dots\"else \"box-shadow-menu\"\n  \n  if self.__dict_of_menu_items:\n   self.__create_widget()\n   \n  document[element_id].class_name +=\" Menu\"\n  \n def __create_widget(self):\n  ''\n  document[self.__element_id].innerHTML=\"\"\n  \n  ul1=html.UL(id=\"ul-1-\"+self.__element_id)\n  li1=MenuWidget.__create_item(\"\",None ,\"dropBottom\")\n  li1.class_name=self.__style\n  ul1 <=li1\n  li1 <=MenuWidget.__create_list(self.__dict_of_menu_items)\n  document[self.__element_id]<=ul1\n  \n @staticmethod\n def __create_item(menu_item,callback,span_class=\"\"):\n \n  li=html.LI(style={\"list-style\":\"none\",\"margin\":\"0px\"})\n  a=html.A(menu_item,id=menu_item,href=\"#\")\n  if callable(callback):\n   a.bind(\"click\",callback)\n  li <=a\n  if span_class !=\"\":\n   li <=html.SPAN(Class=span_class)\n   \n  return li\n  \n @staticmethod\n def __create_list(menu_items):\n \n  ul=html.UL()\n  for item,callback_or_submenu in menu_items.items():\n   if isinstance(callback_or_submenu,dict):\n    li=MenuWidget.__create_item(item,None ,\"dropRight\")\n    li <=MenuWidget.__create_list(callback_or_submenu)\n    ul <=li\n   else :\n    if callback_or_submenu ==\"\":callback_or_submenu=None\n    ul <=MenuWidget.__create_item(item,callback_or_submenu,\"\")\n    \n  return ul\n  \n  \n def add_menu_option(self,new_option,callback_or_submenu):\n  ''\n\n\n\n\n  \n  if new_option in self.__dict_of_menu_items:\n   print(\"Cannot add opion \",new_option,\". Option already exists in Menu\")\n   exit()\n  self.__dict_of_menu_items[new_option]=callback_or_submenu\n  \n def update_menu(self):\n  ''\n\n  \n  self.__create_widget()\n  \n def print_menu(self):\n  ''\n\n  \n  for opt in self.__dict_of_menu_items.keys():\n   print(opt,\" : \")\n   rest=self.__dict_of_menu_items[opt]\n   if isinstance(rest,dict):\n    for a in rest.keys():\n     print(\"\\t\",a,\" : \",rest[a])\n   else :\n    print(rest)\n    \n def delete_option(self,option_to_delete):\n  ''\n  \n  if option_to_delete not in self.__dict_of_menu_items:\n   print(\"No option \",option_to_delete,\" in this menu\")\n   return False\n  else :\n   self.__dict_of_menu_items.pop(option_to_delete)\n   \n   \n", ["browser", "visualife.utils.text_utils"]], "visualife.utils.text_utils": [".py", "def fix_python_code(python_text):\n ''\n\n\n\n\n\n\n \n python_text.replace('\\t',' ').strip('\"')\n lines=python_text.split(\"\\n\")\n i=0\n while lines[i].find(\"import\")==-1:i +=1\n n_spaces=len(lines[i])-len(lines[i].lstrip())\n out=\"\"\n for l in lines:\n  out +=l[n_spaces:]+\"\\n\"\n return out\n \n \ndef consecutive_find(string,shortest_accepted=2,allowed_chars=[]):\n ''\n\n\n\n\n\n\n \n \n current=0\n next=0\n i_start=0\n list_of_blocks=[]\n while True :\n  next +=1\n  while next !=len(string)and string[current]==string[next]:\n   current +=1\n   next +=1\n   \n  if current -i_start+1 >=shortest_accepted:\n   if len(allowed_chars)==0 or string[current]in allowed_chars:\n    list_of_blocks.append([i_start,current,string[current]])\n  current +=1\n  i_start=current\n  \n  if next ==len(string):\n   return list_of_blocks\n   \n   \ndef substitute_template(template,subst_dict):\n ''\n\n\n\n\n \n for key,val in subst_dict.items():\n  template=template.replace(key,str(val))\n  \n return template\n \n \ndef from_string(text,first,last,default):\n ''\n\n\n\n\n\n\n\n\n\n \n s=text[first:last].strip()\n return s if len(s)>0 else default\n \n \ndef detect_blocks(secondary_str,allowed_characters=['H','E','C','L']):\n ''\n\n\n\n\n\n\n\n\n\n \n \n H,E,C=[],[],[]\n for block in consecutive_find(secondary_str,2,allowed_characters):\n  if block[2]=='H':H.append([block[0],block[1]])\n  elif block[2]=='E':E.append([block[0],block[1]])\n  elif block[2]=='C'or block[2]=='L':C.append([block[0],block[1]])\n  \n return {'H':H,\"E\":E,\"C\":C}\n", []], "visualife.utils": [".py", "from visualife.utils.text_utils import *\n\ntry :\n from visualife.utils.html_utils import *\nexcept :\n pass\n \n", ["visualife.utils.html_utils", "visualife.utils.text_utils"], 1], "visualife.widget.AbstractWidget": [".py", "import sys\n\n\nclass AbstractWidget:\n\n def __init__(self,element_id):\n  ''\n\n\n  \n  \n  self.__element_id=element_id\n  self._known_events=[]\n  self._event_callbacks={}\n  \n @property\n def element_id(self):\n  ''\n\n\n  \n  return self.__element_id\n  \n @property\n def known_events(self):\n  ''\n\n\n  \n  return [o for o in self._known_events]\n  \n def set_event_callback(self,event_name,callback_function):\n \n  if event_name not in self._known_events:\n   print(\"ERROR: unknown event name:\",event_name,file=sys.stderr)\n   raise ValueError(\"ERROR: unknown event name:\"+event_name)\n  self._event_callbacks[event_name]=callback_function\n", ["sys"]], "visualife.widget.FileReaderWidget": [".py", "import json\nfrom browser import html,window,ajax,document\n\n\nclass ProcessData:\n ''\n \n def __call__(self,*args,**kwargs):\n  ''\n  pass\n  \n  \nclass AjaxCommunication(ProcessData):\n ''\n \n \n def __init__(self,url,on_complete=None ,req_type=\"POST\"):\n  ''\n\n\n\n\n\n  \n  self.__req_type=req_type\n  self.__on_complete=on_complete if on_complete else AjaxCommunication.__default_on_complete\n  self.__url=url\n  \n def on_complete(self,on_complete_func):\n  ''\n\n\n\n  \n  self.__on_complete=on_complete_func\n  \n def __call__(self,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  req=ajax.ajax()\n  if self.__on_complete:req.bind('complete',self.__on_complete)\n  req.open(self.__req_type,self.__url,True )\n  if 'response_type'in kwargs:\n   req.responseType=kwargs['response_type']\n   print(req.responseType)\n  if self.__req_type ==\"POST\":\n   content=\"application/x-www-form-urlencoded;charset=UTF-8\"\n   req.set_header('content-type',content)\n   \n  if len(args)==1:\n   if isinstance(args[0],dict):\n    req.send(args[0])\n   else :\n    to_send={'data':args[0]}\n    if \"file_name\"in kwargs:to_send[\"file_name\"]=kwargs[\"file_name\"]\n    if \"key\"in kwargs:to_send[\"key\"]=kwargs[\"key\"]\n    req.send(to_send)\n  else :\n   to_send={'data':args}\n   if \"file_name\"in kwargs:to_send[\"file_name\"]=kwargs[\"file_name\"]\n   if \"key\"in kwargs:to_send[\"key\"]=kwargs[\"key\"]\n   req.send(to_send)\n   \n @staticmethod\n def __default_on_complete(evt):\n  try :\n   print(json.loads(evt.text))\n  except :\n   print(evt.text)\n   \n   \nclass DataStorageMap(ProcessData):\n ''\n \n \n def __init__(self):\n  ''\n  self.__files={}\n  \n def __call__(self,*args,**kwargs):\n  ''\n\n\n\n\n\n\n\n  \n  self.__files[kwargs[\"key\"]]=args[0]\n  print(kwargs[\"key\"],\"stored\")\n  \n  \nclass FileReaderWidget:\n ''\n\n \n def __init__(self,drop_zone_id,extensions=[],hint_message=\"Drop a file\"):\n  self.__drop_zone=drop_zone_id\n  self.__actions=[]\n  self.__names=[]\n  self.__hint_message=hint_message\n  self.__extensions=extensions\n  self.__text_area=\"\"\"\n        <p class=\"p-2 m-3\" id=\"%s_text\" style=\"display:block;\"></p>\n        \"\"\"%drop_zone_id\n  document[self.__drop_zone].innerHTML +=self.__text_area\n  document[drop_zone_id+\"_text\"].text=hint_message\n  document[self.__drop_zone].bind('dragover',self.__handle_file_dragged_over)\n  document[self.__drop_zone].bind('drop',self.__handle_file_dropped)\n  \n def add_action(self,action):\n  ''\n  \n  self.__actions.append(action)\n  \n @property\n def actions(self):\n  ''\n\n\n\n  \n  return self.__actions\n  \n @actions.setter\n def actions(self,actions):\n  self.__actions=actions\n  \n @property\n def hint_message(self):\n  ''\n  \n  return self.__hint_message\n  \n @hint_message.setter\n def hint_message(self,new_hint):\n  self.__hint_message=new_hint\n  document[self.__drop_zone+\"_text\"].text=new_hint\n  \n @property\n def extensions(self):\n  ''\n  \n  return self.__extensions\n  \n @extensions.setter\n def extensions(self,new_extensions_list):\n  self.__extensions=new_extensions_list\n  \n  \n def __handle_file_dragged_over(self,evt):\n  ''\n  \n  evt.stopPropagation()\n  evt.preventDefault()\n  evt.dataTransfer.dropEffect='copy'\n  \n def __handle_file_dropped(self,evt):\n  ''\n  \n  \n  def setup_reader(f):\n  \n   def load_file(evt):\n    text=evt.target.result\n    for actn in self.__actions:actn(text,key=f.name)\n    \n   if f.name.split(\".\")[-1]in self.__extensions or len(self.__extensions)==0:\n    self.__names.append(f.name)\n    reader=window.FileReader.new()\n    reader.onload=load_file\n    reader.readAsText(f)\n    \n  evt.stopPropagation()\n  evt.preventDefault()\n  files=evt.dataTransfer.files\n  for f in files:\n   print(\"processing\",f.name)\n   setup_reader(f)\n   \n   \n   \n", ["browser", "json"]], "visualife.widget.GLViewerWidget": [".py", "import json\nfrom browser import window,document,html,bind\nfrom visualife.utils.text_utils import substitute_template\n\n\nclass GLViewerWidget:\n ''\n\n\n\n\n \n \n def __init__(self,div_id,**kwargs):\n \n  self.__div_id=div_id\n  self.__pdbs={}\n  self.__models={}\n  self.__active_selection_dict={}\n  self.__style=\"\"\"\n        .GLViewerWidget-button {\n            flex: 1;\n            display: inline;\n            margin: 2px;\n            font-size: 13px;\n        }\n        \"\"\"\n  self.__to_write=\"\"\"\n        <div id=\"viewer-{%ID%}\" style=\"height:{%height%}px; width:{%width%}px;\"></div>\n        <div id=\"buttons-{%ID%}\" style=\"display: flex; flex-direction: row; width:{%width%}px; flex-wrap:wrap;\">\n        </div>\n        \"\"\"\n  \n  document <=html.STYLE(self.__style)\n  \n  replacement={\"{%ID%}\":div_id,\"{%width%}\":kwargs.get(\"width\",500),\n  \"{%height%}\":kwargs.get(\"height\",500)\n  }\n  \n  document[div_id].innerHTML=substitute_template(self.__to_write,replacement)\n  self.__glviewer=\\\n  getattr(window,'$3Dmol').createViewer(document[\"viewer-\"+div_id],{'backgroundColor':'white'})\n  self.__on_clear=[]\n  \n  \n  default_menu={\"sticks\":\"as_sticks\",\"clear all\":\"clear_all\",\n  \"cartoon\":\"as_cartoon\",\"center\":\"center\",\n  \"zoom to selection\":\"zoom_to\",\"zoom ligand\":\"zoom_heteroatom\"}\n  \n  menu_def=kwargs.get(\"menu_buttons\",default_menu)\n  for name,func in menu_def.items():\n   self.add_to_menu(name,func)\n   \n def add_to_menu(self,button_name,callback):\n  button_id=button_name+\"-\"+self.__div_id\n  button_el=html.INPUT(button_name,id=button_id,Class=\"GLViewerWidget-button\",type=\"button\",value=button_name)\n  document[\"buttons-\"+self.__div_id]<=button_el\n  if callable(callback):\n   button_el.bind(\"click\",callback)\n  else :\n   button_el.bind(\"click\",getattr(self,callback))\n   \n def active_selection(self,selection_dict):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__active_selection_dict=selection_dict\n  \n def as_sticks(self,evt):\n  ''\n\n\n\n\n\n\n\n\n  \n  self.__glviewer.setStyle(self.__active_selection_dict,{\"stick\":{}})\n  self.__glviewer.render()\n  \n def as_lines(self,evt):\n  ''\n\n\n\n\n\n\n\n\n  \n  self.__glviewer.setStyle(self.__active_selection_dict,{\"line\":{}})\n  self.__glviewer.render()\n  \n def as_spheres(self,evt):\n  ''\n\n\n\n\n\n\n\n\n  \n  self.__glviewer.setStyle(self.__active_selection_dict,{\"sphere\":{}})\n  self.__glviewer.render()\n  \n def as_cartoon(self,evt,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n  \n  self.__glviewer.setStyle({\"hetflag\":False },{\"cartoon\":{\"color\":'spectrum'}})\n  self.__glviewer.render()\n  \n def clear_all(self,evt):\n  self.clear()\n  \n def zoom_to(self,evt):\n  ''\n\n\n\n\n\n\n\n\n  \n  self.__glviewer.zoomTo(self.__active_selection_dict,1000)\n  \n def zoom_heteroatom(self,evt):\n  ''\n\n\n\n\n\n  \n  self.__glviewer.zoomTo({\"hetflag\":True },1000)\n  \n def center(self,evt):\n  ''\n\n\n\n\n  \n  self.__glviewer.zoomTo()\n  \n def save_as_png(self,evt):\n  png=self.__glviewer.pngURI()\n  document[\"Download-\"+self.__div_id].href=png\n  \n def add_on_clear(self,callback):\n  ''\n\n\n\n  \n  self.__on_clear.append(callback)\n  \n def atomcallback(self,atom,viewer,b,a):\n  ''\n  \n  res=viewer.selectedAtoms({'resi':atom.resi})\n  for at in res:\n   if 'clickLabel'not in at.to_dict()or at.clickLabel ==None :\n   \n    self.__glviewer.addStyle({'resi':atom.resi},{'stick':{'color':'spectrum'}})\n    self.__glviewer.render();\n    \n    for a in res:\n     a.clicked=True\n     if a.atom ==\"CA\":\n      a.clickLabel=viewer.addLabel(str(atom.resn)+str(atom.rescode),\n      {'fontSize':14,\n      'position':{'x':a.x,'y':a.y,'z':a.z}})\n    self.__glviewer.render();\n   else :\n    for a in res:\n     if a.atom ==\"CA\":\n      viewer.removeLabel(a.clickLabel)\n      a.clickLabel=None ;\n     a.clicked=False\n     \n def clear(self):\n  ''\n\n\n  \n  self.__glviewer.clear()\n  for callback in self.__on_clear:\n   callback()\n  self.__pdbs={}\n  self.finalize()\n  \n def remove_model(self,structure_id):\n  ''\n\n\n\n  \n  \n  if structure_id in self.__models:\n   self.__glviewer.removeModel(self.__models[structure_id])\n   self.finalize()\n   return True\n  return False\n  \n def add_model(self,name,pdb_text,if_show=True ):\n  ''\n\n\n\n\n\n  \n  \n  self.__pdbs[name.split(\".\")[0]]=pdb_text\n  m=self.__glviewer.addModel(pdb_text,\"pdb\")\n  self.__models[name]=m\n  atoms=m.selectedAtoms();\n  for a in atoms:\n   a.clickable=True\n   a.callback=self.atomcallback\n   \n  self.__glviewer.setStyle({'hetflag':False },{'cartoon':{'color':'spectrum'}})\n  self.__glviewer.setStyle({'hetflag':True },{'stick':{'color':'spectrum'}})\n  if not if_show:m.hide()\n  self.finalize()\n  return m\n  \n def add_style(self,selection,style):\n  ''\n\n\n\n  \n  \n  self.__glviewer.setStyle(selection,style)\n  self.finalize()\n  \n def show_structure(self,structure_id):\n  ''\n\n\n\n\n\n  \n  if structure_id in self.__models:\n   self.__models[structure_id].show()\n   return True\n  return False\n  \n def hide_structure(self,structure_id):\n  ''\n\n\n\n\n\n\n\n  \n  if structure_id in self.__models:\n   self.__models[structure_id].hide()\n   return True\n  return False\n  \n def finalize(self):\n  ''\n  self.__glviewer.render()\n  self.__glviewer.zoomTo()\n  \n def check_clicked_atoms(self,ev):\n  ''\n\n\n  \n  clicked_atoms=[]\n  model=self.__glviewer.getModel()\n  atoms=model.selectedAtoms()\n  for i in atoms:\n   if 'clicked'in i.to_dict()and i.clicked ==True :\n    clicked_atoms.append(int(i.serial))\n  print(clicked_atoms)\n  clicked_atoms=json.dumps(clicked_atoms)\n  return clicked_atoms\n  \n def update_viewer(self,decoys):\n  ''\n  \n  self.__glviewer.clear()\n  print(self.__pdbs)\n  for d in decoys:\n   self.show_decoy(self.__pdbs[d])\n  self.finalize()\n  \n def show_ligand_contacts(self,ligand_code,ligand_atom,rcptr_resi,rcptr_atoms):\n  ''\n  \n  ligand_atom=self.__glviewer.selectedAtoms({'hetflag':True ,'resn':ligand_code,'atom':ligand_atom})\n  \n  for i in range(len(rcptr_atoms)):\n   receptor_atom=self.__glviewer.selectedAtoms({'resi':rcptr_resi,'atom':rcptr_atoms[i].strip()})\n   self.__glviewer.addCylinder({\n   'start':{'x':ligand_atom[0].x,'y':ligand_atom[0].y,'z':ligand_atom[0].z},\n   'end':{'x':receptor_atom[0].x,'y':receptor_atom[0].y,'z':receptor_atom[0].z},\n   'radius':0.1,'color':'grey','dashed':True })\n   self.__glviewer.addStyle({'resi':rcptr_resi},{'stick':{'color':'spectrum'}})\n  self.__glviewer.zoomTo({'chain':'X'},400);\n  self.__glviewer.render()\n  \n def add_atom(self,a,cor,model=0):\n  ''\n  \n  \n  self.__glviewer.getModel(model).addAtoms(\n  [{'hetflag':False ,'serial':a,'x':cor[a][0],'y':cor[a][1],'z':cor[a][2]}])\n  self.__glviewer.setStyle({'hetflag':False ,'serial':a,},{'sphere':{'color':'white','radius':0.3}})\n  self.__glviewer.addCylinder({\n  'start':{'x':cor[a][0],'y':cor[a][1],'z':cor[a][2]},\n  'end':{'x':cor[a][3],'y':cor[a][4],'z':cor[a][5]},\n  'radius':0.3,'color':'grey'})\n", ["browser", "json", "visualife.utils.text_utils"]], "visualife.widget.MSAViewer": [".py", "import math\nfrom browser import document,html,aio,ajax\nfrom visualife.core.styles import *\nfrom visualife.data import kd_hydrophobicity\nfrom visualife.widget import SequenceViewer\nfrom visualife.utils.html_utils import MenuWidget,run_async_func\nfrom visualife.core.Plot import Plot\nfrom visualife.core.HtmlViewport import HtmlViewport\n\n\nclass MSAViewer:\n\n def __init__(self,element_id,msa_header=\"\",msa=None ,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__msa=[]\n  self.__max_name_len=10\n  self.__max_sequence_len=80\n  self.__if_numerated=True\n  self.__sequences_split_to_columns=[]\n  self.__element_id=element_id\n  self.__subwidgets=[]\n  self.__msa_header=msa_header\n  self.__bars_dict={\"identity\":self.identity_fraction,\"entropy\":self.shannon_entropy,\n  \"hydrophobicity\":self.hydrophobicity}\n  \n  document[element_id].style.textAlign=\"left\"\n  if msa:\n   self.load_msa(msa,**kwargs)\n   \n def load_msa(self,msa_as_json,msa_header=\"\",fix_terminal_gaps=True ,**kwargs):\n  ''\n\n\n\n\n  \n  self.__add_bars=kwargs.get(\"if_bars\",True )\n  self.__bars_function=kwargs.get(\"bars_function\",\"identity\")\n  self.__n_columns_of_ten=kwargs.get(\"n_columns_of_ten\",5)\n  self.__max_sequence_len=10 *self.__n_columns_of_ten\n  self.__blockwise=kwargs.get(\"show_blockwise\",True )\n  \n  self.__msa_header=msa_header\n  for seq_dic in msa_as_json:\n   t=[\"\",\"\",\"\"]\n   if \"sequence\"in seq_dic:\n    t[1]=seq_dic[\"sequence\"]\n   else :\n    continue\n   t[2]=seq_dic.get(\"description\",\"\")\n   t[0]=seq_dic.get(\"id\",t[2][0:15])\n   \n   self.__msa.append(t)\n   \n  if fix_terminal_gaps:\n   longest=0\n   for seq in self.__msa:\n    longest=max(longest,len(seq[1]))\n   for seq in self.__msa:\n    seq[1]+=\"-\"*(longest -len(seq[1]))\n  n_sect=self.__count_sections()\n  self.__sequences_split_to_columns=[]\n  for i_section in range(n_sect):\n   section=[]\n   for seq in self.__msa:\n    section.append(self.__sequence_fragment(seq[1],i_section))\n   self.__sequences_split_to_columns.append(section)\n  self.__create_widget()\n  \n @property\n def secondary_structure(self):\n  ''\n\n\n\n\n  \n  s=\"\"\n  for w in self.__subwidgets:\n   s +=w.secondary_structure\n  return s\n  \n @secondary_structure.setter\n def secondary_structure(self,hec_string):\n  m=self.__max_sequence_len\n  substr=[hec_string[i:i+m]for i in range(0,len(hec_string),m)]\n  i=0\n  for w in self.__subwidgets:\n   print(substr[i])\n   w.secondary_structure=substr[i]\n   i +=1\n   \n @property\n def msa_header(self):\n  ''\n\n\n\n\n  \n  return self.__msa_header\n  \n @msa_header.setter\n def msa_header(self,new_header):\n  self.__msa_header=new_header\n  document[\"header-subwidget-0-\"+self.__element_id].innerHTML=\">\"+new_header\n  \n def add_to_region(self,region_name,which_sequence,if_show_region=True ,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n  \n  \n  for w in self.__subwidgets:\n   kwargs[\"show_in_legend\"]=False if w !=self.__subwidgets[-1]else True\n   w.add_to_region(region_name,which_sequence,if_show_region=if_show_region,**kwargs)\n   \n def region_tooltip(self,region_name,tooltip):\n  ''\n\n\n\n\n\n\n  \n  for subw in self.__subwidgets:\n   subw.region_tooltip(region_name,tooltip)\n   \n def aa_composition(self,i_column):\n  ''\n\n\n\n  \n  aa={k:0 for k in\n  ['A','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','Y','V','W','X',\n  '-']}\n  for s in self.__msa:\n   aa[s[1][i_column]]+=1\n  return aa\n  \n def identity_fraction(self,i_column):\n  ''\n\n\n\n  \n  best='A'\n  best_cnt=0\n  sum=0\n  aa=self.aa_composition(i_column)\n  for k,v in aa.items():\n   if v >best_cnt:\n    best_cnt=v\n    best=k\n   sum +=v\n  return best,best_cnt /float(sum)\n  \n def hydrophobicity(self,i_column):\n  ''\n\n\n\n  \n  avg=0\n  cnt=0\n  for k,v in self.aa_composition(i_column).items():\n   if k !='-':\n    avg +=kd_hydrophobicity[k]*v\n    cnt +=v\n  return avg /cnt if cnt !=0 else 0\n  \n def shannon_entropy(self,i_column):\n  ''\n\n\n\n  \n  sum=0.0\n  total=0.0\n  for k,v in self.aa_composition(i_column).items():\n   if k !='-'and v >0:total +=v\n  for k,v in self.aa_composition(i_column).items():\n   if k !='-'and v >0:\n    v /=total\n    sum -=v *math.log(v)\n  return sum\n  \n def colors_by_scheme(self,color_scheme,which_sequence=0,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  n=len(self.__msa[which_sequence][1])\n  neutral_color=kwargs.get(\"neutral_color\",\"white\")\n  if color_scheme =='secondary':\n   return SequenceViewer.secondary_structure_colors(self.secondary_structure,neutral_color)\n  elif color_scheme =='identity':\n   palette=colormap_by_name(kwargs.get(\"palette_name\",\"pinks\"),0,1)\n   return [str(palette.color(self.identity_fraction(i)[1]))for i in range(n)]\n  elif color_scheme =='entropy':\n   palette=colormap_by_name(kwargs.get(\"palette_name\",\"pinks\"),0,1)\n   return [str(palette.color(self.shannon_entropy(i)))for i in range(n)]\n  elif color_scheme ==\"hydrophobicity\":\n   palette=colormap_by_name(kwargs.get(\"palette_name\",\"pinks\"),-4.5,4.5)\n   return [str(palette.color(self.hydrophobicity(i)))for i in range(n)]\n  elif color_scheme ==\"mutations\":\n   aa_cnts=[]\n   most_popular=[]\n   for i_column in range(n):\n    aa_cnts.append(self.aa_composition(i_column))\n    m=[0,0]\n    for aa,cnt in aa_cnts[-1].items():\n     if cnt >m[0]:m[0],m[1]=cnt,aa\n    most_popular.append(m)\n   conserved_column=len(self.__msa)*0.9\n   all_clrs=[]\n   for seq in self.__msa:\n    clrs=[]\n    seq=seq[1]\n    for i_column in range(len(seq)):\n     if most_popular[i_column][0]>=conserved_column and seq[i_column]!=most_popular[i_column][1]:\n      clrs.append(\"red\")\n     else :\n      clrs.append(neutral_color)\n    all_clrs.append(clrs)\n   return all_clrs\n  else :\n   return []\n   \n def color_sequences(self,color_scheme,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if \"neutral_color\"not in kwargs:kwargs[\"neutral_color\"]=\"black\"\n  self.__color(color_scheme,\"color_sequence\",**kwargs)\n  \n def color_background(self,color_scheme,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if \"neutral_color\"not in kwargs:kwargs[\"neutral_color\"]=\"white\"\n  self.__color(color_scheme,\"color_background\",**kwargs)\n  \n def __color(self,color_scheme,function,**kwargs):\n \n \n \n  plt=kwargs.get(\"palette_name\",\"pinks\")\n  if isinstance(color_scheme,list)and isinstance(color_scheme[0],list):\n   palette=colormap_by_name(plt,0,5)\n   first=0\n   for w in self.__subwidgets:\n    sub_seq=w.sequence()\n    i_seq=0\n    clrs=[]\n    for ss in sub_seq:\n     last=min(len(ss)+first,len(color_scheme[i_seq]))\n     for i_pos in range(first,last):\n      if isinstance(color_scheme[i_seq][i_pos],str):\n       clrs.append(color_scheme[i_seq][i_pos])\n      else :\n       clrs.append(str(palette.color(color_scheme[i_seq][i_pos])))\n     i_seq +=1\n    getattr(w,function)(clrs)\n    first +=len(ss)\n  elif isinstance(color_scheme,list):\n   i=0\n   for w in self.__subwidgets:\n    getattr(w,function)(color_scheme[i:(i+self.__max_sequence_len)])\n    i +=self.__max_sequence_len\n  elif isinstance(color_scheme,str):\n   if color_scheme in [\"secondary\",\"identity\",\"entropy\",\"hydrophobicity\",\"mutations\"]:\n    if \"neutral_color\"not in kwargs:kwargs[\"neutral_color\"]=\"white\"\n    self.__color(self.colors_by_scheme(color_scheme),function,**kwargs)\n   for w in self.__subwidgets:\n    getattr(w,function)(color_scheme)\n  else :\n   print(\"Unknown color scheme!\")\n   \n def __count_sections(self):\n  max_len=0\n  for seq in self.__msa:\n   max_len=max(max_len,len(seq[1]))\n  return math.ceil(max_len /self.__max_sequence_len)\n  \n def __sequence_fragment(self,the_sequence,which_section):\n \n  nmax=len(self.__msa[0][1])\n  \n  if which_section *self.__max_sequence_len <nmax:\n   seq_fragment=the_sequence[\n   which_section *self.__max_sequence_len:(which_section+1)*self.__max_sequence_len]\n  else :\n   seq_fragment=the_sequence[which_section *self.__max_sequence_len:nmax]\n   \n  return seq_fragment\n  \n def __color_sequence_event(self,evt):\n  what=evt.target.id\n  print(\"sequence colored by\",what)\n  self.color_sequences(what)\n  \n def __color_background_event(self,evt):\n  what=evt.target.id\n  print(\"background colored by\",what)\n  self.color_background(what)\n  \n def __change_bars_event(self,evt):\n  what=evt.target.id\n  print(\"bars function is\",what)\n  self.change_bars(what)\n  \n def __ruler_text(self,number,first):\n  two_template=\"....:...%d|\"\n  three_template=\"....:..%d|\"\n  four_template=\"....:.%d|\"\n  if number *10+first -1 <100:\n   return two_template %(number *10+first -1)\n  if number *10+first -1 <1000:\n   return three_template %(number *10+first -1)\n  if number *10+first -1 <10000:\n   return four_template %(number *10+first -1)\n   \n def __change_one_bars(self,what,i,spaces):\n  bars_id=(\"bars-%d-\"%i)+self.__element_id\n  ruler_id=(\"ruler-%d-\"%i)+self.__element_id\n  drawing=HtmlViewport(document[bars_id],0,0,document[ruler_id].width,20)\n  pl=Plot(drawing,0,500,0,20,0.0,63.0,0.0,1.0,axes_definition=\"UBLR\")\n  data=[]\n  data_x=[]\n  \n  for c in range(max(spaces+3,9)):\n   data.append(0)\n   data_x.append(c)\n  cnt=0\n  for cc in range(c,self.__n_columns_of_ten *10+c+cnt):\n   if cc -c >=len(self.__sequences_split_to_columns[i][0]):\n    break\n   data.append(self.__bars_dict[what](cc -c)[1]if isinstance(self.__bars_dict[what](cc -c),tuple)else\n   self.__bars_dict[what](cc -c))\n   data_x.append(cc+cnt)\n   if (cc+1 -c)%10 ==0 and self.__blockwise:\n    data_x.append(cc+1)\n    data.append(0)\n    cnt +=1\n    \n  pl.bars(data_x,data,width=0.5,adjust_range=\"y\")\n  pl.draw(axes=False )\n  drawing.close()\n  \n def change_bars(self,what):\n \n  for i in range(len(self.__sequences_split_to_columns)):\n   bars_id=(\"bars-%d-\"%i)+self.__element_id\n   ruler_id=(\"ruler-%d-\"%i)+self.__element_id\n   if bars_id in document:\n    document[bars_id].innerHTML=\"\"\n   self.__change_one_bars(what,i)\n   \n def async_viewer(self,res):\n \n  i=self.__i\n  first=self.__first\n  \n  div_id=(\"subwidget-%d-\"%i)+self.__element_id\n  ruler_id=(\"ruler-%d-\"%i)+self.__element_id\n  \n  spaces_len=len(self.__msa[0][0][:15])\n  for j in range(len(self.__msa)):\n   if len(self.__msa[j][0][:15])>spaces_len:\n    spaces_len=len(self.__msa[j][0][:15])\n  ruler_text=\"&nbsp;\"*max(spaces_len+2,8)\n  \n  for r in range(self.__n_columns_of_ten):\n   ruler_text +=self.__ruler_text(r+1,first)\n   if (r+1)*10 >len(self.__sequences_split_to_columns[i][0]):break\n   \n  document[self.__element_id]<=html.DIV('',id=div_id)\n  seq_viewer=SequenceViewer(div_id,self.__msa_header,self.__sequences_split_to_columns[i],\n  first_residue_id=first,show_blockwise=self.__blockwise,show_menu=False ,show_header=(True if i ==0 else False ),\n  if_add_style=(True if i ==0 else False ),n_columns_of_ten=self.__n_columns_of_ten)\n  \n  \n  \n  \n  ruler=html.DIV(ruler_text,id=ruler_id,Class=\"SequenceViewer-fasta\",style={\"textAlign\":\"left\"})\n  \n  \n  \n  document[div_id].children[0].insertBefore(ruler,document[\"top-row-subwidget-%d-show_msa\"%i].nextSibling)\n  self.__subwidgets.append(seq_viewer)\n  \n  \n  w=document[\"SequenceViewer-\"+div_id].style.width\n  w=document[\"header-\"+div_id].style.width\n  w=int(w.replace(\"px\",\"\"))+90\n  document[\"SequenceViewer-\"+div_id].style.width=str(w)+\"px\"\n  document[\"SequenceViewer-\"+div_id].style.maxWidth=str(w)+\"px\"\n  document[self.__element_id].style.width=str(w)+\"px\"\n  document[self.__element_id].style.maxWidth=str(w)+\"px\"\n  numbers_div=document[\"numbers-\"+seq_viewer.element_id]\n  numbers_div.style.width=\"150px\"\n  numbers_div.innerHTML=\"\"\n  for seq in self.__msa:\n   numbers_div <=html.SPAN(seq[0][:15])+html.BR()\n   \n   \n   \n  if self.__add_bars:\n   bars_id=(\"bars-%d-\"%i)+self.__element_id\n   bars=html.SPAN(\"\",id=bars_id,Class=\"SequenceViewer-fasta\",style={\"width\":document[ruler_id].width,\"height\":20})\n   if \"legend-box-subwidget-%d-show_msa\"%i in document:\n    document[div_id].children[0].insertBefore(bars,document[\"legend-box-subwidget-%d-show_msa\"%i])\n   else :document[div_id]<=bars\n   self.__change_one_bars(self.__bars_function,i,spaces_len)\n   \n   \n  if self.__i ==0:\n   self.menu=MenuWidget(\"menu-\"+\"subwidget-0-\"+self.__element_id,\n   {\"color letters\":{\n   \"clear\":self.__color_sequence_event,\n   \"secondary\":self.__color_sequence_event,\n   \"clustal\":self.__color_sequence_event,\n   \"maeditor\":self.__color_sequence_event,\n   \"identity\":self.__color_sequence_event,\n   \"hydrophobicity\":self.__color_sequence_event,\n   \"entropy\":self.__color_sequence_event,\n   \"mutations\":self.__color_sequence_event\n   },\n   \"color background\":{\n   \"clear\":self.__color_background_event,\n   \"secondary\":self.__color_background_event,\n   \"clustal\":self.__color_background_event,\n   \"maeditor\":self.__color_background_event,\n   \"identity\":self.__color_background_event,\n   \"hydrophobicity\":self.__color_background_event,\n   \"entropy\":self.__color_background_event,\n   \"mutations\":self.__color_background_event\n   },\n   \"bars function\":{\n   \"identity\":self.__change_bars_event,\n   \"hydrophobicity\":self.__change_bars_event,\n   \"entropy\":self.__change_bars_event\n   }\n   },\n   width=150)\n   \n  self.__first +=len(self.__sequences_split_to_columns[self.__i][0])\n  self.__i +=1\n  \n def __create_widget(self):\n  document[self.__element_id].innerHTML=\"\"\n  self.__first=1\n  self.__i=0\n  \n  for i in range(len(self.__sequences_split_to_columns)):\n   run_async_func(self.async_viewer)\n   \n   \n   \n", ["browser", "math", "visualife.core.HtmlViewport", "visualife.core.Plot", "visualife.core.styles", "visualife.data", "visualife.utils.html_utils", "visualife.widget"]], "visualife.widget.SecondaryStructureViewer": [".py", "from visualife.widget import SequenceViewer\nfrom visualife.utils.text_utils import consecutive_find\nfrom visualife.utils.html_utils import MenuWidget\n\n\nclass SecondaryStructureViewer(SequenceViewer):\n\n def __init__(self,element_id,sequence_name=\"\",ss_string=\"\",**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  super().__init__(element_id,sequence_name,ss_string,**kwargs)\n  \n  MenuWidget(\"menu-\"+element_id,\n  {\"color scheme\":{\"clear\":self.__color_sequence_event,\"HEC\":self.__color_sequence_event},\n  \"region from selection\":\"\"\n  },width=150)\n  \n  self.color_sequence(\"hec_secondary\")\n  \n def detect_blocks(self,which_seq=0,allowed_characters=['H','E','C','L']):\n  ''\n\n\n\n\n\n\n\n\n\n  \n  \n  H,E,C=[],[],[]\n  for block in consecutive_find(self.sequence()[which_seq],2,allowed_characters):\n   if block[2]=='H':H.append([block[0],block[1]])\n   elif block[2]=='E':E.append([block[0],block[1]])\n   elif block[2]=='C'or block[2]=='L':C.append([block[0],block[1]])\n   \n  return H,E,C\n  \n def __color_sequence_event(self,evt):\n \n  what=evt.target.id\n  if what ==\"HEC\":\n   self.color_sequence(\"hec_secondary\")\n  elif what ==\"none\"or what ==\"clear\":\n   self.color_sequence(\"clear\")\n", ["visualife.utils.html_utils", "visualife.utils.text_utils", "visualife.widget"]], "visualife.widget.SequenceFeaturesBar": [".py", "from visualife.core.shapes import arrow\nfrom visualife.core.styles import make_darker\nfrom visualife.widget import TooltipWidget\nfrom browser import document,html\n\n\nclass SequenceFeaturesBar:\n\n def __init__(self,viewport,sequence_ids=[],seq_len=0,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__sequence_ids={}\n  self.__seq_len=seq_len\n  self.__seq_annotations={}\n  self.__viewport=viewport\n  self.__region_kwargs={}\n  \n  self.__margin_x=10\n  self.__arrow_width=100\n  self.__arrow_height=25\n  self.__seq_height=25\n  document <=html.DIV(id=\"container\")\n  self.__tooltip=TooltipWidget(\"sfb-tooltip\",\"container\",\"\",150,20)\n  for si in sequence_ids:\n   self.add_sequence(si,**kwargs)\n   \n def add_sequence(self,seq_name,**kwargs):\n  ''\n\n\n\n\n\n\n  \n  desc=kwargs.get(\"description\",seq_name)\n  self.__sequence_ids[seq_name]=desc\n  self.__seq_annotations[seq_name]={}\n  \n def show_tooltip(self,evt):\n  ''\n  tokens=evt.target.id.split(\"-\")\n  self.__tooltip.tooltip_text=\"%s %s-%s\"%(tokens[-3],tokens[-2],tokens[-1])\n  self.__tooltip.show(evt.clientX,evt.clientY)\n  \n def __calculate_regions(self,regions):\n  reg_start_lenght=[]\n  begin=self.__margin_x *2+self.__arrow_width\n  full_len=self.__viewport.get_width()-begin\n  \n  for reg,spans in regions.items():\n  \n   for span in spans:\n    start=span[0]\n    leng=span[1]-span[0]\n    draw_len=full_len *leng /self.__seq_len\n    draw_start=begin+full_len *start /self.__seq_len\n    reg_start_lenght.append((reg,span[0],span[1],draw_start,draw_len))\n    \n  return reg_start_lenght\n  \n def draw(self):\n  ''\n  \n  n=0\n  \n  arrow_center_x=self.__arrow_width /2.0+self.__margin_x\n  for si in self.__sequence_ids:\n   n +=1\n   y_step=n *self.__seq_height\n   \n   parms={}\n   fill=parms.get(\"arrow_fill\",\"white\")\n   strk=make_darker(fill,0.3)if \"arrow_fill\"in parms else \"black\"\n   arrow(self.__viewport,\"arrow-%s\"%si,self.__arrow_width,self.__arrow_height,self.__arrow_height,0,\n   **dict(cx=70,cy=y_step,fill=fill,stroke=strk,stroke_width=parms.get(\"stroke_width\",1)))\n   arrow_center_y=y_step -self.__arrow_height /2.0\n   self.__viewport.text(\"label-%s\"%si,arrow_center_x,arrow_center_y,self.__sequence_ids[si])\n   start_and_len=self.__calculate_regions(self.__seq_annotations[si])\n   begin=self.__margin_x *2+self.__arrow_width\n   full_len=self.__viewport.get_width()-begin\n   self.__viewport.rect(\"rect-%s\"%n,begin,y_step -self.__arrow_height,full_len,self.__seq_height,fill=\"whitesmoke\",stroke=\"lightgrey\")\n   \n   for reg,start,leng,draw_start,draw_len in start_and_len:\n    self.__viewport.rect(\"rect-%s-%d-%d\"%(reg,start,leng),draw_start,y_step -self.__arrow_height,draw_len,self.__seq_height,**(self.__region_kwargs[reg]),Class=\"region\")\n    \n    \n  self.__viewport.close()\n  for rect in document.select(\"rect\"):\n   if rect.attrs.get(\"class\",\"\")==\"region\":\n    rect.bind(\"mousemove\",self.show_tooltip)\n    rect.bind(\"mouseout\",self.__tooltip.hide)\n    \n    \n def add_to_region(self,sequence_name,region_name,if_show_region=True ,**kwargs):\n  ''\n  if region_name not in self.__region_kwargs:\n   self.__region_kwargs[region_name]=kwargs\n  if \"first_pos\"in kwargs:\n   pos_from=kwargs[\"first_pos\"]\n   pos_to=kwargs.get(\"last_pos\",pos_from+1)\n  elif \"last_pos\"in kwargs:\n   pos_to=kwargs[\"last_pos\"]\n   pos_from=kwargs.get(\"first_pos\",pos_to -1)\n  if sequence_name not in self.__seq_annotations:\n   self.__seq_annotations[sequence_name]={}\n  if region_name not in self.__seq_annotations[sequence_name]:\n   self.__seq_annotations[sequence_name][region_name]=[]\n  self.__seq_annotations[sequence_name][region_name].append((pos_from,pos_to))\n  \n def delete_region(self,sequence_name,region_name):\n  ''\n  self.__seq_annotations[sequence_name][region_name]=[]\n  \n def delete_regions(self):\n  pass\n", ["browser", "visualife.core.shapes", "visualife.core.styles", "visualife.widget"]], "visualife.widget.SequenceViewer": [".py", "from browser import document,html\nfrom visualife.core.styles import *\nfrom visualife.utils.html_utils import create_tooltip,MenuWidget\nfrom visualife.widget import AbstractWidget\n\n\nclass SequenceViewer(AbstractWidget):\n\n __style=\"\"\"\n.SequenceViewer-numbers {\n    font-family: monospace;\n    font-size: 13px;\n    display: inline-block;\n    text-align: right;\n    padding-right: 5px;\n    border-right: 1px solid LightGray;\n    width: 40px;\n}\n\n.SequenceViewer-fasta {\n    font-family: monospace;\n    font-size: 13px;\n    display: inline-block;\n    padding-left: 5px;\n    box-sizing: border-box;\n    text-align: left;\n    white-space: nowrap;\n    cursor: pointer;\n}\n\n.SequenceViewer-top_row {\n    overflow: visible;\n    padding-left: 45px;\n    text-align: left;\n    font-family: monospace;\n    font-size: 13px;\n    height: 20px;\n    display: flex;\n    flex-direction: row;\n    align-content: space-between;\n}\n\n.SequenceViewer-legend_item {\n    display: inline;\n    font: Arial;\n    font-size: 15px;\n    cursor: pointer;\n}\n\n.SequenceViewer-legend_item:disabled {\n    color: gray;\n}\n\n.SequenceViewer-sequence-box { overflow: visible; }\n\n.SequenceViewer-menu {\n    width: 20px;\n    height: 20px;\n    right: 0px;\n    cursor: context-menu;\n}\n    \"\"\"\n \n def __init__(self,element_id,sequence_name=\"\",sequence=\"\",**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  super().__init__(element_id)\n  \n  self._known_events.extend([\"CLICK_ON_LEGEND\",\"CLICK_ON_LETTER\"])\n  self._event_callbacks[\"CLICK_ON_LEGEND\"]=lambda evt:self.flip_region(self.which_region_in_legend(evt)[0])\n  \n  self.__sequence_name=sequence_name\n  self.__sequence=sequence\n  self.__secondary_structure=\"\"\n  self.__selecting_allowed=kwargs.get(\"selecting_allowed\",False )\n  frst=kwargs.get(\"first_residue_id\",[1])\n  self.__first_residue_id=list(frst)if type(frst)in [list,tuple]else [frst]\n  self.__chars_in_block=10\n  self.__show_blockwise=kwargs.get(\"show_blockwise\",True )\n  \n  \n  self.__selections={}\n  self.__selection_colors={}\n  self.__show_menu=kwargs.get(\"show_menu\",True )\n  self.__show_header=kwargs.get(\"show_header\",True )\n  self.__selection_tooltips={}\n  \n  self.__selections_palette_name=kwargs.get(\"palette_name\",\"pastel1\")\n  self.__selections_palette=known_color_scales[self.__selections_palette_name]\n  \n  self.__selection_cmap=colormap_by_name(kwargs.get(\"region_cmap\",\"blues\"),0.0,1.0)\n  self.__regions_shown={}\n  \n  \n  \n  self.__blocks_in_line=kwargs.get(\"n_columns_of_ten\",5)\n  width=int(86 *self.__blocks_in_line+10)\n  if_add_style=kwargs.get(\"if_add_style\",True )\n  if if_add_style:document <=html.STYLE(SequenceViewer.__style)\n  \n  max_width_style={'width':'%spx'%str(width+50),'max-width':'%spx'%str(width+50)}\n  d1=html.DIV('',Class=\"SequenceViewer-sequence-box\",id=\"SequenceViewer-\"+element_id,style=max_width_style)\n  \n  width_style={'width':'%spx'%str(width -5),'max-width':'%spx'%str(width -5)}\n  d2=html.DIV('',Class=\"SequenceViewer-top_row\",id=\"top-row-\"+element_id,style=width_style)\n  \n  d2 <=html.DIV('',id=\"header-\"+element_id,style={\"width\":\"%dpx\"%(width -40)})\n  d2 <=html.DIV('',Class=\"SequenceViewer-menu\",id=\"menu-\"+element_id)\n  d1 <=d2\n  if not self.__show_header:\n   d2.style.visibility=\"hidden\"\n   \n  d3=html.DIV('',style={'display':'flex','flex-direction':'row'})\n  d3 <=html.DIV('',Class=\"SequenceViewer-numbers\",id=\"numbers-\"+element_id)\n  width_style={'width':'%spx'%str(width),'max-width':'%spx'%str(width)}\n  d3 <=html.DIV('',Class=\"SequenceViewer-fasta\",id=\"fasta-\"+element_id,style=width_style)\n  d1 <=d3\n  d1 <=html.DIV('',id=\"legend-box-\"+element_id,style={'display':'flex','flex-direction':'row',\n  'width':'%spx'%str(width+50),'max-width':'%spx'%str(width+50),'flex-wrap':'wrap',\n  'padding-top':'10px'})\n  document[element_id]<=d1\n  \n  if self.__show_menu:\n   self.__menu=MenuWidget(\"menu-\"+element_id,\n   {\"color scheme\":{\n   \"clear\":self.__color_sequence_event,\n   \"secondary\":self.__color_sequence_event,\n   \"clustal\":self.__color_sequence_event,\n   \"maeditor\":self.__color_sequence_event},\n   },\n   width=150)\n   \n  self.sequence_name=sequence_name\n  if len(sequence)>0:\n   self.load_sequence(sequence)\n   \n  if \"sequence_colors\"in kwargs:\n   self.color_sequence(kwargs[\"sequence_colors\"])\n   \n @property\n def menu(self):\n  ''\n\n\n  \n  return self.__menu\n  \n def region_legend_id(self,region_name):\n  ''\n\n\n\n  \n  return \"legend-box-\"+self.element_id+\"-\"+region_name\n  \n @property\n def sequence_name(self):\n  ''\n\n\n\n\n  \n  return self.__sequence_name\n  \n @sequence_name.setter\n def sequence_name(self,name):\n  self.__sequence_name=name\n  if self.__sequence_name !=\"\":\n   document[\"header-\"+self.element_id].innerHTML=\"&gt; \"+self.__sequence_name\n   \n @property\n def show_header(self):\n  ''\n\n\n\n\n  \n  return self.__show_header\n  \n @show_header.setter\n def show_header(self,if_show):\n  self.__show_header=if_show\n  if if_show:\n   document[\"header-\"+self.element_id].style.visibility=\"visible\"\n  else :\n   document[\"header-\"+self.element_id].style.visibility=\"hidden\"\n   \n def count_sequences(self):\n  ''\n\n\n  \n  return self.__sequence\n  \n def sequence(self):\n  ''\n\n\n\n\n  \n  return self.__sequence\n  \n @property\n def secondary_structure(self):\n  ''\n\n\n\n\n  \n  return self.__secondary_structure\n  \n @secondary_structure.setter\n def secondary_structure(self,hec_string):\n  self.__secondary_structure=hec_string\n  \n def first_residue_id(self,which_sequence):\n  ''\n\n\n\n  \n  return self.__first_residue_id[which_sequence]\n  \n @property\n def click_on_legend_callback(self):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  return self.__click_on_legend_callback\n  \n @click_on_legend_callback.setter\n def click_on_legend_callback(self,callback):\n  self.__click_on_legend_callback=callback\n  \n @property\n def click_on_sequence_callback(self):\n  ''\n\n\n\n\n  \n  return self.__onclick_callback\n  \n @click_on_sequence_callback.setter\n def click_on_sequence_callback(self,callback):\n  self.__onclick_callback=callback\n  \n @property\n def regions_palette(self):\n  ''\n\n\n\n\n\n\n\n\n  \n  return self.__selections_palette_name\n  \n @regions_palette.setter\n def regions_palette(self,palette_name):\n  if palette_name in known_color_scales:\n   self.__selections_palette_name=palette_name\n  self.__selections_palette=known_color_scales[self.__selections_palette_name]\n  \n @property\n def region_cmap(self):\n  ''\n\n\n\n\n  \n  return self.__selection_cmap\n  \n @region_cmap.setter\n def region_cmap(self,cmap):\n  if isinstance(cmap,str):\n   self.__selection_cmap=colormap_by_name(cmap,0.0,1.0)\n  else :\n   self.__selection_cmap=cmap\n   \n @property\n def sequence_blocks_in_line(self):\n  ''\n\n\n  \n  return self.__blocks_in_line\n  \n def add_to_region(self,region_name,which_sequence=0,if_show_region=True ,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if_legend=kwargs.get(\"show_in_legend\",True )\n  if region_name not in self.__selections:\n   if \"color\"in kwargs:\n    self.__selection_colors[region_name]=kwargs[\"color\"]\n   else :\n    self.__selection_colors[region_name]=len(self.__selections)\n   self.__selections[region_name]=[]\n   if region_name+\"-tooltip\"not in document:\n    document <=create_tooltip(region_name+\"-tooltip\",\"\",200,10)\n   if if_legend:\n    legend_div=html.DIV(\"\",Class=\"SequenceViewer-legend_item\",id=self.region_legend_id(region_name))\n    clr=self.__selection_colors[region_name]\n    if isinstance(clr,int):\n     legend_div <=html.SPAN(\"&#9679;\",style={'color':self.__selections_palette[clr %len(self.__selections_palette)],\n     'padding':'0px 10px 0px 20px'})\n    elif isinstance(clr,float):\n     legend_div <=html.SPAN(\"&#9679;\",style={'color':self.__selection_cmap(clr),\n     'padding':'0px 10px 0px 20px'})\n    elif isinstance(clr,list):\n     clr_left=str(self.__selection_cmap.color((self.__selection_cmap.min_value)))\n     legend_div <=html.SPAN(\"&#9679;\",style={'color':clr_left,\n     'padding':'0px 10px 0px 20px'})\n     clr_right=str(self.__selection_cmap.color((self.__selection_cmap.max_value)))\n     legend_div <=html.SPAN(\"&#9679;\",style={'color':clr_right,\n     'padding':'0px 10px 0px 20px'})\n    else :\n     legend_div <=html.SPAN(\"&#9679;\",style={'color':clr,\n     'padding':'0px 10px 0px 0px'})\n    legend_div <=html.DIV(kwargs.get(\"tooltip\",\"\"),\n    id=\"legend-box-\"+self.element_id+\"-\"+region_name+\"-text\",style={'display':'inline'})\n    document[\"legend-box-\"+self.element_id]<=legend_div\n    \n    legend_div.bind(\"click\",lambda evt:self._event_callbacks[\"CLICK_ON_LEGEND\"](evt))\n    \n  if \"sequence\"in kwargs:\n   pos=self.__sequence[which_sequence].find(kwargs[\"sequence\"])\n   if pos >-1:\n    pos_from=pos+1\n    pos_to=pos_from+len(kwargs[\"sequence\"])\n  elif \"first_pos\"in kwargs:\n   pos_from=kwargs[\"first_pos\"]\n   pos_to=kwargs.get(\"last_pos\",pos_from+1)\n  elif \"last_pos\"in kwargs:\n   pos_to=kwargs[\"last_pos\"]\n   pos_from=kwargs.get(\"first_pos\",pos_to -1)\n  else :\n   return\n   \n  n_first=len(self.__first_residue_id)\n  if which_sequence >0:\n   first=-self.__first_residue_id[(which_sequence -1)%n_first]if \"by_residue_id\"in kwargs else -1\n   self.__selections[region_name].append((which_sequence,pos_from+first,pos_to+first))\n  else :\n   first=-self.__first_residue_id[0]if \"by_residue_id\"in kwargs else -1\n   self.__selections[region_name].append((0,pos_from+first,pos_to+first))\n   \n  if \"tooltip\"in kwargs:\n   self.region_tooltip(region_name,kwargs[\"tooltip\"])\n  if if_show_region:self.show_region(region_name)\n  \n def delete_region(self,region_name):\n  ''\n\n\n\n\n  \n  for d in [self.__selections,self.__selection_colors,self.__selection_tooltips]:\n   if region_name in d:\n    del (d[region_name])\n    \n def delete_regions(self):\n  ''\n\n\n  \n  for name in list(self.__selections.keys()):self.delete_region(name)\n  \n def show_region(self,region_name):\n  ''\n\n\n\n  \n  if region_name not in self.__selections:return\n  \n  self.__regions_shown[region_name]=True\n  if isinstance(self.__selection_colors[region_name],int):\n   color=[self.__selections_palette[self.__selection_colors[region_name]%len(self.__selections_palette)]]\n  elif isinstance(self.__selection_colors[region_name],list):\n   color=[]\n   for f in self.__selection_colors[region_name]:\n    color.append(self.__selection_cmap.color(f))\n  else :\n   color=[self.__selection_colors[region_name]]\n  id_str=\"ch-\"+self.element_id+\"-\"\n  for chunk in self.__selections[region_name]:\n   if chunk[0]==0:\n    i_max=max(1,chunk[1]+1)\n    for i in range(i_max,min(chunk[2]+2,len(self.__sequence[0])+1)):\n     i_str='-'+str(i)\n     i_color=str(color[i %len(color)])\n     for i_seq in range(1,len(self.__sequence)+1):\n      el=document[id_str+str(i_seq)+i_str]\n      el.style.backgroundColor=i_color\n      el.class_name +=\" \"+region_name+\"-tipcls\"\n   else :\n    for i in range(max(1,chunk[1]+1),min(chunk[2]+2,len(self.__sequence[chunk[0]-1])+1)):\n     el=document[id_str+str(chunk[0])+'-'+str(i)]\n     el.style.backgroundColor=str(color[i %len(color)])\n     el.class_name +=\" \"+region_name+\"-tipcls\"\n     \n def hide_region(self,region_name):\n  ''\n\n\n\n\n  \n  \n  if region_name not in self.__selections:return\n  self.__regions_shown[region_name]=False\n  id_str=\"ch-\"+self.element_id+\"-\"\n  for chunk in self.__selections[region_name]:\n   i_seq=chunk[0]\n   begin=chunk[1]+1\n   end=min(chunk[2]+2,len(self.__sequence[i_seq])+1)\n   for i in range(begin,end):\n    el=document[id_str+str(i_seq+1)+'-'+str(i)]\n    el.style.backgroundColor=\"#FFFFFF\"\n    el.class_name=el.class_name.replace(region_name+\"-tipcls\",\"\")\n    \n def flip_region(self,region_name):\n  ''\n\n\n\n  \n  if region_name not in self.__selections:return\n  if not self.__regions_shown[region_name]:self.show_region(region_name)\n  else :self.hide_region(region_name)\n  \n def region_tooltip(self,region_name,tooltip):\n  ''\n\n\n\n\n\n\n  \n  \n  self.__selection_tooltips[region_name]=tooltip\n  document[region_name+\"-tooltip\"].innerHTML=tooltip\n  el_id=\"legend-box-\"+self.element_id+\"-\"+region_name+\"-text\"\n  if el_id in document:\n   document[el_id].innerHTML=tooltip\n   \n def region_for_name(self,region_name):\n  ''\n\n\n\n  \n  return self.__selections[region_name]\n  \n def region_for_position(self,pos):\n  ''\n\n\n\n\n  \n  for name,region in self.__selections.items():\n   for chunk in region:\n    if pos >=chunk[1]and pos <=chunk[2]:\n     return name,region\n  return None ,None\n  \n def which_region_in_legend(self,evt):\n  ''\n\n\n\n  \n  for name,region in self.__selections.items():\n   if evt.target.id.find(name)>-1:return name,region\n  return None ,None\n  \n @staticmethod\n def secondary_structure_colors(hec_string,default_color=\"black\"):\n  color_scheme=known_sequence_scales[\"hec_secondary\"]\n  return [color_scheme.get(c,default_color)for c in hec_string]\n  \n def color_sequence(self,color_scheme,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if isinstance(color_scheme,list):\n   if not isinstance(color_scheme[0],str):\n    palette=kwargs.get(\"palette_name\",\"pinks\")\n    map=colormap_by_name(palette,min(color_scheme)+0.001,max(color_scheme))\n    map.left_color=\"white\"\n    colors=[str(map.color(i))for i in color_scheme]\n    self.__color_span(colors,\"color\",\"black\")\n    return\n  self.__color_span(color_scheme,\"color\",\"black\")\n  \n def color_background(self,color_scheme,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if isinstance(color_scheme,list):\n   if not isinstance(color_scheme[0],str):\n    palette=kwargs.get(\"palette_name\",\"pinks\")\n    \n    map=colormap_by_name(palette,min(color_scheme)+0.001,max(color_scheme))\n    map.left_color=\"white\"\n    \n    colors=[str(map.color(i))for i in color_scheme]\n    self.__color_span(colors,\"backgroundColor\",\"white\")\n    return\n    \n  self.__color_span(color_scheme,\"backgroundColor\",\"white\")\n  \n def load_sequence(self,fasta_sequence):\n  ''\n\n\n\n  \n  \n  n=self.__chars_in_block\n  document[\"numbers-\"+self.element_id].innerHTML=\"\"\n  document[\"fasta-\"+self.element_id].innerHTML=\"\"\n  document[\"legend-box-\"+self.element_id].innerHTML=\"\"\n  i_char,i_seq=0,0\n  id_str=\"ch-\"+self.element_id+\"-\"\n  n_first=len(self.__first_residue_id)\n  \n  self.__sequence=fasta_sequence if isinstance(fasta_sequence,list)else [fasta_sequence]\n  f=html.DIV()\n  fasta_text=\"\"\n  dn=html.DIV()\n  for fasta_sequence in self.__sequence:\n   i_row,i_char=0,0\n   \n   subseq=[fasta_sequence[i:i+n]for i in range(0,len(fasta_sequence),n)]\n   \n   n_total_rows=int(len(subseq)/self.__blocks_in_line)\n   \n   i_seq +=1\n   \n   i_block_in_subseq=0\n   for block in subseq:\n    for ch in block:\n     i_char +=1\n     fasta_text +=\"<span id=%s>%s</span>\"%(id_str+str(i_seq)+'-'+str(i_char),ch)\n    if self.__show_blockwise:\n     fasta_text +=\"<span> </span>\"\n    i_block_in_subseq +=1\n    is_very_last_block=(n_total_rows ==i_row)and (i_seq ==len(self.__sequence))\n    is_line_full_of_blocks=i_block_in_subseq %self.__blocks_in_line ==0 and len(block)==self.__chars_in_block and not is_very_last_block\n    is_sequence_end=i_block_in_subseq ==len(subseq)\n    if is_line_full_of_blocks or is_sequence_end:\n     ir=i_row *self.__chars_in_block *self.__blocks_in_line+self.__first_residue_id[(i_seq -1)%n_first]\n     dn <=html.SPAN(str(ir))+html.BR()\n     fasta_text +=\"<br>\"\n     i_row +=1\n  document[\"numbers-\"+self.element_id]<=dn\n  document[\"fasta-\"+self.element_id].innerHTML=fasta_text\n  \n  for c in document[\"fasta-\"+self.element_id].children:\n   c.bind(\"click\",lambda evt:self._event_callbacks[\"CLICK_ON_LETTER\"](evt)if \"CLICK_ON_LETTER\"in self._event_callbacks else True )\n   c.bind(\"mouseover\",self.__show_tooltip)\n   c.bind(\"mouseout\",self.__hide_tooltips)\n   \n def __color_span(self,color_scheme_name,style_name,default_color):\n  ''\n\n\n\n\n\n\n\n  \n  \n  fasta_seq=document[\"fasta-\"+self.element_id]\n  if isinstance(color_scheme_name,ColorMap):\n   ii=0\n   for span in fasta_seq.getElementsByTagName(\"span\"):\n    if span.hasAttribute('id'):\n     span.style[style_name]=color_scheme_name.get(ch,default_color)\n     ii +=1\n   return\n   \n  if isinstance(color_scheme_name,list):\n   ii=0\n   for span in fasta_seq.getElementsByTagName(\"span\"):\n    if span.hasAttribute('id'):\n     span.style[style_name]=color_scheme_name[ii %len(color_scheme_name)]\n     ii +=1\n   return\n   \n  if color_scheme_name ==\"none\"or color_scheme_name ==\"clear\":\n   for span in fasta_seq.getElementsByTagName(\"span\"):\n    if span.hasAttribute('id'):\n     span.style[style_name]=default_color\n   return\n   \n  if color_scheme_name ==\"secondary\"and len(self.secondary_structure)==len(self.sequence):\n   self.__color_span(SequenceViewer.secondary_structure_colors(self.secondary_structure,default_color),\n   style_name,default_color)\n   return\n   \n  if color_scheme_name in known_sequence_scales:\n   color_scheme=known_sequence_scales[color_scheme_name]\n   for span in fasta_seq.getElementsByTagName(\"span\"):\n    if span.hasAttribute('id'):\n     ch=span.innerHTML\n     span.style[style_name]=color_scheme.get(ch,default_color)\n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n def __locate_letter(self,obj):\n  i=0\n  for o in document[\"fasta-\"+self.element_id].children:\n   if o ==obj:return i\n   i +=1\n  return None\n  \n def __show_tooltip(self,evt):\n \n  class_name=evt.target.class_name\n  if len(class_name)<2:return\n  for tip_name in self.__selection_tooltips:\n   if class_name.find(tip_name)>-1:\n    if len(self.__selection_tooltips[tip_name])>0:\n     document[tip_name+\"-tooltip\"].style.visibility='visible'\n     document[tip_name+\"-tooltip\"].style.top=str(evt.clientY+20)+'px'\n     document[tip_name+\"-tooltip\"].style.left=str(evt.clientX+20)+'px'\n     \n def __hide_tooltips(self,evt):\n \n  for tip_name in self.__selection_tooltips:\n   document[tip_name+\"-tooltip\"].style.visibility='hidden'\n   \n def __color_sequence_event(self,evt):\n  what=evt.target.id\n  print(\"coloring by\",what)\n  self.color_sequence(what)\n  \n def __color_background_event(self,evt):\n  what=evt.target.id\n  print(\"coloring background by\",what)\n  self.color_background(what)\n", ["browser", "visualife.core.styles", "visualife.utils.html_utils", "visualife.widget"]], "visualife.widget.StructureViewer": [".py", "import json\nfrom browser import window,document,html,bind\nfrom visualife.utils.text_utils import substitute_template\n\n\nclass StructureViewer:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n def __init__(self,div_id,**kwargs):\n \n  self.__div_id=div_id\n  self.__pdbs={}\n  self.__models={}\n  self.__active_selection_dict={}\n  stage=window.NGL.Stage\n  background_color=kwargs.get('backgroundColor',\"black\")\n  \n  self.__on_clear=[]\n  \n  self.__to_write=\"\"\"\n        <div id=\"viewer-{%ID%}\" style=\"height:{%height%}px; width:{%width%}px;\"></div>\n        <div id=\"buttons-{%ID%}\" style=\"display: flex; flex-direction: row; width:{%width%}px; flex-wrap:wrap;\">\n        </div>\n        \"\"\"\n  \n  replacement={\"{%ID%}\":div_id,\"{%width%}\":kwargs.get(\"width\",500),\n  \"{%height%}\":kwargs.get(\"height\",500)\n  }\n  \n  document[div_id].innerHTML=substitute_template(self.__to_write,replacement)\n  self.__stage=stage.new(\"viewer-\"+div_id,{'backgroundColor':background_color})\n  \n  \n  default_menu={\"sticks\":\"as_sticks\",\"cartoon\":\"as_cartoon\",\"center\":\"center\",\n  \"zoom ligand\":\"zoom_heteroatom\",\"clear all\":\"clear\",}\n  \n  menu_def=kwargs.get(\"menu_buttons\",default_menu)\n  for name,func in menu_def.items():\n   self.add_to_menu(name,func)\n   \n def add_to_menu(self,button_name,callback):\n  ''\n\n\n\n  \n  button_id=button_name+\"-\"+self.__div_id\n  button_el=html.INPUT(button_name,id=button_id,Class=\"GLViewerWidget-button\",type=\"button\",value=button_name)\n  document[\"buttons-\"+self.__div_id]<=button_el\n  if callable(callback):\n   button_el.bind(\"click\",callback)\n  else :\n   button_el.bind(\"click\",getattr(self,callback))\n   \n def replace_bfactors(self,model_id,bf_values):\n  ''\n\n\n\n\n  \n  def process_component(component):\n   N=len(bf_values)\n   \n   def bf_action(atom):\n    atom.bfactor=bf_values[atom.residueIndex %N]\n    \n   component.structure.eachAtom(bf_action)\n   \n  self.__models[model_id].then(process_component)\n  \n def as_sticks(self,evt=None ):\n  ''\n\n\n\n\n\n\n\n\n  \n  \n  def color(o):\n   o.removeAllRepresentations()\n   o.addRepresentation('licorice',{'color':'element'})\n   \n  for i in self.__models:\n   self.__models[i].then(color)\n   \n def as_lines(self,evt=None ):\n  ''\n\n\n\n\n\n\n\n\n  \n  def color(o):\n   o.removeAllRepresentations()\n   o.addRepresentation('lines',{'color':'element'})\n   \n  for i in self.__models:\n   self.__models[i].then(color)\n   \n def as_spheres(self,evt=None ):\n  ''\n\n\n\n\n\n\n\n\n  \n  def color(o):\n   o.removeAllRepresentations()\n   o.addRepresentation('spacefill',{'color':'element'})\n   \n  for i in self.__models:\n   self.__models[i].then(color)\n   \n def as_cartoon(self,evt=None ):\n  ''\n\n\n\n\n\n\n  \n  def color(o):\n   o.removeAllRepresentations()\n   o.addRepresentation('cartoon',{'sele':'not hetero','color':'atomindex'})\n   o.addRepresentation('licorice',{'sele':'hetero','color':'element'})\n   \n  for i in self.__models:\n   self.__models[i].then(color)\n   \n def center(self,evt=None ):\n  ''\n  self.__stage.autoView()\n  \n def add_model(self,model_id,URL,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  params={\"ext\":\"pdb\",'defaultRepresentation':True }\n  if \"as_trajectory\"in kwargs:\n   params[\"asTrajectory\"]=kwargs[\"as_trajectory\"]\n  if len(URL.split())>1:\n   print(\"loading PDB text\")\n   stringBlob=window.Blob.new([URL],{\"type\":'text/plain'})\n   m=self.__stage.loadFile(stringBlob,params)\n  else :\n   if len(URL)==4 and URL[0].isdigit():\n    print(\"fetching: rcsb://\"+URL+\".pdb\")\n    m=self.__stage.loadFile(\"rcsb://\"+URL+\".pdb\")\n   else :\n    m=self.__stage.loadFile(URL,params)\n    \n  self.__pdbs[model_id]=URL\n  self.__models[model_id]=m\n  self.as_cartoon()\n  return m\n  \n def remove_model(self,model_id):\n  ''\n\n\n\n  \n  \n  def rem(o):\n   self.__stage.removeComponent(o)\n   \n  if model_id in self.__models:\n   self.__models[model_id].then(rem)\n   return True\n  return False\n  \n def add_style(self,model_id,style,representation_parameters={}):\n  ''\n\n\n\n\n\n  \n  \n  def add_styl(o):\n  \n   reprs=o.addRepresentation(style,representation_parameters)\n   return reprs\n   \n  return self.__models[model_id].then(add_styl)\n  \n def remove_style(self,model_id,rep=None ):\n  ''\n\n\n\n\n  \n  \n  def rem_styl(o):\n   if rep is None :\n    o.removeAllRepresentations()\n   else :\n    o.setVisibility(not o.visible)\n    \n  if rep is None :\n   self.__models[model_id].then(rem_styl)\n  else :\n   rep.then(rem_styl)\n   \n def show_model(self,model_id):\n  ''\n\n\n\n\n\n\n  \n  def set_vis(o):\n   o.setVisibility(True )\n  if model_id in self.__models:\n   self.__models[model_id].then(set_vis)\n   return True\n  return False\n  \n def hide_model(self,model_id):\n  ''\n\n\n\n\n\n\n\n  \n  def set_vis(o):\n   o.setVisibility(False )\n   \n  if model_id in self.__models:\n   self.__models[model_id].then(set_vis)\n   return True\n  return False\n  \n def color_ss(self,model_id):\n  ''\n\n\n  \n  \n  def color(o):\n   o.addRepresentation('backbone',{'color':'sstruc'})\n   o.addRepresentation('rocket',{'sele':'helix','color':'sstruc'})\n   o.addRepresentation('cartoon',{'sele':'sheet','color':'sstruc'})\n   o.addRepresentation('tube',{'sele':'turn','color':'sstruc'})\n   \n  if model_id in self.__models:\n   self.__models[model_id].then(color)\n   return True\n  return False\n  \n def show_distance(self,model_id,atom_pairs_list):\n  ''\n\n\n\n  \n  \n  def distance(o):\n   o.addRepresentation(\"distance\",{\n   'atomPair':atom_pairs_list,\n   'labelColor':\"skyblue\",\n   'color':\"skyblue\"})\n   \n  if model_id in self.__models:\n   self.__models[model_id].then(distance)\n   return True\n  return False\n  \n def zoom_to(self,model_id,selection):\n  ''\n\n\n\n\n\n\n\n\n  \n  def zoom(o):\n   o.autoView(selection,1000)\n  if model_id in self.__models:\n   self.__models[model_id].then(zoom)\n   return True\n  return False\n  \n def zoom_heteroatom(self,evt):\n  ''\n\n\n\n\n\n  \n  def zoom(o):\n   o.autoView(\"hetero and not water and not GOL\",100)\n  for i in self.__models:\n   self.__models[i].then(zoom)\n   \n def clear(self,evt=None ):\n  ''\n  self.__stage.removeAllComponents()\n  \n  \n", ["browser", "json", "visualife.utils.text_utils"]], "visualife.widget.TableWidget": [".py", "from browser import document,html\n\n\nclass TableWidget:\n\n __style=\"\"\"\n        div.table-body {\n            width: 500px;\n            height: 200px;\n            overflow-y: scroll;\n            display: block;\n            border-bottom: 2px solid #00cccc;\n            font-size: inherit;\n        }\n\n        div.table-body table {\n            width: 100%;\n            height: 100%;\n            border-collapse: collapse;\n            width: 100%;\n            font-size: 1em;\n        }\n\n        div.table-body table tr:nth-child(odd) { background: #f4f4f4; }\n\n        div.table-body table tbody tr:hover { background: #ddd; }\n\n        div.table-body td {\n            height: 20px; \n            text-align: center;\n            padding: 0 0 0 0;\n        }\n\n        div.table-header { height: 30px; }\n        \n        div.table-header table { overflow: scroll; height: inherit; border: none;}\n        \n        div.table-header table th {\n            cursor: pointer;\n            background: #00cccc;\n            color: #fff;\n            height: inherit;\n        }\n\n        div.table-header table th div {\n            display: inline-flex;\n            flex-direction: row;\n        }\n        .up { \n            position:absolute;\n            top:0px;\n            left:0px\n        }\n        \n        .down { \n            position:absolute;\n            top:10px;\n            left:0px\n        }\n        div.table-header {\n            width: 500px;\n            height: 30px;\n            /* overflow-y: scroll; */\n            display: block;\n        }\n\n        div.table-header table {\n            width: 100%;\n            height: 100%;\n            border: 1px solid #ccc;\n            border-collapse: collapse;\n        }\n\n        div.table-footer {\n            width: 500px;\n            height: 30px;\n            display: flex;\n            flex-direction: row;\n            justify-content: space-between;\n            background: #00cccc;\n            color: #fff;\n        }\n        div.table-footer-left div.table-footer-right {\n            width: 50px;\n        }        \n        div.table-footer-center {\n            width: 250px;\n            display: flex;\n            flex-direction: row;\n            justify-content: space-between;\n        }\n        div.table-footer-center span {\n            font-size: 12px;\n            display: table-cell;\n            vertical-align: middle;\n          }\n    \"\"\"\n \n def __init__(self,table_id,parent_id,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__table_id=table_id\n  self.__parent_id=parent_id\n  self.__columns=kwargs.get(\"columns\",[])\n  self.__sort_inverse={}\n  self.__data=kwargs.get(\"data\",[])\n  self.__cell_callback=kwargs.get(\"cell_callback\",[self.__select_table_row])\n  self.__sort_callback=[self.__sort_by_column]\n  self.__page_callback=[self.__go_to_page]\n  self.__rows_per_page=kwargs.get(\"rows_per_page\",100)\n  self.__current_page=0\n  self.__selected_rows=[]\n  self.__highlight_color=kwargs.get(\"highlight_color\",\"lightgrey\")\n  self.__table_width=document[parent_id].clientWidth\n  \n  document <=html.STYLE(TableWidget.__style)\n  document <=html.LINK(rel=\"stylesheet\",\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\")\n  \n  hh=kwargs.get(\"header_height\",30)\n  wh=kwargs.get(\"width\",500)\n  \n  \n  header_div=html.DIV(id=table_id+\"-div-header\",Class=\"table-header\",\n  style={\"height\":\"%dpx\"%hh,\"width\":\"%dpx\"%wh})\n  header_tbl=html.TABLE(id=table_id+\"-header\")\n  header_div <=header_tbl\n  self.__thead=html.THEAD(id=self.__table_id+\"-THEAD\")\n  header_tbl <=self.__thead\n  \n  \n  dh=kwargs.get(\"height\",500)-hh\n  body_div=html.DIV(id=table_id+\"-div-table\",Class=\"table-body\",\n  style={\"height\":\"%dpx\"%dh,\"width\":\"%dpx\"%wh})\n  body_tbl=html.TABLE(id=table_id+\"-body\")\n  body_div <=body_tbl\n  self.__tbody=html.TBODY(id=self.__table_id+\"-TBODY\")\n  body_tbl <=self.__tbody\n  \n  \n  footer_div=html.DIV(id=table_id+\"-div-footer\",Class=\"table-footer\",\n  style={\"height\":\"%dpx\"%hh,\"width\":\"%dpx\"%wh})\n  footer_div <=html.DIV(id=table_id+\"-div-footer-left\",Class=\"table-footer-left\",\n  style={\"padding-left\":\"10px\"})\n  footer_cntr=html.DIV(id=table_id+\"-div-footer-center\",Class=\"table-footer-center\")\n  footer_cntr <=html.SPAN(id=table_id+\"fast-backward\",Class=\"fa fa-fast-backward\")\n  footer_cntr <=html.SPAN(id=table_id+\"backward\",Class=\"fa fa-backward\")\n  footer_cntr <=html.SPAN(\"page\")\n  footer_cntr <=html.INPUT(id=table_id+\"-div-footer-input\",type=\"text\",size=\"4\",maxlength=\"7\",value=\"1\")\n  footer_cntr <=html.SPAN(\"of\",id=table_id+\"-div-footer-counter\")\n  \n  footer_cntr <=html.SPAN(id=table_id+\"forward\",Class=\"fa fa-forward\")\n  footer_cntr <=html.SPAN(id=table_id+\"fast-forward\",Class=\"fa fa-fast-forward\")\n  footer_div <=footer_cntr\n  footer_div <=html.DIV(id=table_id+\"-div-footer-right\",Class=\"table-footer-right\",\n  style={\"padding-right\":\"10px\"})\n  \n  \n  document[parent_id]<=header_div\n  document[parent_id]<=body_div\n  document[parent_id]<=footer_div\n  \n  \n  document[table_id+\"-div-table\"].bind(\"scroll\",self.__scroll_table)\n  \n  document[table_id+\"forward\"].bind(\"click\",self.__dispatch_page_event)\n  document[table_id+\"backward\"].bind(\"click\",self.__dispatch_page_event)\n  document[table_id+\"fast-forward\"].bind(\"click\",self.__dispatch_page_event)\n  document[table_id+\"fast-backward\"].bind(\"click\",self.__dispatch_page_event)\n  \n  if len(self.__columns)>0:\n   self.__create_header()\n   self.__create_table_rows()\n   \n  if len(self.__data)>0:\n   self.__current_page=1\n   self.show_table(1)\n   document[table_id+\"-div-footer-counter\"].innerHTML=\"of %d\"%self.count_pages()\n   \n @property\n def current_page(self):\n  ''\n\n\n  \n  return self.__current_page\n  \n @property\n def rows_per_page(self):\n  ''\n\n\n  \n  return self.__rows_per_page\n  \n def add_column(self,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  if TableWidget.__check_column(kwargs):\n   self.__columns.append(kwargs)\n   \n def add_data_rows(self,data_rows):\n  ''\n\n\n\n\n  \n  \n  if not isinstance(data_rows[0],list):\n   data_rows=[data_rows]\n   \n  for data_row in data_rows:\n   if len(data_row)>=len(self.__columns):\n    self.__data.append(data_row)\n   else :\n    print(\"Too few data elements in a table row:\",data_row)\n    return False\n    \n  document[self.__table_id+\"-div-footer-counter\"].innerHTML=\"of %d\"%self.count_pages()\n  \n def clear_data(self):\n  ''\n\n\n\n\n\n  \n  self.__tbody.clear()\n  self.__data=[]\n  \n @property\n def data(self):\n  ''\n\n\n\n  \n  return self.__data\n  \n def replace_data(self,new_data):\n  ''\n\n\n\n\n  \n  self.__data=new_data\n  document[self.__table_id+\"-div-footer-counter\"].innerHTML=\"of %d\"%self.count_pages()\n  \n def get_column_data(self,which_column,which_page=1):\n  ''\n\n\n\n\n\n  \n  out=[]\n  if isinstance(which_column,str):\n   i_col=0\n   for column in self.__columns:\n    if which_column.find(column.get(\"field_id\"))>=0:\n     which_column=i_col\n     break\n    i_col +=1\n  if which_page ==0:\n   row_from=0\n   row_to=len(self.__data)\n  else :\n   row_from=(which_page -1)*self.__rows_per_page\n   row_to=min(which_page *self.__rows_per_page,len(self.__data))\n  for i in range(row_from,row_to):\n   out.append(self.__data[i][which_column])\n   \n  return out\n  \n def show_table(self,which_page):\n  ''\n\n\n\n  \n  row_from=(which_page -1)*self.__rows_per_page\n  row_to=min(which_page *self.__rows_per_page,len(self.__data))\n  document[self.__table_id+\"-div-footer-left\"].innerHTML=\"%d rows\"%len(self.__data)\n  document[self.__table_id+\"-div-footer-right\"].innerHTML=\"showing rows from %d to %s\"%(row_from+1,row_to)\n  document[self.__table_id+\"-div-footer-input\"].value=which_page\n  current_row_id=(self.__current_page -1)*self.__rows_per_page\n  for i in range(row_from,row_to):\n   current_id=self.__table_id+\"-TR-%d\"%current_row_id\n   j=0\n   for td in document[current_id].children:\n    column=self.__columns[j]\n    data=self.__data[i][j]\n    td.innerHTML=column[\"format\"]%data if \"format\"in column and not isinstance(data,str)else data\n    td.id=\"%s-TD-%d-%d\"%(self.__table_id,i,j)\n    j +=1\n   if i in self.__selected_rows:\n    document[current_id].style.background=self.__highlight_color\n   else :\n    document[current_id].style.background=''\n   document[current_id].id=self.__table_id+\"-TR-%d\"%i\n   current_row_id +=1\n  for i in range(row_to -row_from,self.__rows_per_page):\n   current_id=self.__table_id+\"-TR-%d\"%current_row_id\n   for td in document[current_id].children:td.innerHTML=\"\"\n   document[current_id].style.background=''\n   document[current_id].id=self.__table_id+\"-TR-%d\"%(i+row_from)\n   current_row_id +=1\n  self.__current_page=which_page\n  \n def select_row(self,which_row,if_select=True ):\n  ''\n\n\n\n\n\n\n\n  \n  row_id=self.__table_id+\"-TR-%d\"%which_row\n  if which_row in self.__selected_rows:\n   if not if_select:\n    self.__selected_rows.remove(which_row)\n    document[row_id].style.background=''\n    return False\n   else :\n    document[row_id].style.background=self.__highlight_color\n    return True\n  else :\n   if if_select:\n    self.__selected_rows.append(which_row)\n    row_from=(self.current_page -1)*self.__rows_per_page\n    row_to=min(self.current_page *self.__rows_per_page,len(self.__data))\n    if which_row >=row_from and which_row <row_to:\n     self.show_table(self.current_page)\n    document[row_id].style.background=self.__highlight_color\n    return True\n   else :\n    document[row_id].style.background=''\n    return False\n    \n @property\n def selected_rows(self):\n  ''\n  return self.__selected_rows\n  \n def unselect_all_rows(self):\n  ''\n  self.__selected_rows=[]\n  \n def count_pages(self):\n  ''\n\n\n  \n  return len(self.__data)//self.__rows_per_page+(1 if len(self.__data)%self.__rows_per_page >0 else 0)\n  \n def add_cell_callback(self,callback_function):\n  ''\n\n\n\n\n\n\n  \n  self.__cell_callback.append(callback_function)\n  \n def add_sort_callback(self,callback_function):\n  ''\n\n\n\n\n\n\n  \n  self.__sort_callback.append(callback_function)\n  \n def add_page_callback(self,callback_function):\n  ''\n\n\n\n  \n  self.__page_callback.append(callback_function)\n  \n def clear_cell_callback(self):\n  ''\n\n\n  \n  self.__cell_callback=[]\n  \n def get_data_row(self,element_id):\n  ''\n\n\n\n\n\n  \n  row_column=self.__process_id(element_id)\n  if not row_column:return None\n  return self.data[row_column[0]]\n  \n def get_data_value(self,element_id):\n  ''\n\n\n\n\n\n  \n  row_column=self.__process_id(element_id)\n  if not row_column:return None\n  return self.data[row_column[0]][row_column[1]]\n  \n def __process_id(self,element_id):\n  ''\n\n\n\n\n\n\n\n\n  \n  tokens=element_id.split('-')\n  if len(tokens)<2:\n   print(\"Incorrect element ID!\")\n   return None\n  if tokens[0]!=self.__table_id:\n   print(\"Element ID points to another table! This table ID is: %s, received: %s\"%(self.__table_id,tokens[0]))\n   return None\n  if tokens[1]==\"TR\":return [int(tokens[2])]\n  if tokens[1]==\"TD\":return [int(tokens[2]),int(tokens[3])]\n  print(\"Incorrect element ID! Expected TD or TR element ID\")\n  return None\n  \n def __create_header(self):\n  tr=html.TR(id=self.__table_id+\"-THEAD-TR\")\n  document[self.__table_id+\"-THEAD\"]<=tr\n  j=0\n  for col in self.__columns:\n   id_prefix=self.__table_id+\"-\"+col.get(\"field_id\")\n   j +=1\n   style={}\n   if \"width\"in col:\n    style[\"width\"]=col[\"width\"]\n   if \"min_width\"in col:style[\"min-width\"]=col[\"min_width\"]\n   if len(style)>0:\n    th=html.TH(id=id_prefix+\"-TH\",style=style)\n   else :\n    th=html.TH(id=id_prefix+\"-TH\")\n   th_content=html.DIV(col.get(\"title\"),id=id_prefix+\"-DIV\")\n   th <=th_content\n   \n   group=html.DIV(id=self.__table_id+\"-sort-arrows\",\n   style={\"position\":\"relative\",\"min-width\":\"20px\",\"width\":\"20px\"})\n   up=html.SPAN(id=self.__table_id+\"-%s-up\"%col.get(\"field_id\"),\n   Class=\"fa fa-caret-up up\",style={\"font-size\":\"120%\",\"opacity\":\"0.5\"})\n   down=html.SPAN(id=self.__table_id+\"-%s-down\"%col.get(\"field_id\"),\n   Class=\"fa fa-caret-down down\",style={\"font-size\":\"120%\",\"opacity\":\"0.5\"})\n   up.bind(\"click\",self.__dispatch_sort_event)\n   down.bind(\"click\",self.__dispatch_sort_event)\n   th.bind(\"click\",self.__dispatch_sort_event)\n   group <=up\n   group <=down\n   th_content <=group\n   tr <=th\n  self.__thead <=tr\n  \n def __create_table_rows(self):\n \n  widths=[]\n  for column in self.__columns:\n   id=self.__table_id+\"-\"+column.get(\"field_id\")+\"-TH\"\n   widths.append(column[\"width\"]if \"width\"in column else str(document[id].offsetWidth)+\"px\")\n  n_col=len(self.__columns)\n  for i in range(self.__rows_per_page):\n   tr=html.TR(id=self.__table_id+\"-TR-%d\"%i)\n   self.__tbody <=tr\n   for j in range(n_col):\n    id=\"%s-TD-%d-%d\"%(self.__table_id,i,j)\n    tr <=html.TD(id=id,style={\"width\":widths[j],\"min-width\":widths[j]})\n  for td in self.__tbody.select('td'):\n   td.bind('click',self.__cell_callback_handler)\n   \n def __select_table_row(self,evt):\n  ''\n\n\n\n\n\n\n\n  \n  row,col=self.__process_id(evt.target.id)\n  self.select_row(row,(row not in self.__selected_rows))\n  \n def __dispatch_sort_event(self,evt):\n  for f in self.__sort_callback:f(evt)\n  \n def __dispatch_page_event(self,evt):\n  for f in self.__page_callback:f(evt)\n  \n def __sort_by_column(self,evt):\n  ''\n\n\n\n\n\n\n  \n  id=evt.target.id\n  self.unselect_all_rows()\n  print(\"sort called:\",id)\n  i_col=0\n  for column in self.__columns:\n   if id.find(column.get(\"field_id\"))>=0:\n    self.__clear_all_sorting_arrows()\n    sorter_name=column.get(\"sorter\",\"\")\n    if sorter_name ==\"\"or sorter_name ==\"string\":\n     sorter=lambda row:str(row[i_col])\n    elif sorter_name ==\"int\":\n     sorter=lambda row:int(row[i_col])\n    elif sorter_name ==\"float\":\n     sorter=lambda row:float(row[i_col])\n    elif not sorter_name:\n     return\n    if id.find(\"up\")>=0:reverse=False\n    elif id.find(\"down\")>=0:reverse=True\n    else :reverse=self.__sort_inverse.get(id,False )\n    self.__data.sort(key=sorter,reverse=reverse)\n    self.__sort_inverse[id]=not reverse\n    self.show_table(1)\n    if reverse:\n     document[self.__table_id+\"-%s-down\"%column.get(\"field_id\")].style.opacity=1.0\n    else :\n     document[self.__table_id+\"-%s-up\"%column.get(\"field_id\")].style.opacity=1.0\n   i_col +=1\n   \n def __clear_all_sorting_arrows(self):\n  for column in self.__columns:\n   document[self.__table_id+\"-%s-down\"%column.get(\"field_id\")].style.opacity=0.5\n   document[self.__table_id+\"-%s-up\"%column.get(\"field_id\")].style.opacity=0.5\n   \n def __go_to_page(self,evt):\n  ''\n  \n  if evt.target.id.find(\"fast-forward\")>=0:\n   self.show_table(self.count_pages())\n  elif evt.target.id.find(\"fast-backward\")>=0:\n   self.show_table(1)\n  elif evt.target.id.find(\"backward\")>=0:\n   self.show_table(max(self.current_page -1,1))\n  elif evt.target.id.find(\"forward\")>=0:\n   self.show_table(min(self.current_page+1,self.count_pages()))\n   \n def __scroll_table(self,evt):\n  print(evt.target.id)\n  print(evt.target.scrollLeft)\n  document[self.__table_id+\"-header\"].scrollLeft=evt.target.scrollLeft\n  print(document[self.__table_id+\"-header\"].id)\n  print(document[self.__table_id+\"-header\"].scrollLeft)\n  \n @staticmethod\n def __check_column(**kwargs):\n  for key in [\"title\",\"field_id\"]:\n   if key not in kwargs:\n    print(\"Table column is missing its mandatory key:\",key)\n    return False\n  return True\n  \n def __cell_callback_handler(self,evt):\n  if self.__cell_callback:\n   for c in self.__cell_callback:c(evt)\n", ["browser"]], "visualife.widget.TooltipWidget": [".py", "from browser import document,html\n\ntooltip_style={\n'backgroundColor':'white',\n'color':'#000',\n'textAlign':'center',\n'padding':'5px 0px',\n'borderRadius':'6px',\n'visibility':'hidden',\n'position':'fixed',\n'overflow':'hidden',\n'display':'none',\n'textDecoration':'none',\n}\n\n\nclass TooltipWidget:\n\n def __init__(self,id_text,parent_id,tooltip_text,width,height,**kwargs):\n  ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  self.__id=id_text\n  self.__tooltip_text=tooltip_text\n  self.__is_visible=False\n  self.__x=0\n  self.__y=0\n  self.__offset_x=kwargs.get(\"offset_x\",20)\n  self.__offset_y=kwargs.get(\"offset_y\",20)\n  style=dict(tooltip_style)\n  if \"style\"in kwargs:style=dict(style,**kwargs[\"style\"])\n  style['position']=kwargs.get(\"position\",\"fixed\")\n  if \"Class\"in kwargs:\n   self.__tooltip=html.DIV(tooltip_text,id=id_text,Class=kwargs[\"Class\"],\n   style={**style,'height':height,'width':width})\n  else :\n   self.__tooltip=html.DIV(tooltip_text,id=id_text,\n   style={**style,'height':height,'width':width})\n  document[parent_id]<=self.__tooltip\n  \n @property\n def tooltip_text(self):\n  ''\n  return self.__tooltip_text\n  \n @tooltip_text.setter\n def tooltip_text(self,new_tooltip):\n  self.__tooltip_text=new_tooltip\n  self.__tooltip.innerHTML=new_tooltip\n  \n @property\n def x(self):\n  ''\n  return self.__x\n  \n @x.setter\n def x(self,x):self.__x=x\n \n @property\n def y(self):\n  ''\n  \n  return self.__y\n  \n @y.setter\n def y(self,y):self.__y=y\n \n def show(self,x,y):\n  ''\n\n\n\n\n  \n  self.__x=x\n  self.__y=y\n  self.__is_visible=True\n  self.__tooltip.style.visibility=\"visible\"\n  self.__tooltip.style.display=\"block\"\n  self.__tooltip.style.top=str(self.__y+self.__offset_y)+'px'\n  self.__tooltip.style.left=str(self.__x+self.__offset_x)+'px'\n  \n def hide(self,evt=None ):\n  ''\n\n\n  \n  self.__is_visible=False\n  self.__tooltip.style.visibility=\"hidden\"\n  self.__tooltip.style.display=\"none\"\n  \n  \n  \n", ["browser"]], "visualife.widget": [".py", "''\n\n\ntry :\n from visualife.widget.AbstractWidget import AbstractWidget\n from visualife.widget.FileReaderWidget import *\n from visualife.widget.GLViewerWidget import GLViewerWidget\n from visualife.widget.SequenceViewer import SequenceViewer\n from visualife.widget.StructureViewer import StructureViewer\n from visualife.widget.SecondaryStructureViewer import SecondaryStructureViewer\n from visualife.widget.TooltipWidget import TooltipWidget\n from visualife.widget.TableWidget import TableWidget\n from visualife.widget.MSAViewer import MSAViewer\n from visualife.widget.SequenceFeaturesBar import SequenceFeaturesBar\nexcept :\n pass\n \n", ["visualife.widget.AbstractWidget", "visualife.widget.FileReaderWidget", "visualife.widget.GLViewerWidget", "visualife.widget.MSAViewer", "visualife.widget.SecondaryStructureViewer", "visualife.widget.SequenceFeaturesBar", "visualife.widget.SequenceViewer", "visualife.widget.StructureViewer", "visualife.widget.TableWidget", "visualife.widget.TooltipWidget"], 1]}
__BRYTHON__.update_VFS(scripts)
